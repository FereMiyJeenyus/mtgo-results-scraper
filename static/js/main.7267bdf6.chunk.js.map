{"version":3,"sources":["scraper.ts","types.ts","CardItem.tsx","DeckList.tsx","DeckDetailModal.tsx","InfoModal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["regex","spaces","getDecksFromUrl","wotcUrl","a","results","startsWith","fetch","response","text","body","$","cheerio","usernames","each","index","dg","headerContent","find","username","split","duplicatePilot","includes","push","parts","name","chaff","replace","toLowerCase","url","deck","main","sideboard","row","trim","info","cardInfo","count","parseInt","highlighted","pilot","archetype","favorite","spicy","console","log","setList","code","colorMap","W","undefined","U","B","R","G","M","C","CardItem","props","cardColor","otherHalfColor","card","toggleCardHighlight","costIcons","colors","manaCost","length","otherHalf","slice","forEach","pip","List","Item","style","marginLeft","paddingTop","content","symbol","shadow","onClick","className","Popup","trigger","Content","color","Header","Meta","type","Description","whiteSpace","power","toughness","extra","padding","float","fontWeight","faceName","colorLabels","typeLabels","colorColors","typeColors","DeckList","result","updateDeck","useState","colorCount","setColorCount","typeCount","setTypeCount","useEffect","wCount","uCount","bCount","rCount","gCount","cCount","creatures","noncreatures","lands","types","c","Planeswalkers","Creatures","Instants","Sorceries","Artifacts","Enchantments","Lands","Unknown","side","Companion","Grid","width","padded","Row","Column","marginBottom","textAlign","Icon","size","marginTop","Object","keys","filter","key","map","Container","data","labels","datasets","backgroundColor","options","title","display","legend","label","position","cutoutPercentage","DeckDetailModal","setResults","open","onClose","displayedDeckIndex","setDisplayedDeckIndex","resultCount","goToNextDeck","displayedDeck","res","updateDisplayedDeck","Modal","centered","closeOnDimmerClick","closeIcon","verticalAlign","Input","value","onChange","e","onKeyPress","Checkbox","checked","Button","InfoModal","paddingLeft","ordered","ListItem","href","App","hasScraped","setHasScraped","setWotcUrl","resultList","setResultList","selectedCards","setSelectedCards","cardOptions","setCardOptions","cardCounts","setCardCounts","selectedExpansions","setSelectedExpansions","deckModalOpen","setDeckModalOpen","infoModalOpen","setInfoModalOpen","scrapeError","setScrapeError","isNumberedResults","setIsNumberedResults","expandOptions","setExpandOptions","textFormat","setTextFormat","filterForSpice","setFilterForSpice","filterForFave","setFilterForFave","archetypeRules","setArchetypeRules","rulesFromStorage","window","localStorage","getItem","JSON","parse","setItem","stringify","generateCardCounts","counts","r","countRow","deckCount","sort","b","identifyArchetype","rules","isMatch","cardSet","in","combinedCards","mb","rule","cardName","atMost","atLeast","some","deckFitsRule","scrape","scrapedResults","namedResults","generatePlaintext","resultLines","path","date","txt","charAt","toUpperCase","join","generateMarkdownLine","muUrl","muPilot","highlights","muHighlights","Array","from","Set","generateMarkdown","muString","copyToClipboard","navigator","clipboard","writeText","deckHasCard","filterCards","applyDeckFilters","useCallback","filterExpansions","expansions","flatMap","printings","deckHasExpansion","applyCardFilters","cards","p","filteredResults","filteredCardCounts","previewText","decksByCard","urls","panes","menuItem","pane","Tab","Pane","Form","TextArea","height","columns","target","placeholder","rel","horizontal","disabled","Accordion","Title","active","Dropdown","multiple","clearable","search","selection","_e","s","Field","radio","toggle","Message","negative","renderActiveOnly","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7267bdf6.chunk.js","sourcesContent":["import fetch from \"node-fetch\";\r\nimport * as cheerio from \"cheerio\";\r\nimport { Deck, Result } from \"./types\";\r\nimport cardInfo from \"./resources/cardInfo.json\";\r\n\r\nconst regex = /[^A-Za-z _-]/g;\r\nconst spaces = / /g;\r\n\r\nexport const getDecksFromUrl = async (wotcUrl: string): Promise<Result[]> => {\r\n    const results: Result[] = [];\r\n    if (wotcUrl.startsWith(\"https://magic.wizards.com\")) {\r\n        try {\r\n            const response = await fetch(`https://scraper-cors.herokuapp.com/${wotcUrl}`);\r\n            const body = await response.text();\r\n            const $ = cheerio.load(body);\r\n            const usernames: string[] = [];\r\n            $(\".deck-group\").each((index: number, dg: cheerio.Element) => {\r\n                const headerContent = $(dg).find(\"h4\").text();\r\n                const username = headerContent.split(\" (\")[0];\r\n                const duplicatePilot = usernames.includes(username);\r\n                usernames.push(username);\r\n                const parts = headerContent.split(\" (\");\r\n                const name = parts[0];\r\n                let chaff = \"\";\r\n                if (parts[1]) {\r\n                    chaff = parts[1].replace(regex, \"\").replace(spaces, \"_\").toLowerCase();\r\n                }\r\n                const url = `${wotcUrl}#${name.replace(regex, \"\").replace(spaces, \"_\").toLowerCase()}${chaff ? \"_\" + chaff : \"\"}`;\r\n\r\n                const deck: Deck = {\r\n                    main: [],\r\n                    sideboard: []\r\n                };\r\n                $(dg)\r\n                    .find(\".sorted-by-overview-container\")\r\n                    .find(\".row\")\r\n                    .each((index: number, row: cheerio.Element) => {\r\n                        const name: string = $(row).find(\".card-name\").text().trim();\r\n                        const info = cardInfo[name] || cardInfo[name.split(\"//\")[0].trim()];\r\n                        deck.main.push({\r\n                            name,\r\n                            count: parseInt($(row).find(\".card-count\").text(), 10),\r\n                            highlighted: false,\r\n                            info\r\n                        });\r\n                    });\r\n\r\n                $(dg)\r\n                    .find(\".sorted-by-sideboard-container\")\r\n                    .find(\".row\")\r\n                    .each((index: number, row: cheerio.Element) => {\r\n                        const name = $(row).find(\".card-name\").text().trim();\r\n                        const info = cardInfo[name] || cardInfo[name.split(\"//\")[0].trim()];\r\n                        deck.sideboard.push({\r\n                            name,\r\n                            count: parseInt($(row).find(\".card-count\").text(), 10),\r\n                            highlighted: false,\r\n                            info\r\n                        });\r\n                    });\r\n\r\n                results.push({\r\n                    pilot: username,\r\n                    url: url,\r\n                    deck: deck,\r\n                    duplicatePilot,\r\n                    archetype: \"\",\r\n                    favorite: false,\r\n                    spicy: false,\r\n                    index\r\n                });\r\n            });\r\n        } catch (err) {\r\n            console.log(err);\r\n            throw err;\r\n        }\r\n    }\r\n    return results;\r\n};\r\n","export interface Deck {\r\n    main: Card[];\r\n    sideboard: Card[];\r\n}\r\n\r\nexport interface Card {\r\n    name: string;\r\n    count: number;\r\n    highlighted: boolean;\r\n    info?: CardInfo;\r\n}\r\n\r\nexport interface Result {\r\n    pilot: string;\r\n    url: string;\r\n    deck: Deck;\r\n    duplicatePilot: boolean;\r\n    archetype: string;\r\n    index: number;\r\n    favorite: boolean;\r\n    spicy: boolean;\r\n}\r\n\r\nexport interface CardInfo {\r\n    colors: Color[];\r\n    faceName: string;\r\n    type: string;\r\n    types: CardType[];\r\n    manaCost: string;\r\n    text: string;\r\n    power: string;\r\n    toughness: string;\r\n    otherHalf: {\r\n        colors: Color[];\r\n        faceName: string;\r\n        type: string;\r\n        types: CardType[];\r\n        manaCost: string;\r\n        text: string;\r\n        power: string;\r\n        toughness: string;\r\n    };\r\n    printings: string[];\r\n}\r\n\r\nexport interface CardCount {\r\n    card: Card;\r\n    deckCount: number;\r\n}\r\n\r\nexport type Color = \"W\" | \"U\" | \"B\" | \"R\" | \"G\";\r\nexport type CardType = \"Creature\" | \"Land\" | \"Instant\" | \"Sorcery\" | \"Artifact\" | \"Enchantment\" | \"Planeswalker\";\r\n\r\nexport const setList = [\r\n    { code: \"NEO\", name: \"Kamigawa: Neon Dynasty\" },\r\n    { code: \"VOW\", name: \"Innistrad: Crimson Vow\" },\r\n    { code: \"MID\", name: \"Innistrad: Midnight Hunt\" },\r\n    { code: \"AFR\", name: \"Adventures in the Forgotten Realms\" },\r\n    { code: \"MH2\", name: \"Modern Horizons 2\" },\r\n    { code: \"STX\", name: \"Strixhaven: School of Mages\" },\r\n    { code: \"KHM\", name: \"Kaldheim\" },\r\n    { code: \"ZNR\", name: \"Zendikar Rising\" },\r\n    { code: \"M21\", name: \"Core Set 2021\" },\r\n    { code: \"IKO\", name: \"Ikoria: Lair of Behemoths\" },\r\n    { code: \"THB\", name: \"Theros Beyond Death\" },\r\n    { code: \"ELD\", name: \"Throne of Eldraine\" },\r\n    { code: \"M20\", name: \"Core Set 2020\" },\r\n    { code: \"MH1\", name: \"Modern Horizons\" },\r\n    { code: \"WAR\", name: \"War of the Spark\" }\r\n];\r\n\r\nexport interface ArchetypeClassification {\r\n    name: string;\r\n    rules: Rule[];\r\n}\r\n\r\nexport interface Rule {\r\n    cardName: string;\r\n    in: \"main\" | \"side\" | \"both\";\r\n    atLeast?: number;\r\n    atMost?: number;\r\n}\r\n","import React from \"react\";\r\nimport { Card } from \"./types\";\r\nimport { Card as SemanticCard, List, Popup } from \"semantic-ui-react\";\r\nimport { Mana } from \"@saeris/react-mana\";\r\n\r\ninterface CardItemProps {\r\n    card: Card;\r\n    toggleCardHighlight(Card: Card): void;\r\n}\r\n\r\nconst colorMap: {\r\n    [key: string]: \"blue\" | \"black\" | \"red\" | \"green\" | \"yellow\" | \"brown\" | undefined;\r\n} = {\r\n    W: undefined,\r\n    U: \"blue\",\r\n    B: \"black\",\r\n    R: \"red\",\r\n    G: \"green\",\r\n    M: \"yellow\",\r\n    C: \"brown\"\r\n};\r\n\r\nconst CardItem: React.FC<CardItemProps> = (props: CardItemProps) => {\r\n    const { card, toggleCardHighlight } = props;\r\n    let cardColor: \"blue\" | \"black\" | \"red\" | \"green\" | \"yellow\" | \"brown\" | undefined;\r\n    let otherHalfColor: \"blue\" | \"black\" | \"red\" | \"green\" | \"yellow\" | \"brown\" | undefined;\r\n    const costIcons: React.ReactElement[] = [];\r\n    if (card.info) {\r\n        const { colors, manaCost } = card.info;\r\n        switch (colors.length) {\r\n            case 0:\r\n                cardColor = colorMap[\"C\"];\r\n                break;\r\n            case 1:\r\n                cardColor = colorMap[colors[0]];\r\n                break;\r\n            default:\r\n                cardColor = colorMap[\"M\"];\r\n                break;\r\n        }\r\n        if (card.info.otherHalf?.colors) {\r\n            switch (card.info.otherHalf.colors.length) {\r\n                case 0:\r\n                    otherHalfColor = colorMap[\"C\"];\r\n                    break;\r\n                case 1:\r\n                    otherHalfColor = colorMap[colors[0]];\r\n                    break;\r\n                default:\r\n                    otherHalfColor = colorMap[\"M\"];\r\n                    break;\r\n            }\r\n        }\r\n        if (manaCost) {\r\n            const manaCostArray = manaCost.slice(1, manaCost.length - 1).split(\"}{\");\r\n            manaCostArray.forEach((pip, index) => {\r\n                costIcons.push(\r\n                    <List.Item key={index} style={{ marginLeft: 2, paddingTop: 0 }} content={<Mana symbol={pip.replace(\"/\", \"\").toLowerCase()} shadow />} />\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? \"highlight\" : \"\"}>\r\n            <Popup\r\n                trigger={\r\n                    <p>\r\n                        {card.count} {card.name}\r\n                    </p>\r\n                }\r\n            >\r\n                <Popup.Content>\r\n                    {card.info && (\r\n                        <>\r\n                            <SemanticCard color={cardColor}>\r\n                                <SemanticCard.Content>\r\n                                    <SemanticCard.Header>{card.name}</SemanticCard.Header>\r\n                                    <SemanticCard.Meta>{card.info.type}</SemanticCard.Meta>\r\n                                    <SemanticCard.Description style={{ whiteSpace: \"pre-line\" }}>{card.info.text}</SemanticCard.Description>\r\n                                </SemanticCard.Content>\r\n                                {(card.info.power || card.info.toughness) && (\r\n                                    <SemanticCard.Content extra style={{ padding: \".25em 1em\" }}>\r\n                                        <div\r\n                                            style={{\r\n                                                float: \"right\",\r\n                                                fontWeight: \"bold\"\r\n                                            }}\r\n                                        >\r\n                                            {card.info.power}/{card.info.toughness}\r\n                                        </div>\r\n                                    </SemanticCard.Content>\r\n                                )}\r\n                            </SemanticCard>\r\n                            {card.info.otherHalf && (\r\n                                <SemanticCard color={otherHalfColor}>\r\n                                    <SemanticCard.Content>\r\n                                        <SemanticCard.Header>{card.info.otherHalf.faceName}</SemanticCard.Header>\r\n                                        <SemanticCard.Meta>{card.info.otherHalf.type}</SemanticCard.Meta>\r\n                                        <SemanticCard.Description style={{ whiteSpace: \"pre-line\" }}>{card.info.otherHalf.text}</SemanticCard.Description>\r\n                                    </SemanticCard.Content>\r\n                                    {(card.info.otherHalf.power || card.info.otherHalf.toughness) && (\r\n                                        <SemanticCard.Content extra style={{ padding: \".25em 1em\" }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    float: \"right\",\r\n                                                    fontWeight: \"bold\"\r\n                                                }}\r\n                                            >\r\n                                                {card.info.power}/{card.info.toughness}\r\n                                            </div>\r\n                                        </SemanticCard.Content>\r\n                                    )}\r\n                                </SemanticCard>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </Popup.Content>\r\n            </Popup>\r\n        </List.Item>\r\n    );\r\n};\r\n\r\nexport default CardItem;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Header, Grid, List, Container, Icon } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { Result, Card } from \"./types\";\r\nimport CardItem from \"./CardItem\";\r\n\r\ninterface DeckListProps {\r\n    result: Result;\r\n    updateDeck(result: Result): void;\r\n}\r\n\r\nconst colorLabels = [\"White\", \"Blue\", \"Black\", \"Red\", \"Green\", \"Colorless\"];\r\n\r\nconst typeLabels = [\"Creature\", \"Noncreature\", \"Land\"];\r\n\r\nconst colorColors = [\"#fff8d6\", \"#367ae0\", \"#404040\", \"#db2e2e\", \"#187d2a\", \"#cfcfcf\"];\r\n\r\nconst typeColors = [\"#8ba349\", \"#c48dc2\", \"#ffb114\"];\r\n\r\nconst DeckList: React.FC<DeckListProps> = (props: DeckListProps) => {\r\n    const { result, updateDeck } = props;\r\n    const [colorCount, setColorCount] = useState<number[]>([]);\r\n    const [typeCount, setTypeCount] = useState<number[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (!result) return;\r\n        let [wCount, uCount, bCount, rCount, gCount, cCount] = [0, 0, 0, 0, 0, 0];\r\n        let [creatures, noncreatures, lands] = [0, 0, 0];\r\n\r\n        result.deck.main.forEach((card) => {\r\n            if (card.info) {\r\n                const { colors, types } = card.info;\r\n                if (colors.includes(\"W\")) wCount += card.count;\r\n                if (colors.includes(\"U\")) uCount += card.count;\r\n                if (colors.includes(\"B\")) bCount += card.count;\r\n                if (colors.includes(\"R\")) rCount += card.count;\r\n                if (colors.includes(\"G\")) gCount += card.count;\r\n                if (!colors.length && !card.info.types.includes(\"Land\")) cCount += card.count;\r\n\r\n                if (types.includes(\"Creature\")) creatures += card.count;\r\n                else if (types.includes(\"Land\")) lands += card.count;\r\n                else noncreatures += card.count;\r\n            }\r\n        });\r\n        setColorCount([wCount, uCount, bCount, rCount, gCount, cCount]);\r\n        setTypeCount([creatures, noncreatures, lands]);\r\n    }, [result]);\r\n\r\n    const toggleCardHighlight = (card: Card) => {\r\n        const { deck } = result;\r\n        deck.main.forEach((c) => {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted;\r\n            }\r\n        });\r\n        deck.sideboard.forEach((c) => {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted;\r\n            }\r\n        });\r\n        updateDeck({ ...result, deck });\r\n    };\r\n\r\n    const toggleSpicy = () => {\r\n        updateDeck({ ...result, spicy: !result.spicy });\r\n    };\r\n\r\n    const toggleFavorite = () => {\r\n        updateDeck({ ...result, favorite: !result.favorite });\r\n    };\r\n\r\n    const main: { [key: string]: React.ReactElement[] } = {\r\n        Planeswalkers: [],\r\n        Creatures: [],\r\n        Instants: [],\r\n        Sorceries: [],\r\n        Artifacts: [],\r\n        Enchantments: [],\r\n        Lands: [],\r\n        Unknown: []\r\n    };\r\n\r\n    result.deck.main.forEach((card) => {\r\n        if (!card.info) {\r\n            main.Unknown.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Creature\")) {\r\n            main.Creatures.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Land\")) {\r\n            main.Lands.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Instant\")) {\r\n            main.Instants.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Sorcery\")) {\r\n            main.Sorceries.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Artifact\") && !card.info.types.includes(\"Creature\")) {\r\n            main.Artifacts.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Enchantment\") && !card.info.types.includes(\"Creature\")) {\r\n            main.Enchantments.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Planeswalker\")) {\r\n            main.Planeswalkers.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n    });\r\n\r\n    const side: { [key: string]: React.ReactElement[] } = {\r\n        Companion: [],\r\n        Planeswalkers: [],\r\n        Creatures: [],\r\n        Instants: [],\r\n        Sorceries: [],\r\n        Artifacts: [],\r\n        Enchantments: [],\r\n        Lands: [],\r\n        Unknown: []\r\n    };\r\n\r\n    result.deck.sideboard.forEach((card) => {\r\n        if (!card.info) {\r\n            side.Unknown.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Creature\")) {\r\n            if (card.info.text && card.info.text.includes(\"Companion —\")) {\r\n                side.Companion.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n            } else {\r\n                side.Creatures.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n            }\r\n        } else if (card.info.types.includes(\"Land\")) {\r\n            side.Lands.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Instant\")) {\r\n            side.Instants.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Sorcery\")) {\r\n            side.Sorceries.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Artifact\") && !card.info.types.includes(\"Creature\")) {\r\n            side.Artifacts.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Enchantment\") && !card.info.types.includes(\"Creature\")) {\r\n            side.Enchantments.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Planeswalker\")) {\r\n            side.Planeswalkers.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Grid width={16} className=\"decklist\" padded>\r\n            <Grid.Row>\r\n                <Grid.Column width={5}>\r\n                    <Header style={{ marginBottom: 0 }}>\r\n                        {result.archetype ? `${result.archetype} | ` : \"\"}\r\n                        {result.pilot}\r\n                    </Header>\r\n                </Grid.Column>\r\n                <Grid.Column width={2} textAlign={\"right\"}>\r\n                    <Icon name=\"heart\" size=\"big\" color={result.favorite ? \"pink\" : \"grey\"} className=\"clickable\" onClick={toggleFavorite} />{\" \"}\r\n                    <Icon name=\"hotjar\" size=\"big\" color={result.spicy ? \"orange\" : \"grey\"} className=\"clickable\" onClick={toggleSpicy} />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column width={4}>\r\n                    <Header content=\"Main\" style={{ marginBottom: 0 }} />\r\n                    <List style={{ marginTop: 0 }}>\r\n                        <List.Item>\r\n                            {Object.keys(main)\r\n                                .filter((key) => main[key].length)\r\n                                .map((key) => {\r\n                                    return (\r\n                                        <List.List key={key}>\r\n                                            <List.Header content={key} />\r\n                                            {main[key]}\r\n                                        </List.List>\r\n                                    );\r\n                                })}\r\n                        </List.Item>\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={3}>\r\n                    <Header content=\"Sideboard\" style={{ marginBottom: 0 }} />\r\n                    <List style={{ marginTop: 0 }}>\r\n                        <List.Item>\r\n                            {Object.keys(side)\r\n                                .filter((key) => side[key].length)\r\n                                .map((key) => {\r\n                                    return (\r\n                                        <List.List key={key}>\r\n                                            <List.Header>\r\n                                                {key === \"Companion\" && <Icon name=\"paw\" />}\r\n                                                {key}\r\n                                                {key === \"Companion\" && <Icon name=\"paw\" />}\r\n                                            </List.Header>\r\n                                            {side[key]}\r\n                                        </List.List>\r\n                                    );\r\n                                })}\r\n                        </List.Item>\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={6}>\r\n                    <Container style={{ marginBottom: \"10px\" }}>\r\n                        <Doughnut\r\n                            data={{\r\n                                labels: colorLabels,\r\n                                datasets: [\r\n                                    {\r\n                                        backgroundColor: colorColors,\r\n                                        data: colorCount\r\n                                    }\r\n                                ]\r\n                            }}\r\n                            options={{\r\n                                title: {\r\n                                    display: true,\r\n                                    text: \"Color Distribution\"\r\n                                },\r\n                                legend: { display: false }\r\n                            }}\r\n                        />\r\n                    </Container>\r\n                    <Container>\r\n                        <Doughnut\r\n                            data={{\r\n                                labels: typeLabels,\r\n                                datasets: [\r\n                                    {\r\n                                        backgroundColor: typeColors,\r\n                                        data: typeCount,\r\n                                        label: \"1\"\r\n                                    },\r\n                                    {\r\n                                        backgroundColor: typeColors.slice(0, 2),\r\n                                        data: typeCount.slice(0, 2),\r\n                                        label: \"2\"\r\n                                    }\r\n                                ]\r\n                            }}\r\n                            options={{\r\n                                title: {\r\n                                    display: true,\r\n                                    text: \"Type Distribution\"\r\n                                },\r\n                                legend: { display: true, position: \"bottom\" },\r\n                                cutoutPercentage: 30\r\n                            }}\r\n                        />\r\n                    </Container>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default DeckList;\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Grid, Input, Button, Modal, Checkbox, InputOnChangeData } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\nimport { Result } from \"./types\";\r\nimport DeckList from \"./DeckList\";\r\n\r\ninterface DeckDetailModalProps {\r\n    results: Result[];\r\n    setResults(results: Result[]): void;\r\n    open: boolean;\r\n    onClose(): void;\r\n}\r\n\r\nconst DeckDetailModal: React.FC<DeckDetailModalProps> = (props: DeckDetailModalProps) => {\r\n    const { results, setResults, open, onClose } = props;\r\n    const [displayedDeckIndex, setDisplayedDeckIndex] = useState<number>(0);\r\n    const resultCount = results.length;\r\n\r\n    const goToNextDeck = () => {\r\n        if (!displayedDeck) return;\r\n        const index = displayedDeckIndex || 0;\r\n\r\n        const res = [...results];\r\n        res[index] = displayedDeck;\r\n        setResults(res);\r\n\r\n        if (index + 1 < results.length) {\r\n            setDisplayedDeckIndex(index + 1);\r\n        } else {\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    const goToPreviousDeck = () => {\r\n        if (!displayedDeck) return;\r\n        const index = displayedDeckIndex || 0;\r\n\r\n        const res = [...results];\r\n        res[index] = displayedDeck;\r\n        setResults(res);\r\n\r\n        if (index !== 0) {\r\n            setDisplayedDeckIndex(index - 1);\r\n        } else {\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    const updateDisplayedDeck = (result: Result) => {\r\n        const res = [...results];\r\n        res[displayedDeckIndex] = result;\r\n        setResults(res);\r\n    };\r\n\r\n    const handleSetArchetype = (e: ChangeEvent, data: InputOnChangeData) => {\r\n        const { value } = data;\r\n        updateDisplayedDeck({ ...results[displayedDeckIndex], archetype: value });\r\n    };\r\n\r\n    const handleKeyPress = (e: React.KeyboardEvent) => {\r\n        if (e.key === \"Enter\") {\r\n            goToNextDeck();\r\n        }\r\n    };\r\n    const displayedDeck = results[displayedDeckIndex];\r\n    return (\r\n        <Modal open={open} onClose={onClose} centered={false} closeOnDimmerClick={false} closeIcon>\r\n            <Modal.Content>\r\n                {!!displayedDeck && (\r\n                    <Grid width={16}>\r\n                        <Grid.Row className=\"decklist-header\" verticalAlign=\"middle\">\r\n                            <Grid.Column width={4}>\r\n                                <h3 style={{ marginBottom: \"0.25em\" }}>{displayedDeck.pilot}</h3>\r\n                                <span>\r\n                                    Deck {displayedDeck.index + 1} of {resultCount}\r\n                                </span>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={6}>\r\n                                <Input label=\"Archetype\" value={displayedDeck.archetype} onChange={handleSetArchetype} onKeyPress={handleKeyPress} />\r\n                            </Grid.Column>\r\n                            <Grid.Column width={2}>\r\n                                <Checkbox\r\n                                    checked={displayedDeck.favorite}\r\n                                    label=\"Favorite?\"\r\n                                    onChange={() =>\r\n                                        updateDisplayedDeck({\r\n                                            ...displayedDeck,\r\n                                            favorite: !displayedDeck.favorite\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <Checkbox\r\n                                    checked={displayedDeck.spicy}\r\n                                    label=\"Spicy?\"\r\n                                    onChange={() =>\r\n                                        updateDisplayedDeck({\r\n                                            ...displayedDeck,\r\n                                            spicy: !displayedDeck.spicy\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Grid.Column>\r\n                            <Grid.Column width={2}>\r\n                                <Button onClick={goToPreviousDeck} content=\"Previous\" />\r\n                            </Grid.Column>\r\n                            <Grid.Column width={2}>\r\n                                <Button onClick={goToNextDeck} content=\"Next\" />\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n\r\n                        <Grid.Row>\r\n                            <DeckList result={displayedDeck} updateDeck={updateDisplayedDeck} />\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                )}\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default DeckDetailModal;\r\n","import React from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { List, Container, Modal, ListItem } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\n\r\ninterface InfoModalProps {\r\n    open: boolean;\r\n    onClose(): void;\r\n}\r\n\r\nconst InfoModal: React.FC<InfoModalProps> = (props: InfoModalProps) => {\r\n    const { open, onClose } = props;\r\n\r\n    return (\r\n        <Modal open={open} centered={false} onClose={onClose} closeOnDimmerClick={true} closeIcon>\r\n            <Modal.Content>\r\n                <List>\r\n                    <List.Item>\r\n                        <List.Header>What am I looking at?</List.Header>\r\n                        <Container style={{ padding: \"0.5em 1.25em 0.25em\" }}>\r\n                            This is a web tool for scraping Wizards of the Coast&apos;s MTGO results posts and formatting the contents for a Reddit post (or\r\n                            anywhere else that supports Markdown)\r\n                        </Container>\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <List.Header>How do I use it?</List.Header>\r\n                        <Container style={{ paddingLeft: \"1em\" }}>\r\n                            <List ordered>\r\n                                <ListItem>Paste the url for a WotC deck dump in the little box and click &apos;Scrape.&apos;</ListItem>\r\n                                <ListItem>\r\n                                    Click &apos;Decks&apos; to view the decklists. From there, you can enter the archetype names and click cards to highlight\r\n                                    them.\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    Copy the resulting text into your Reddit post. Be sure you&apos;re in &apos;Markdown Mode&apos; or your links will get ugly.\r\n                                </ListItem>\r\n                            </List>\r\n                        </Container>\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <List.Header>How can I report a bug or suggest a feature?</List.Header>\r\n                        <Container style={{ padding: \"0.5em 1.25em \" }}>\r\n                            Message me on Reddit: <a href=\"https://reddit.com/message/compose/?to=FereMiyJeenyus\">/u/FereMiyJeenyus</a>\r\n                        </Container>\r\n                    </List.Item>\r\n                </List>\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default InfoModal;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Header, Container, Grid, Input, Button, Form, Message, Tab, List, DropdownItemProps, Accordion, Icon } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\nimport { getDecksFromUrl } from \"./scraper\";\r\nimport { Result, Deck, setList, Card, CardCount, Rule, ArchetypeClassification } from \"./types\";\r\nimport DeckDetailModal from \"./DeckDetailModal\";\r\nimport InfoModal from \"./InfoModal\";\r\n\r\nexport type TextFormat = \"plaintext\" | \"markdown\";\r\nconst thx = `Direct links courtesy of /u/FereMiyJeenyus and their [MTGO Results Scraper](https://feremiyjeenyus.github.io/mtgo-results-scraper/)`;\r\n\r\nconst App: React.FC = () => {\r\n    const [hasScraped, setHasScraped] = useState<boolean>(false);\r\n    const [wotcUrl, setWotcUrl] = useState<string>(\"\");\r\n    const [resultList, setResultList] = useState<Result[]>([]);\r\n    const [selectedCards, setSelectedCards] = useState<string[]>([]);\r\n    const [cardOptions, setCardOptions] = useState<DropdownItemProps[]>();\r\n    const [cardCounts, setCardCounts] = useState<CardCount[]>([]);\r\n    const [selectedExpansions, setSelectedExpansions] = useState<string[]>([]);\r\n    const [deckModalOpen, setDeckModalOpen] = useState<boolean>(false);\r\n    const [infoModalOpen, setInfoModalOpen] = useState<boolean>(false);\r\n    const [scrapeError, setScrapeError] = useState<boolean>(false);\r\n    const [isNumberedResults, setIsNumberedResults] = useState<boolean>(false);\r\n    const [expandOptions, setExpandOptions] = useState<boolean>(false);\r\n    const [textFormat, setTextFormat] = useState<TextFormat>(\"markdown\");\r\n    const [filterForSpice, setFilterForSpice] = useState<boolean>(false);\r\n    const [filterForFave, setFilterForFave] = useState<boolean>(false);\r\n\r\n    const [archetypeRules, setArchetypeRules] = useState<ArchetypeClassification[]>([]);\r\n\r\n    useEffect(() => {\r\n        const rulesFromStorage = window.localStorage?.getItem(\"archetypeRules\");\r\n        if (rulesFromStorage && rulesFromStorage !== \"undefined\") {\r\n            setArchetypeRules(JSON.parse(rulesFromStorage));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        window.localStorage?.setItem(\"archetypeRules\", JSON.stringify(archetypeRules));\r\n    }, [archetypeRules]);\r\n\r\n    // scraping\r\n    const generateCardCounts = (results: Result[]) => {\r\n        const counts: CardCount[] = [];\r\n        results.forEach((r) => {\r\n            r.deck.main.forEach((card) => {\r\n                const countRow = counts.find((c) => c.card.name === card.name);\r\n                if (!countRow) {\r\n                    counts.push({\r\n                        card: { ...card, highlighted: false },\r\n                        deckCount: 1\r\n                    });\r\n                } else {\r\n                    countRow.card.count += card.count;\r\n                    countRow.deckCount++;\r\n                }\r\n            });\r\n\r\n            r.deck.sideboard.forEach((card) => {\r\n                const countRow = counts.find((c) => c.card.name === card.name);\r\n                if (!countRow) {\r\n                    counts.push({\r\n                        card: {\r\n                            name: card.name,\r\n                            count: card.count,\r\n                            highlighted: false\r\n                        },\r\n                        deckCount: 1\r\n                    });\r\n                } else {\r\n                    countRow.card.count += card.count;\r\n                    if (!r.deck.main.find((c) => c.name === card.name)) {\r\n                        countRow.deckCount++;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        setCardOptions(\r\n            counts\r\n                .sort((a, b) => {\r\n                    if (a.card.name < b.card.name) return -1;\r\n                    if (b.card.name < a.card.name) return 1;\r\n                    return 0;\r\n                })\r\n                .map((c) => ({\r\n                    key: c.card.name,\r\n                    text: c.card.name,\r\n                    value: c.card.name\r\n                }))\r\n        );\r\n        setCardCounts(counts);\r\n    };\r\n\r\n    const deckFitsRule = (deck: Card[], rule: Rule) => {\r\n        const { cardName, atMost, atLeast } = rule;\r\n        return (\r\n            (atMost === 0 && !deck.some((c) => c.name === cardName)) ||\r\n            deck.some((c) => c.name === cardName && (!atLeast || c.count >= atLeast) && (!atMost || c.count <= atMost))\r\n        );\r\n    };\r\n\r\n    const identifyArchetype = (result: Result): Result => {\r\n        const { deck } = result;\r\n        for (const a of archetypeRules) {\r\n            const { name, rules } = a;\r\n            let isMatch = true;\r\n            rules.forEach((r) => {\r\n                if (isMatch) {\r\n                    //short circuit if a rule isn't fit\r\n                    let cardSet: Card[] = [];\r\n                    switch (r.in) {\r\n                        case \"main\":\r\n                            cardSet = deck.main;\r\n                            break;\r\n                        case \"side\":\r\n                            cardSet = deck.sideboard;\r\n                            break;\r\n                        case \"both\":\r\n                            const combinedCards = [...deck.main];\r\n                            deck.sideboard.forEach((card) => {\r\n                                const mb = combinedCards.find((c) => c.name === card.name);\r\n                                if (!mb) {\r\n                                    combinedCards.push(card);\r\n                                } else {\r\n                                    mb.count += card.count;\r\n                                }\r\n                            });\r\n                            cardSet = combinedCards;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n\r\n                    isMatch = deckFitsRule(cardSet, r);\r\n                }\r\n            });\r\n            if (isMatch) {\r\n                result.archetype = name;\r\n                break; //escape loop\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    const scrape = async () => {\r\n        try {\r\n            if (!wotcUrl) return;\r\n            const scrapedResults = await getDecksFromUrl(wotcUrl);\r\n            const namedResults = scrapedResults.map((r) => identifyArchetype(r));\r\n            generateCardCounts(namedResults);\r\n            setResultList(namedResults);\r\n            setHasScraped(true);\r\n            setDeckModalOpen(true);\r\n            setIsNumberedResults(wotcUrl.includes(\"champ\") || wotcUrl.includes(\"challenge\"));\r\n\r\n            if (scrapedResults.length) {\r\n                setDeckModalOpen(true);\r\n            }\r\n        } catch (error) {\r\n            setScrapeError(true);\r\n        }\r\n    };\r\n\r\n    // text generation\r\n    const generatePlaintext = (results: Result[]) => {\r\n        const resultLines = results.map(\r\n            (r) => `${r.archetype ? `${r.archetype} | ` : \"\"}${r.pilot}: <${r.url}>${r.duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}`\r\n        );\r\n\r\n        const [path] = wotcUrl.split(\"/\").slice(-1);\r\n        const title = path.slice(0, -10);\r\n        const date = path.slice(-10);\r\n        const titleLine = title.replace(/-/g, \" \").replace(/\\w\\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase()) + date;\r\n        return [titleLine, ...resultLines].join(\"\\r\\n\");\r\n    };\r\n\r\n    const generateMarkdownLine = (result: Result): string => {\r\n        const { deck, archetype, pilot, duplicatePilot, url } = result;\r\n\r\n        const muUrl = `[${archetype || \"archetype\"}](${url})`;\r\n        const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`;\r\n\r\n        const highlights = [...deck.main.filter((c) => c.highlighted), ...deck.sideboard.filter((c) => c.highlighted)].map((c) => c.name);\r\n        const muHighlights = `(${Array.from(new Set(highlights.map((c) => `[[${c}]]`))).join(\", \")})`;\r\n        return `${isNumberedResults ? \"1.\" : \"*\"} ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`;\r\n    };\r\n\r\n    const generateMarkdown = (results: Result[]) => {\r\n        if (!hasScraped) return \"\";\r\n        const resultLines: string[] = [];\r\n        for (const result of results) {\r\n            const muString = generateMarkdownLine(result);\r\n            resultLines.push(muString);\r\n        }\r\n        return [`Full Results: ${wotcUrl || \"\"}`, \"\", ...resultLines, \"\", thx].join(\"\\r\\n\");\r\n    };\r\n\r\n    const copyToClipboard = async (text: string) => {\r\n        if (!navigator.clipboard) {\r\n            return;\r\n        }\r\n        await navigator.clipboard.writeText(text);\r\n    };\r\n\r\n    // filtering\r\n    const deckHasCard = (deck: Deck, filterCards: string[]): boolean => {\r\n        const cards = [...deck.main, ...deck.sideboard];\r\n        if (cards.filter((c) => filterCards.includes(c.name)).length) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const deckHasExpansion = (deck: Deck, filterExpansions: string[]): boolean => {\r\n        const cards = [...deck.main, ...deck.sideboard];\r\n        const nonBasics = cards.filter((c) => ![\"Plains\", \"Island\", \"Swamp\", \"Mountain\", \"Forest\"].includes(c.name));\r\n        const expansions = nonBasics.flatMap((c) => c.info?.printings || []);\r\n        const deduped = [...new Set(expansions)];\r\n\r\n        if (deduped.filter((e) => filterExpansions.includes(e)).length) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const applyDeckFilters = useCallback(\r\n        (results: Result[]): Result[] => {\r\n            const spicyResults = results.filter((r) => !filterForSpice || r.spicy);\r\n            const faveResults = spicyResults.filter((r) => !filterForFave || r.favorite);\r\n            const expacResults = faveResults.filter((r) => !selectedExpansions.length || deckHasExpansion(r.deck, selectedExpansions));\r\n            const cardResults = expacResults.filter((r) => !selectedCards.length || deckHasCard(r.deck, selectedCards));\r\n            return cardResults;\r\n        },\r\n        [selectedCards, selectedExpansions, filterForFave, filterForSpice]\r\n    );\r\n\r\n    const applyCardFilters = useCallback(\r\n        (cards: CardCount[]): CardCount[] => {\r\n            const filteredBySet = cards.filter(\r\n                (c) => !selectedExpansions.length || c.card.info?.printings.filter((p) => selectedExpansions.includes(p)).length\r\n            );\r\n            const filteredByCard = filteredBySet.filter((c) => !selectedCards.length || selectedCards.includes(c.card.name));\r\n            return filteredByCard;\r\n        },\r\n        [selectedCards, selectedExpansions]\r\n    );\r\n\r\n    const filteredResults = applyDeckFilters(resultList);\r\n    const filteredCardCounts = applyCardFilters(cardCounts);\r\n\r\n    const previewText = textFormat === \"markdown\" ? generateMarkdown(filteredResults) : generatePlaintext(filteredResults);\r\n\r\n    const decksByCard: string = cardCounts\r\n        .filter((c) => c.card.info?.printings[0] === setList[0].code)\r\n        .map((c) => {\r\n            const cardName = `* [[${c.card.name}]]`;\r\n            const urls = resultList\r\n                .filter((r) => deckHasCard(r.deck, [c.card.name]))\r\n                .map((r) => {\r\n                    return `**[${r.archetype || \"archetype\"}](${r.url})**`;\r\n                });\r\n            return `${cardName} ${[...urls].join(\", \")}`;\r\n        })\r\n        .join(\"\\r\\n\");\r\n\r\n    const panes = [\r\n        {\r\n            menuItem: \"Preview\",\r\n            pane: (\r\n                <Tab.Pane key=\"Preview\">\r\n                    <Form>\r\n                        <Form.TextArea value={previewText} style={{ height: 500 }} />\r\n                    </Form>\r\n                </Tab.Pane>\r\n            )\r\n        },\r\n        {\r\n            menuItem: \"Card Counts\",\r\n            pane: (\r\n                <Tab.Pane key=\"Counts\">\r\n                    <Form>\r\n                        <Form.TextArea\r\n                            value={filteredCardCounts\r\n                                .sort((a, b) => b.card.count - a.card.count)\r\n                                .map(\r\n                                    (c) =>\r\n                                        `${c.card.count} cop${c.card.count > 1 ? \"ies\" : \"y\"} of ${c.card.name} in ${c.deckCount} deck${\r\n                                            c.deckCount > 1 ? \"s\" : \"\"\r\n                                        }`\r\n                                )\r\n                                .join(\"\\r\\n\")}\r\n                            style={{ height: 500 }}\r\n                        />\r\n                    </Form>\r\n                </Tab.Pane>\r\n            )\r\n        },\r\n        {\r\n            menuItem: `Decks with ${setList[0].code} Cards`,\r\n            pane: (\r\n                <Tab.Pane key=\"ByCard\">\r\n                    <Form>\r\n                        <Form.TextArea style={{ height: 500 }} value={decksByCard} />\r\n                    </Form>\r\n                </Tab.Pane>\r\n            )\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <Container className=\"App\">\r\n            <Header>MTGO Results Scraper</Header>\r\n            <Grid columns={16}>\r\n                <Grid.Row>\r\n                    <Grid.Column width={3} textAlign=\"left\">\r\n                        <Input value={wotcUrl} onChange={(e) => setWotcUrl(e.target.value)} placeholder=\"Deck Dump URL\" />\r\n                        <a\r\n                            href=\"https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info\"\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                            style={{ marginLeft: \"1em\" }}\r\n                        >\r\n                            MTGO Results\r\n                        </a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={13} textAlign=\"left\">\r\n                        <List horizontal>\r\n                            <List.Item>\r\n                                <Button onClick={scrape} content=\"Scrape\" />\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <Button onClick={() => setDeckModalOpen(true)} content=\"Decks\" disabled={!hasScraped} />\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <Button onClick={() => setInfoModalOpen(true)} content=\"What's this?\" />\r\n                            </List.Item>\r\n                        </List>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        <Accordion>\r\n                            <Accordion.Title\r\n                                active={expandOptions}\r\n                                onClick={() => {\r\n                                    setExpandOptions(!expandOptions);\r\n                                }}\r\n                            >\r\n                                <Icon name=\"dropdown\" />\r\n                                <span>Filters and Options (mostly functional, will make it look nicer soon)</span>\r\n                                <div className=\"accordion-title-line\" />\r\n                            </Accordion.Title>\r\n                            <Accordion.Content active={expandOptions}>\r\n                                <Form.Dropdown\r\n                                    label=\"Filter By Card: \"\r\n                                    multiple\r\n                                    clearable\r\n                                    search\r\n                                    selection\r\n                                    value={selectedCards}\r\n                                    options={cardOptions || []}\r\n                                    onChange={(_e, { value }) => {\r\n                                        setSelectedCards(value as string[]);\r\n                                    }}\r\n                                />\r\n                                <Form.Dropdown\r\n                                    label=\"Filter By Expansion: \"\r\n                                    multiple\r\n                                    clearable\r\n                                    search\r\n                                    selection\r\n                                    value={selectedExpansions}\r\n                                    options={setList.map((s) => ({\r\n                                        key: s.code,\r\n                                        value: s.code,\r\n                                        text: s.name\r\n                                    }))}\r\n                                    onChange={(_e, { value }) => {\r\n                                        setSelectedExpansions(value as string[]);\r\n                                    }}\r\n                                />\r\n                                <Form.Field>Preview Text</Form.Field>\r\n                                <Form.Checkbox\r\n                                    radio\r\n                                    name=\"textFormatRadioGroup\"\r\n                                    label=\"Markdown\"\r\n                                    value={textFormat}\r\n                                    checked={textFormat === \"markdown\"}\r\n                                    onClick={() => setTextFormat(\"markdown\")}\r\n                                />\r\n                                <Form.Checkbox\r\n                                    radio\r\n                                    name=\"textFormatRadioGroup\"\r\n                                    label=\"Plaintext\"\r\n                                    value={textFormat}\r\n                                    checked={textFormat === \"plaintext\"}\r\n                                    onClick={() => setTextFormat(\"plaintext\")}\r\n                                />\r\n                                <Form.Checkbox\r\n                                    toggle\r\n                                    label=\"Marked as Spicy?\"\r\n                                    checked={filterForSpice}\r\n                                    onChange={(_e, { checked }) => setFilterForSpice(!!checked)}\r\n                                />\r\n                                <Form.Checkbox\r\n                                    toggle\r\n                                    label=\"Marked as Favorite?\"\r\n                                    checked={filterForFave}\r\n                                    onChange={(_e, { checked }) => setFilterForFave(!!checked)}\r\n                                />\r\n                            </Accordion.Content>\r\n                        </Accordion>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        {scrapeError && (\r\n                            <Message negative>\r\n                                <p>There was an error while attempting to scrape results. Please try again later</p>\r\n                            </Message>\r\n                        )}\r\n                        <Tab panes={panes} renderActiveOnly={false} />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Button\r\n                        onClick={() => {\r\n                            copyToClipboard(generatePlaintext(filteredResults));\r\n                        }}\r\n                        content=\"Copy Plaintext\"\r\n                    />\r\n                    <Button\r\n                        onClick={() => {\r\n                            copyToClipboard(generateMarkdown(filteredResults));\r\n                        }}\r\n                        content=\"Copy Markdown\"\r\n                    />\r\n                </Grid.Row>\r\n            </Grid>\r\n            <DeckDetailModal\r\n                open={deckModalOpen && !!resultList?.length}\r\n                onClose={() => setDeckModalOpen(false)}\r\n                results={resultList}\r\n                setResults={setResultList}\r\n            />\r\n            <InfoModal open={infoModalOpen} onClose={() => setInfoModalOpen(false)} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://bit.ly/CRA-PWA\");\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\"New content is available and will be used when all \" + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" }\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\"No internet connection found. App is running in offline mode.\");\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}