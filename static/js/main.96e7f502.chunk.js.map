{"version":3,"sources":["scraper.ts","CardItem.tsx","DeckList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["regex","spaces","getDecksFromUrl","wotcUrl","a","results","startsWith","options","uri","headers","transform","body","cheerio","rp","then","$","usernames","each","headerContent","this","find","text","username","split","duplicatePilot","includes","push","parts","name","chaff","replace","toLowerCase","url","deck","maindeck","sideboard","trim","info","cardInfo","count","parseInt","highlighted","pilot","archetype","catch","err","console","log","colorMap","W","undefined","U","B","R","G","M","C","CardItem","props","cardColor","card","toggleCardHighlight","costIcons","colors","manaCost","length","slice","forEach","pip","index","List","Item","key","style","marginLeft","paddingTop","content","symbol","shadow","onClick","className","Popup","trigger","Content","header","Header","horizontal","items","float","meta","type","description","color","otherHalf","faceName","colorLabels","typeLabels","colorColors","typeColors","DeckList","result","goToNextDeck","goToPreviousDeck","setDisplayedDeck","useState","colorCount","setColorCount","typeCount","setTypeCount","c","useEffect","wCount","uCount","bCount","rCount","gCount","cCount","creatures","noncreatures","lands","types","main","Creatures","Lands","Instants","Sorceries","Artifacts","Enchantments","Planeswalkers","Unknown","side","Companion","Grid","width","Row","Column","Input","label","value","onChange","e","data","onKeyPress","Button","marginBottom","marginTop","Object","keys","map","Icon","Container","labels","datasets","backgroundColor","title","display","legend","position","cutoutPercentage","App","hasScraped","setHasScraped","setWotcUrl","setResults","markup","setMarkup","cardCounts","setCardCounts","displayedDeck","displayedDeckIndex","setDisplayedDeckIndex","modalOpen","setModalOpen","scrapeError","setScrapeError","generateMarkupLine","muUrl","muPilot","highlights","filter","muHighlights","Array","from","Set","join","generateMarkup","mu","muString","generateCardCounts","counts","r","countRow","deckCount","sort","b","scrape","scrapedResults","panes","menuItem","pane","Tab","Pane","Form","TextArea","height","columns","textAlign","target","placeholder","href","rel","Message","negative","renderActiveOnly","Modal","open","centered","onClose","closeOnDimmerClick","closeIcon","res","Progress","total","progress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.96e7f502.chunk.js","sourcesContent":["import rp from \"request-promise\";\r\nimport * as cheerio from \"cheerio\";\r\nimport { Deck, Result } from './types';\r\nimport cardInfo from './resources/cardInfo.json';\r\n\r\nconst regex = /[^A-Za-z _-]/g;\r\nconst spaces = / /g;\r\n\r\nexport const getDecksFromUrl = async (wotcUrl: string): Promise<Result[]> => {\r\n    const results: Result[] = [];\r\n    if (wotcUrl.startsWith(\"https://magic.wizards.com\")) {\r\n        const options = {\r\n            uri: `https://cors-anywhere.herokuapp.com/${wotcUrl}`,\r\n            headers: { 'Origin': 'https://feremiyjeenyus.github.io/mtgo-results-scraper/' },\r\n            transform: function (body: string) {\r\n                return cheerio.load(body);\r\n            }\r\n        };\r\n        await rp(options)\r\n            .then($ => {\r\n                const usernames: string[] = [];\r\n                $(\".deck-group\").each(function (this: string) {\r\n                    const headerContent = $(this)\r\n                        .find(\"h4\")\r\n                        .text();\r\n                    const username = headerContent.split(\" (\")[0];\r\n                    const duplicatePilot = usernames.includes(username)\r\n                    usernames.push(username);\r\n                    const parts = headerContent.split(\" (\");\r\n                    const name = parts[0];\r\n                    let chaff = \"\";\r\n                    if (parts[1]) {\r\n                        chaff = parts[1]\r\n                            .replace(regex, \"\")\r\n                            .replace(spaces, \"_\")\r\n                            .toLowerCase();\r\n                    }\r\n                    const url = `${wotcUrl}#${name\r\n                        .replace(regex, \"\")\r\n                        .replace(spaces, \"_\")\r\n                        .toLowerCase()}${chaff ? \"_\" + chaff : \"\"}`;\r\n\r\n                    const deck: Deck = {\r\n                        maindeck: [],\r\n                        sideboard: []\r\n                    };\r\n                    $(this).find(\".sorted-by-overview-container\").find(\".row\").each(function (this: string) {\r\n                        const name: string = $(this).find(\".card-name\").text().trim()\r\n                        const info = cardInfo[name] || cardInfo[name.split(\"//\")[0].trim()]\r\n                        deck.maindeck.push(\r\n                            {\r\n                                name,\r\n                                count: parseInt($(this).find(\".card-count\").text(), 10),\r\n                                highlighted: false,\r\n                                info\r\n                            }\r\n                        )\r\n                    })\r\n\r\n                    $(this).find(\".sorted-by-sideboard-container\").find(\".row\").each(function (this: string) {\r\n                        const name = $(this).find(\".card-name\").text().trim()\r\n                        const info = cardInfo[name] || cardInfo[name.split(\"//\")[0].trim()]\r\n                        deck.sideboard.push(\r\n                            {\r\n                                name,\r\n                                count: parseInt($(this).find(\".card-count\").text(), 10),\r\n                                highlighted: false,\r\n                                info\r\n                            }\r\n                        )\r\n                    })\r\n\r\n                    results.push({\r\n                        pilot: username,\r\n                        url: url,\r\n                        deck: deck,\r\n                        duplicatePilot,\r\n                        archetype: \"\"\r\n                    });\r\n                });\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw (err)\r\n            });\r\n    }\r\n    return results\r\n};\r\n","import React from 'react';\r\nimport { Card } from './types'\r\nimport { Card as SemanticCard, List, Popup, Header } from 'semantic-ui-react';\r\nimport { Mana } from \"@saeris/react-mana\"\r\n\r\n\r\ninterface CardItemProps {\r\n    card: Card;\r\n    toggleCardHighlight(Card: Card);\r\n}\r\n\r\nconst colorMap: { [key: string]: \"blue\" | \"black\" | \"red\" | \"green\" | \"yellow\" | \"brown\" | undefined } = {\r\n    W: undefined,\r\n    U: \"blue\",\r\n    B: \"black\",\r\n    R: \"red\",\r\n    G: \"green\",\r\n    M: \"yellow\",\r\n    C: \"brown\"\r\n}\r\n\r\nconst CardItem: React.FC<CardItemProps> = (props: CardItemProps) => {\r\n    const { card, toggleCardHighlight } = props\r\n    let cardColor: \"blue\" | \"black\" | \"red\" | \"green\" | \"yellow\" | \"brown\" | undefined;\r\n    const costIcons: JSX.Element[] = []\r\n    if (card.info) {\r\n        const { colors, manaCost } = card.info\r\n        switch (colors.length) {\r\n            case 0:\r\n                cardColor = colorMap[\"C\"]\r\n                break;\r\n            case 1:\r\n                cardColor = colorMap[colors[0]];\r\n                break;\r\n            default:\r\n                cardColor = colorMap[\"M\"]\r\n                break;\r\n        }\r\n        if (manaCost) {\r\n            const manaCostArray = manaCost.slice(1, manaCost.length - 1).split(\"}{\");\r\n            manaCostArray.forEach((pip, index) => {\r\n                costIcons.push(<List.Item key={index} style={{ marginLeft: 2, paddingTop: 0 }} content={<Mana symbol={pip.replace('/', '').toLowerCase()} shadow />} />)\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\r\n            <Popup trigger={<p>{card.count} {card.name}</p>}>\r\n                <Popup.Content>\r\n                    {card.info &&\r\n                        <>\r\n                            <SemanticCard\r\n                                header={<Header>{card.name}<List horizontal items={costIcons} style={{ float: 'right' }} /></Header>}\r\n                                meta={card.info.type}\r\n                                description={card.info.text}\r\n                                color={cardColor}\r\n                            />\r\n                            {card.info.otherHalf &&\r\n                                <SemanticCard\r\n                                    header={<Header>{card.info.otherHalf.faceName}</Header>}\r\n                                    meta={card.info.otherHalf.type}\r\n                                    description={card.info.otherHalf.text}\r\n                                    color={cardColor}\r\n                                />}\r\n                        </>\r\n                    }\r\n                </Popup.Content>\r\n            </Popup>\r\n        </List.Item>\r\n    );\r\n}\r\n\r\nexport default CardItem;","import React, { ChangeEvent, useState, useEffect } from 'react';\r\nimport \"semantic-ui-css/semantic.min.css\"\r\nimport { Header, Grid, Input, Button, List, Container, Icon } from 'semantic-ui-react'\r\nimport './App.css';\r\nimport { Result, Card } from './types'\r\nimport { Doughnut } from 'react-chartjs-2'\r\nimport CardItem from './CardItem'\r\n\r\ninterface DeckListProps {\r\n    result: Result;\r\n    goToNextDeck();\r\n    goToPreviousDeck();\r\n    setDisplayedDeck(Result: Result);\r\n}\r\n\r\nconst colorLabels = [\r\n    'White',\r\n    'Blue',\r\n    'Black',\r\n    'Red',\r\n    'Green',\r\n    'Colorless'\r\n]\r\n\r\nconst typeLabels = [\r\n    'Creature',\r\n    'Noncreature',\r\n    'Land'\r\n]\r\n\r\n\r\nconst colorColors = [\r\n    '#fff8d6',\r\n    '#367ae0',\r\n    '#404040',\r\n    '#db2e2e',\r\n    '#187d2a',\r\n    '#cfcfcf'\r\n]\r\n\r\nconst typeColors = [\r\n    '#8ba349',\r\n    '#c48dc2',\r\n    '#ffb114'\r\n]\r\n\r\n\r\nconst DeckList: React.FC<DeckListProps> = (props: DeckListProps) => {\r\n    const { result, goToNextDeck, goToPreviousDeck, setDisplayedDeck } = props;\r\n    const [colorCount, setColorCount] = useState<number[]>([]);\r\n    const [typeCount, setTypeCount] = useState<number[]>([]);\r\n\r\n    const toggleCardHighlight = (card: Card) => {\r\n        const { deck } = result\r\n        for (const c of deck.maindeck) {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted;\r\n            }\r\n        }\r\n        for (const c of deck.sideboard) {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted;\r\n            }\r\n        }\r\n        setDisplayedDeck({ ...result, deck })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!result) return;\r\n        let [wCount, uCount, bCount, rCount, gCount, cCount] = [0, 0, 0, 0, 0, 0];\r\n        let [creatures, noncreatures, lands] = [0, 0, 0];\r\n\r\n        for (const card of result.deck.maindeck) {\r\n            if (card.info) {\r\n                const { colors, types } = card.info;\r\n                if (colors.includes(\"W\")) wCount += card.count;\r\n                if (colors.includes(\"U\")) uCount += card.count;\r\n                if (colors.includes(\"B\")) bCount += card.count;\r\n                if (colors.includes(\"R\")) rCount += card.count;\r\n                if (colors.includes(\"G\")) gCount += card.count;\r\n                if (!colors.length && !card.info.types.includes(\"Land\")) cCount += card.count;\r\n\r\n                if (types.includes(\"Creature\")) creatures += card.count;\r\n                else if (types.includes(\"Land\")) lands += card.count;\r\n                else noncreatures += card.count;\r\n            }\r\n        }\r\n        setColorCount([wCount, uCount, bCount, rCount, gCount, cCount])\r\n        setTypeCount([creatures, noncreatures, lands])\r\n    }, [result]);\r\n\r\n    const main: { [key: string]: JSX.Element[] } = {\r\n        \"Planeswalkers\": [],\r\n        \"Creatures\": [],\r\n        \"Instants\": [],\r\n        \"Sorceries\": [],\r\n        \"Artifacts\": [],\r\n        \"Enchantments\": [],\r\n        \"Lands\": [],\r\n        \"Unknown\": []\r\n    }\r\n\r\n    for (const card of result.deck.maindeck) {\r\n        if (!card.info) {\r\n            main.Unknown.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Creature\")) {\r\n            main.Creatures.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Land\")) {\r\n            main.Lands.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Instant\")) {\r\n            main.Instants.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Sorcery\")) {\r\n            main.Sorceries.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Artifact\") && !card.info.types.includes(\"Creature\")) {\r\n            main.Artifacts.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Enchantment\") && !card.info.types.includes(\"Creature\")) {\r\n            main.Enchantments.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Planeswalker\")) {\r\n            main.Planeswalkers.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n    }\r\n\r\n    const side: { [key: string]: JSX.Element[] } = {\r\n        \"Companion\": [],\r\n        \"Planeswalkers\": [],\r\n        \"Creatures\": [],\r\n        \"Instants\": [],\r\n        \"Sorceries\": [],\r\n        \"Artifacts\": [],\r\n        \"Enchantments\": [],\r\n        \"Lands\": [],\r\n        \"Unknown\": []\r\n    }\r\n\r\n\r\n    for (const card of result.deck.sideboard) {\r\n        if (!card.info) {\r\n            side.Unknown.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Creature\")) {\r\n            if (card.info.text.includes(\"Companion —\")) {\r\n                side.Companion.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />)\r\n            }\r\n            else {\r\n                side.Creatures.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n            }\r\n        }\r\n        else if (card.info.types.includes(\"Land\")) {\r\n            side.Lands.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Instant\")) {\r\n            side.Instants.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Sorcery\")) {\r\n            side.Sorceries.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Artifact\") && !card.info.types.includes(\"Creature\")) {\r\n            side.Artifacts.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Enchantment\") && !card.info.types.includes(\"Creature\")) {\r\n            side.Enchantments.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Planeswalker\")) {\r\n            side.Planeswalkers.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n    }\r\n\r\n    const handleSetArchetype = (e: ChangeEvent, data: any) => {\r\n        const { value } = data\r\n        setDisplayedDeck({ ...result, archetype: value })\r\n    }\r\n\r\n    const handleKeyPress = (e: any, data: any) => {\r\n        if (e.key === 'Enter') {\r\n            goToNextDeck();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid width={16} >\r\n            <Grid.Row>\r\n                <Grid.Column width={12}>\r\n                    <Input label=\"Archetype\" value={result.archetype} onChange={handleSetArchetype} onKeyPress={handleKeyPress} />\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <Button onClick={goToPreviousDeck} content=\"Previous\" />\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <Button onClick={goToNextDeck} content=\"Next\" />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n\r\n            <Grid.Row>\r\n                <Grid.Column width={5}>\r\n                    <Header content=\"Maindeck\" style={{ marginBottom: 0 }} />\r\n                    <List style={{ marginTop: 0 }}>\r\n                        <List.Item>\r\n                            {Object.keys(main).map(\r\n                                (key) => {\r\n                                    if (!main[key].length) {\r\n                                        return <></>;\r\n                                    }\r\n                                    return (\r\n                                        <List.List key={key}>\r\n                                            <List.Header content={key} />\r\n                                            {main[key]}\r\n                                        </List.List>)\r\n                                }\r\n                            )}\r\n                        </List.Item>\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={5}>\r\n                    <Header content=\"Sideboard\" style={{ marginBottom: 0 }} />\r\n                    <List style={{ marginTop: 0 }}>\r\n                        <List.Item>\r\n                            {Object.keys(side).map(\r\n                                (key) => {\r\n                                    if (!side[key].length) {\r\n                                        return <></>;\r\n                                    }\r\n                                    return (\r\n                                        <List.List key={key}>\r\n                                            <List.Header>\r\n                                                {key === \"Companion\" && <Icon name=\"paw\" />}\r\n                                                {key}\r\n                                                {key === \"Companion\" && <Icon name=\"paw\" />}\r\n                                            </List.Header>\r\n                                            {side[key]}\r\n                                        </List.List>)\r\n                                }\r\n                            )}\r\n                        </List.Item>\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={6}>\r\n                    <Container style={{ marginBottom: \"10px\" }}>\r\n                        <Doughnut\r\n                            data={{ labels: colorLabels, datasets: [{ backgroundColor: colorColors, data: colorCount }] }}\r\n                            options={{ title: { display: true, text: \"Color Distribution\" }, legend: { display: false } }}\r\n                        />\r\n                    </Container>\r\n                    <Container>\r\n                        <Doughnut\r\n                            data={{\r\n                                labels: typeLabels,\r\n                                datasets: [\r\n                                    { backgroundColor: typeColors, data: typeCount, label: \"1\" },\r\n                                    { backgroundColor: typeColors.slice(0, 2), data: typeCount.slice(0, 2), label: \"2\" }\r\n                                ]\r\n                            }}\r\n                            options={{ title: { display: true, text: \"Type Distribution\" }, legend: { display: true, position: \"bottom\" }, cutoutPercentage: 30 }}\r\n                        />\r\n                    </Container>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid >\r\n    );\r\n}\r\n\r\nexport default DeckList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport \"semantic-ui-css/semantic.min.css\"\r\nimport { Header, Container, Grid, Input, Button, Form, Modal, Message, Progress, Tab } from 'semantic-ui-react'\r\nimport './App.css';\r\nimport { getDecksFromUrl } from './scraper'\r\nimport { Result, Card } from './types'\r\nimport DeckList from './DeckList'\r\n\r\nconst App: React.FC = () => {\r\n  const [hasScraped, setHasScraped] = useState<boolean>(false)\r\n  const [wotcUrl, setWotcUrl] = useState<string>(\"\");\r\n  const [results, setResults] = useState<Result[]>([]);\r\n  const [markup, setMarkup] = useState<string[]>([]);\r\n  const [cardCounts, setCardCounts] = useState<string[]>([]);\r\n  const [displayedDeck, setDisplayedDeck] = useState<Result>();\r\n  const [displayedDeckIndex, setDisplayedDeckIndex] = useState<number>();\r\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\r\n  const [scrapeError, setScrapeError] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (results && !hasScraped) {\r\n      setDisplayedDeck(results[0])\r\n      setDisplayedDeckIndex(0)\r\n    }\r\n  }, [results, hasScraped]);\r\n\r\n  const generateMarkupLine = (result: Result): string => {\r\n    const { deck, archetype, pilot, duplicatePilot, url } = result\r\n\r\n    const muUrl = `[${archetype || 'archetype'}](${url})`\r\n    const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${\r\n      duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`\r\n\r\n    const highlights = [...deck.maindeck.filter(c => c.highlighted), ...deck.sideboard.filter(c => c.highlighted)].map(c => c.name)\r\n    const muHighlights = `(${Array.from(new Set(highlights)).join(\", \")})`\r\n    return `* ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`\r\n  }\r\n\r\n  const generateMarkup = (results: Result[]) => {\r\n    const mu: string[] = [];\r\n    for (const result of results) {\r\n      const muString = generateMarkupLine(result)\r\n      mu.push(muString)\r\n    }\r\n    setMarkup(mu);\r\n  }\r\n\r\n  const generateCardCounts = (results: Result[]) => {\r\n    const counts: { card: Card, deckCount: number }[] = []\r\n    results.forEach(r => {\r\n      r.deck.maindeck.forEach(card => {\r\n        const countRow = counts.find(c => c.card.name === card.name);\r\n        if (!countRow) {\r\n          counts.push({\r\n            card: { name: card.name, count: card.count, highlighted: false },\r\n            deckCount: 1\r\n          })\r\n        }\r\n        else {\r\n          countRow.card.count += card.count;\r\n          countRow.deckCount++;\r\n        }\r\n      })\r\n\r\n      r.deck.sideboard.forEach(card => {\r\n        const countRow = counts.find(c => c.card.name === card.name);\r\n        if (!countRow) {\r\n          counts.push({\r\n            card: { name: card.name, count: card.count, highlighted: false },\r\n            deckCount: 1\r\n          })\r\n        }\r\n        else {\r\n          countRow.card.count += card.count;\r\n          if (!r.deck.maindeck.find(c => c.name === card.name)) {\r\n            countRow.deckCount++;\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    counts.sort((a, b) => b.card.count - a.card.count)\r\n    setCardCounts(counts.map(c => `${c.card.count} cop${c.card.count > 1 ? 'ies' : 'y'} of ${c.card.name} in ${c.deckCount} deck${c.deckCount > 1 ? 's' : ''}`))\r\n  }\r\n\r\n\r\n  const scrape = async () => {\r\n    try {\r\n      const scrapedResults = await getDecksFromUrl(wotcUrl);\r\n      generateMarkup(scrapedResults);\r\n      generateCardCounts(scrapedResults);\r\n      setResults(scrapedResults);\r\n      setHasScraped(true);\r\n    } catch (error) {\r\n      setScrapeError(true)\r\n    }\r\n  }\r\n\r\n  const goToNextDeck = () => {\r\n    if (!displayedDeck) {\r\n      return\r\n    }\r\n    const index = displayedDeckIndex!\r\n\r\n    const res = [...results]\r\n    res[index] = displayedDeck;\r\n    setResults(res);\r\n\r\n    const mu = markup\r\n    mu[index] = generateMarkupLine(displayedDeck)\r\n    setMarkup(mu)\r\n    if (index + 1 < results.length) {\r\n      setDisplayedDeck(results[index + 1])\r\n      setDisplayedDeckIndex(index + 1);\r\n    }\r\n    else {\r\n      setModalOpen(false);\r\n    }\r\n  }\r\n\r\n  const goToPreviousDeck = () => {\r\n    if (!displayedDeck) {\r\n      return\r\n    }\r\n    const index = displayedDeckIndex!\r\n\r\n    const res = [...results]\r\n    res[index] = displayedDeck;\r\n    setResults(res);\r\n\r\n    const mu = [...markup]\r\n    mu[index] = generateMarkupLine(displayedDeck)\r\n    setMarkup(mu)\r\n\r\n    if (index !== 0) {\r\n      setDisplayedDeck(results[index - 1])\r\n      setDisplayedDeckIndex(index - 1);\r\n    }\r\n    else {\r\n      setModalOpen(false);\r\n    }\r\n  }\r\n\r\n  const panes = [\r\n    {\r\n      menuItem: 'Markdown', pane:\r\n        <Tab.Pane key='Markdown'>\r\n          <Form>\r\n            <Form.TextArea value={markup?.join(\"\\r\\n\")} style={{ height: 500 }} />\r\n          </Form>\r\n        </Tab.Pane>\r\n    },\r\n    {\r\n      menuItem: 'Card Counts', pane:\r\n        <Tab.Pane key='Counts'>\r\n          <Form>\r\n            <Form.TextArea value={cardCounts?.join(\"\\r\\n\")} style={{ height: 500 }} />\r\n          </Form>\r\n        </Tab.Pane>\r\n    }\r\n  ]\r\n\r\n  return (\r\n    <Container className=\"App\">\r\n      <Header>MTGO Results Scraper</Header>\r\n      <Grid columns={16}>\r\n        <Grid.Row>\r\n          <Grid.Column width={3} textAlign=\"left\">\r\n            <Input value={wotcUrl} onChange={(e) => setWotcUrl(e.target.value)} placeholder=\"Deck Dump URL\" />\r\n            <a\r\n              href='https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info'\r\n              target='_blank'\r\n              rel=\"noopener noreferrer\"\r\n              style={{ marginLeft: '1em' }}>\r\n              MTGO Results\r\n            </a>\r\n          </Grid.Column>\r\n          <Grid.Column width={2} textAlign=\"left\">\r\n            <Button onClick={scrape} content=\"Scrape\" />\r\n          </Grid.Column>\r\n          <Grid.Column width={2} textAlign=\"left\">\r\n            <Button onClick={() => (setModalOpen(true))} content=\"Walkthrough\" />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n\r\n        <Grid.Row>\r\n          <Grid.Column width={16}>\r\n            {scrapeError &&\r\n              <Message negative>\r\n                <p>There was an error while attempting to scrape results. Please try again later</p>\r\n              </Message>\r\n            }\r\n            <Tab panes={panes} renderActiveOnly={false} />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <Modal\r\n        open={modalOpen && !!displayedDeck}\r\n        centered={false}\r\n        onClose={() => setModalOpen(false)}\r\n        closeOnDimmerClick={false}\r\n        closeIcon>\r\n        <Modal.Content>\r\n          {displayedDeck &&\r\n            <DeckList result={displayedDeck} goToNextDeck={goToNextDeck} goToPreviousDeck={goToPreviousDeck} setDisplayedDeck={setDisplayedDeck} />\r\n          }\r\n          <Progress\r\n            value={displayedDeckIndex ? displayedDeckIndex + 1 : \"\"}\r\n            total={results ? results.length : 0}\r\n            progress='ratio'\r\n            style={{ marginTop: '1em', marginBottom: 0 }}\r\n          />\r\n        </Modal.Content>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}