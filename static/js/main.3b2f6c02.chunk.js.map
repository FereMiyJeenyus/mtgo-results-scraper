{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["regex","cardNameRegex","spaces","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","decks","postText","wotcUrl","cardString","cardCounts","handleCardChange","bind","assertThisInitialized","handleUrlChange","handleSubmit","getLink","getCardCount","e","setState","target","value","trim","_this2","preventDefault","startsWith","options","uri","concat","headers","Origin","transform","body","cheerio","rp","then","$","usernames","each","i","elem","headerContent","find","text","username","split","parts","name","chaff","replace","toLowerCase","url","cards","toUpperCase","parseInt","sideboardCards","push","sideboard","markup","map","deck","link","includes","join","catch","err","console","log","header","_this$state","forEach","cardToCheck","card","cardCount","deckCount","key","react_default","a","createElement","className","href","onSubmit","htmlFor","id","onChange","readOnly","style","width","height","onClick","length","CardCount","Fragment","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b2f6c02.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport * as rp from \"request-promise\";\nimport * as cheerio from \"cheerio\";\nimport Remarkable from \"remarkable\";\n\nconst credits =\n    \"Direct link formatting thanks to /u/FereMiyJeenyus and [their web scraper](https://old.reddit.com/r/magicTCG/comments/brbhfg/i_made_a_useful_tool_for_anyone_who_posts_mtgo/)! If you encounter any dead or broken links, or have any questions/praise, please reach out to them!\";\nconst regex = /[^A-Za-z _-]/g;\nconst cardNameRegex = /[^A-Za-z /]/g;\nconst spaces = / /g;\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            decks: [],\n            postText: \"\",\n            wotcUrl: \"\",\n            cardString: \"\",\n            cardCounts: []\n        };\n        this.handleCardChange = this.handleCardChange.bind(this);\n        this.handleUrlChange = this.handleUrlChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.getLink = this.getLink.bind(this);\n        this.getCardCount = this.getCardCount.bind(this);\n    }\n\n    handleUrlChange(e) {\n        this.setState({\n            wotcUrl: e.target.value.trim()\n        });\n    }\n\n    handleCardChange(e) {\n        this.setState({\n            cardString: e.target.value\n        });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const { wotcUrl } = this.state;\n\n        if (wotcUrl.startsWith(\"https://magic.wizards.com\")) {\n            const options = {\n                uri: `https://cors-anywhere.herokuapp.com/${this.state.wotcUrl}`,\n                headers: { 'Origin': 'https://feremiyjeenyus.github.io/mtgo-results-scraper/' },\n                transform: function(body) {\n                    return cheerio.load(body);\n                }\n            };\n\n            rp(options)\n                .then($ => {\n                    const decks = [];\n                    const usernames = [];\n                    $(\".deck-group\").each(function(i, elem) {\n                        const headerContent = $(this)\n                            .find(\"h4\")\n                            .text();\n                        const username = headerContent.split(\" (\")[0];\n                        const parts = headerContent.split(\" (\");\n                        const name = parts[0];\n                        let chaff = \"\";\n                        if (parts[1]) {\n                            chaff = parts[1]\n                                .replace(regex, \"\")\n                                .replace(spaces, \"_\")\n                                .toLowerCase();\n                        }\n                        const url = `${wotcUrl}#${name\n                            .replace(regex, \"\")\n                            .replace(spaces, \"_\")\n                            .toLowerCase()}${chaff ? \"_\" + chaff : \"\"}`;\n\n                        const cards = {};\n                        $(this).find(\".sorted-by-overview-container\").find(\".row\").each(function(i, elem) {\n                                cards[$(this).find(\".card-name\").text().toUpperCase().trim().replace(cardNameRegex, \"\")] = parseInt(\n                                    $(this).find(\".card-count\").text(), \n                                    10\n                                    )\n                            })\n                            \n                        const sideboardCards = {};\n                        $(this).find(\".sorted-by-sideboard-container\").find(\".row\").each(function(i, elem) {\n                            sideboardCards[$(this).find(\".card-name\").text().toUpperCase().trim().replace(cardNameRegex, \"\")] = parseInt(\n                                $(this).find(\".card-count\").text(), \n                                10\n                                )\n                            })\n\n                        decks.push({\n                            name: username,\n                            url: url,\n                            cards: cards,\n                            sideboard: sideboardCards\n                        });\n                    });\n\n                    const markup = decks.map(deck => {\n                        const link = `* [archetype](${deck.url}): **${deck.name.replace(/[_]/g, \"\\\\_\")}${\n                            usernames.includes(deck.name) ? \" (duplicate pilot, link points to other list)\" : \"\"\n                        }**`;\n                        usernames.push(deck.name);\n                        return link;\n                    });\n                    this.setState(state => ({\n                        postText: markup.join(\"\\r\\n\"),\n                        decks: decks\n                    }));\n                })\n                .catch(err => {\n                    console.log(err);\n                });\n        }\n    }\n    \n    getLink(header) {\n        const { wotcUrl } = this.state;\n        const parts = header.split(\" (\");\n        const name = parts[0];\n        let chaff = \"\";\n        if (parts[1]) {\n            chaff = parts[1]\n                .replace(regex, \"\")\n                .replace(spaces, \"_\")\n                .toLowerCase();\n        }\n        return `${wotcUrl}#${name\n            .replace(regex, \"\")\n            .replace(spaces, \"_\")\n            .toLowerCase()}${chaff ? \"_\" + chaff : \"\"}`\n    }\n\n    getCardCount() {\n        const { cardString, decks } = this.state;\n        const cardCounts = [];\n        const cardsToCheck = cardString.split(';')\n        cardsToCheck.forEach(cardToCheck => {\n            const card = cardToCheck.toUpperCase().trim().replace(cardNameRegex,\"\");\n            if(card){\n                let cardCount = 0;\n                let deckCount = 0;\n                decks.forEach(deck => {\n                    if(deck.cards[card] || deck.sideboard[card]){\n                        cardCount = cardCount + (deck.cards[card] | 0)\n                        cardCount = cardCount + (deck.sideboard[card] | 0)\n                        deckCount += 1;\n                    }\n                });\n                cardCounts.push({\n                    key: card,\n                    name: card,\n                    cardCount: cardCount,\n                    deckCount: deckCount\n                });\n            }\n        })\n        this.setState(state => ({\n            cardCounts: cardCounts\n        }));\n    }\n\n    render() {\n        return (\n            <div className='App'>\n                <header className='App-header'>MTGO Results Scraper</header>\n                <div>\n                    <a\n                        href='https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info'\n                        target='_blank'>\n                        MTGO Results\n                    </a>\n                    <form onSubmit={this.handleSubmit}>\n                        <label htmlFor='url-input'>URL to scrape: </label>\n                        <input id='url-input' onChange={this.handleUrlChange} value={this.state.wotcUrl} />\n                        <button>Scrape</button>\n                    </form>\n                    <textarea\n                        readOnly\n                        style={{\n                            width: 1400,\n                            height: 600\n                        }}\n                        value={`${this.state.postText}\\r\\n\\r\\n${credits}`}\n                    />\n                </div>\n                <div>\n                    <label htmlFor='card-input'>Cards to count (separate with semicolons): </label>\n                    <input \n                        id='card-input' \n                        onChange={this.handleCardChange} \n                        value={this.state.cardString} />\n                    <button onClick={this.getCardCount}>Get Card Count</button>\n                </div>\n                <div>\n                    {this.state.cardCounts.length ? this.state.cardCounts.map(card => CardCount(card)): <></>}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction CardCount(card) {\n    return (\n        <div key={card.name}>{card.cardCount}\n            {card.cardCount === 1 ? \" copy of \" : \" copies of \"}\n            {card.name} in {card.deckCount} deck{card.deckCount !== 1 && \"s\"}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}