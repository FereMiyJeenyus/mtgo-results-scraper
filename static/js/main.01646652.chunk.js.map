{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","wotcUrl","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","target","value","trim","_this2","preventDefault","options","uri","concat","transform","body","cheerio","regex","rp","then","$","scrapedData","each","i","elem","parts","text","split","username","chaff","replace","toLowerCase","push","name","url","markup","map","data","scrapeResults","join","scrapeTest","catch","err","console","log","__html","Remarkable","render","react_default","a","createElement","className","onSubmit","htmlFor","id","onChange","readOnly","style","width","height","dangerouslySetInnerHTML","getRawMarkup","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qeA2FeA,cApFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAS,IAEXR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACpBA,EAAKY,aAAeZ,EAAKY,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANHA,4EASNa,GACXV,KAAKW,SAAS,CAAEN,QAASK,EAAEE,OAAOC,MAAMC,8CAG7BJ,GAAG,IAAAK,EAAAf,KACdU,EAAEM,iBACF,IAAMC,EAAU,CACdC,IAAG,uCAAAC,OAAyCnB,KAAKI,MAAMC,SACvDe,UAAW,SAAUC,GACnB,OAAOC,OAAaD,KAGlBE,EAAQ,UAEdC,EAAGP,GACFQ,KAAK,SAACC,GACL,IAAMC,EAAc,GACbtB,EAAWU,EAAKX,MAAhBC,QACPqB,EAAE,MAAME,KAAK,SAASC,EAAGC,GACvB,IAAMC,EAAQL,EAAE1B,MAAMgC,OAAOC,MAAM,MAC7BC,EAAWH,EAAM,GACjBI,EAAQJ,EAAM,GAAGK,QAAQ,IAAK,KAAKA,QAAQb,EAAO,IAAIc,cAC5DV,EAAYW,KAAK,CACfC,KAAML,EACNM,IAAG,GAAArB,OAAKd,EAAL,KAAAc,OAAgBe,EAASE,QAAQ,IAAK,KAAKA,QAAQb,EAAO,IAAIc,cAA9D,KAAAlB,OAA+EgB,OAGtF,IAAMM,EAASd,EAAYe,IAAI,SAAAC,GAC7B,YAAAxB,OAAawB,EAAKJ,KAAKH,QAAQ,OAAQ,OAAvC,MAAAjB,OAAkDwB,EAAKH,IAAvD,wBAEFzB,EAAKJ,SAAS,SAAAP,GAAK,MAAK,CACtBC,QAAS,GACTuC,cAAeH,EAAOI,KAAK,QAC3BC,WAAYL,EAAO,QAGtBM,MAAM,SAACC,GACNC,QAAQC,IAAIF,4CAMd,MAAO,CAAEG,QADE,IAAIC,KACKC,OAAOrD,KAAKI,MAAM0C,8CAItC,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,QAAME,SAAU1D,KAAKS,cACnB6C,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,aAAf,sBAGAL,EAAAC,EAAAC,cAAA,SACEI,GAAG,YACHC,SAAU7D,KAAKM,aACfO,MAAOb,KAAKI,MAAMC,UAEpBiD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,yBAIFF,EAAAC,EAAAC,cAAA,YAAUM,UAAQ,EAACC,MAAO,CAAEC,MAAO,KAAMC,OAAQ,KAAOpD,MAAOb,KAAKI,MAAMwC,gBAC1EU,EAAAC,EAAAC,cAAA,OACAC,UAAU,UACVS,wBAAyBlE,KAAKmE,0BA7EtBC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASrB,OAAOC,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.01646652.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport * as rp from \"request-promise\";\nimport * as cheerio from 'cheerio';\nimport Remarkable from 'remarkable';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wotcUrl: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({ wotcUrl: e.target.value.trim() });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const options = {\n      uri: `https://cors-anywhere.herokuapp.com/${this.state.wotcUrl}`,\n      transform: function (body) {\n        return cheerio.load(body);\n      }\n    };\n    const regex = /[\\d\\)]/g;\n\n    rp(options)\n    .then(($) => {\n      const scrapedData = [];\n      const {wotcUrl} = this.state;\n      $('h4').each(function(i, elem) {\n        const parts = $(this).text().split(' (');\n        const username = parts[0];\n        const chaff = parts[1].replace(' ', '_').replace(regex, '').toLowerCase();\n        scrapedData.push({ \n          name: username, \n          url: `${wotcUrl}#${username.replace(' ', '_').replace(regex, '').toLowerCase()}_${chaff}`\n        });\n      })\n      const markup = scrapedData.map(data => {\n        return `* [${data.name.replace(/[_]/g, '\\\\_')}](${data.url}): **[archetype]**`\n      })\n      this.setState(state => ({\n        wotcUrl: '',\n        scrapeResults: markup.join(\"\\r\\n\"),\n        scrapeTest: markup[0]\n      }));\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  }\n\n  getRawMarkup() {\n    const md = new Remarkable();\n    return { __html: md.render(this.state.scrapeTest) };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">        \n          <form onSubmit={this.handleSubmit}>\n            <label htmlFor=\"url-input\">\n              URL to scrape:&nbsp;\n            </label>\n            <input\n              id=\"url-input\"\n              onChange={this.handleChange}\n              value={this.state.wotcUrl}\n            />\n            <br />\n            <button>\n              Scrape\n            </button>\n          </form>\n          <textarea readOnly style={{ width: 1400, height: 600 }} value={this.state.scrapeResults} />\n          <div\n          className=\"content\"\n          dangerouslySetInnerHTML={this.getRawMarkup()}\n        />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}