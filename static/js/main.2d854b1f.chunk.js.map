{"version":3,"sources":["types.ts","scraper.ts","CardItem.tsx","DeckList.tsx","DeckDetailModal.tsx","InfoModal.tsx","RuleForm.tsx","ArchetypeView.tsx","RulesModal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["guildMap","shardMap","getDecksFromUrl","wotcUrl","startsWith","fetch","response","text","body","decklistLineRegex","RegExp","match","exec","parsed","JSON","parse","split","console","log","results","decks","map","d","i","parsedMain","deck","find","x","SB","DECK_CARDS","parsedSideboard","main","forEach","c","existingCard","c2","name","CARD_ATTRIBUTES","NAME","count","Quantity","push","highlighted","info","cardInfo","sideboard","pilot","player","url","archetype","index","favorite","spicy","duplicatePilot","r","STANDINGS","sort","a","b","aStanding","s","bStanding","RANK","setList","code","colorMap","W","undefined","U","B","R","G","M","C","CardItem","props","cardColor","otherHalfColor","card","toggleCardHighlight","costIcons","colors","manaCost","length","otherHalf","slice","pip","List","Item","style","marginLeft","paddingTop","content","symbol","replace","toLowerCase","shadow","onClick","className","Popup","trigger","Content","color","Header","Meta","type","Description","whiteSpace","power","toughness","extra","padding","float","fontWeight","faceName","colorLabels","typeLabels","colorColors","typeColors","DeckList","result","updateDeck","useState","colorCount","setColorCount","typeCount","setTypeCount","useEffect","wCount","uCount","bCount","rCount","gCount","cCount","creatures","noncreatures","lands","types","includes","Planeswalkers","Creatures","Instants","Sorceries","Artifacts","Enchantments","Lands","Unknown","side","Companion","Grid","width","padded","Row","Column","marginBottom","textAlign","Icon","size","marginTop","Object","keys","filter","key","Container","data","labels","datasets","backgroundColor","options","title","display","legend","label","position","cutoutPercentage","DeckDetailModal","setResults","open","onClose","displayedDeckIndex","setDisplayedDeckIndex","resultCount","goToNextDeck","displayedDeck","res","updateDisplayedDeck","Modal","top","left","closeOnDimmerClick","closeIcon","verticalAlign","Input","value","onChange","e","onKeyPress","Checkbox","checked","Button","InfoModal","centered","paddingLeft","ordered","ListItem","href","RuleForm","rule","updateRule","removeRule","cardOptions","cardName","Form","Dropdown","selection","search","lazyLoad","minCharacters","_e","fluid","clearable","atLeast","atMost","in","icon","ArchetypeView","updateArchetype","newRules","rules","splice","divided","placeholder","target","toggle","prefixColors","RulesModal","archetypeRules","setArchetypeRules","activeIndex","setActiveIndex","newArchetypes","findIndex","id","Accordion","Title","active","Actions","floated","App","hasScraped","setHasScraped","setWotcUrl","isLoading","setIsLoading","resultList","setResultList","selectedCards","setSelectedCards","cardCounts","setCardCounts","selectedExpansions","setSelectedExpansions","deckModalOpen","setDeckModalOpen","infoModalOpen","setInfoModalOpen","scrapeError","setScrapeError","isNumberedResults","setIsNumberedResults","expandOptions","setExpandOptions","textFormat","setTextFormat","filterForSpice","setFilterForSpice","filterForFave","setFilterForFave","rulesModalOpen","setRulesModalOpen","setCardOptions","showReprints","setShowReprints","rulesFromStorage","window","localStorage","getItem","setItem","stringify","generateCardCounts","counts","countRow","deckCount","identifyArchetype","useCallback","combinedCards","mb","isMatch","cardSet","some","deckFitsRule","colorPresence","reduce","hasColor","colorString","colorPrefix","scrape","scrapedResults","namedResults","generatePlaintext","resultLines","path","date","txt","charAt","toUpperCase","join","generateMarkdownLine","muUrl","muPilot","highlights","muHighlights","Array","from","Set","generateMarkdown","muString","copyToClipboard","navigator","clipboard","writeText","deckHasCard","filterCards","applyDeckFilters","filterExpansions","expansions","flatMap","printings","deckHasExpansion","applyCardFilters","cards","p","filteredResults","filteredCardCounts","previewText","decksByCard","urls","panes","menuItem","pane","Tab","Pane","TextArea","height","Dimmer","inverted","Loader","columns","Message","success","rel","horizontal","disabled","multiple","Field","radio","negative","renderActiveOnly","refresh","Boolean","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d854b1f.chunk.js","sourcesContent":["export interface Deck {\r\n    main: Card[];\r\n    sideboard: Card[];\r\n}\r\n\r\nexport interface Card {\r\n    name: string;\r\n    count: number;\r\n    highlighted: boolean;\r\n    info?: CardInfo;\r\n}\r\n\r\nexport interface Result {\r\n    pilot: string;\r\n    url: string;\r\n    deck: Deck;\r\n    duplicatePilot: boolean;\r\n    archetype: string;\r\n    index: number;\r\n    favorite: boolean;\r\n    spicy: boolean;\r\n}\r\n\r\nexport interface CardInfo {\r\n    colors: Color[];\r\n    faceName: string;\r\n    type: string;\r\n    types: CardType[];\r\n    manaCost: string;\r\n    text: string;\r\n    power: string;\r\n    toughness: string;\r\n    otherHalf: {\r\n        colors: Color[];\r\n        faceName: string;\r\n        type: string;\r\n        types: CardType[];\r\n        manaCost: string;\r\n        text: string;\r\n        power: string;\r\n        toughness: string;\r\n    };\r\n    printings: string[];\r\n}\r\n\r\nexport interface CardCount {\r\n    card: Card;\r\n    deckCount: number;\r\n}\r\n\r\nexport type Color = \"W\" | \"U\" | \"B\" | \"R\" | \"G\";\r\nexport type CardType = \"Creature\" | \"Land\" | \"Instant\" | \"Sorcery\" | \"Artifact\" | \"Enchantment\" | \"Planeswalker\";\r\n\r\nexport const setList = [\r\n    { code: \"DMU\", name: \"Dominaria United\" },\r\n    { code: \"SNC\", name: \"Streets of New Capenna\" },\r\n    { code: \"NEO\", name: \"Kamigawa: Neon Dynasty\" },\r\n    { code: \"VOW\", name: \"Innistrad: Crimson Vow\" },\r\n    { code: \"MID\", name: \"Innistrad: Midnight Hunt\" },\r\n    { code: \"AFR\", name: \"Adventures in the Forgotten Realms\" },\r\n    { code: \"MH2\", name: \"Modern Horizons 2\" },\r\n    { code: \"STX\", name: \"Strixhaven: School of Mages\" },\r\n    { code: \"KHM\", name: \"Kaldheim\" },\r\n    { code: \"ZNR\", name: \"Zendikar Rising\" },\r\n    { code: \"M21\", name: \"Core Set 2021\" },\r\n    { code: \"IKO\", name: \"Ikoria: Lair of Behemoths\" },\r\n    { code: \"THB\", name: \"Theros Beyond Death\" },\r\n    { code: \"ELD\", name: \"Throne of Eldraine\" },\r\n    { code: \"M20\", name: \"Core Set 2020\" },\r\n    { code: \"MH1\", name: \"Modern Horizons\" },\r\n    { code: \"WAR\", name: \"War of the Spark\" }\r\n];\r\n\r\nexport interface Archetype {\r\n    id: number;\r\n    name: string;\r\n    prefixColors?: boolean;\r\n    rules: Rule[];\r\n}\r\n\r\nexport interface Rule {\r\n    cardName: string;\r\n    in: \"main\" | \"side\" | \"both\";\r\n    atLeast?: number;\r\n    atMost?: number;\r\n}\r\n\r\nexport enum guildMap {\r\n    UW = \"Azorius\",\r\n    UB = \"Dimir\",\r\n    UR = \"Izzet\",\r\n    UG = \"Simic\",\r\n    BW = \"Orzhov\",\r\n    BR = \"Rakdos\",\r\n    BG = \"Golgari\",\r\n    RG = \"Gruul\",\r\n    RW = \"Boros\",\r\n    GW = \"Selesnya\"\r\n}\r\n\r\nexport enum shardMap {\r\n    UBR = \"Grixis\",\r\n    UBG = \"Sultai\",\r\n    UBW = \"Esper\",\r\n    URG = \"Temur\",\r\n    URW = \"Jeskai\",\r\n    UGW = \"Bant\",\r\n    BRG = \"Jund\",\r\n    BRW = \"Mardu\",\r\n    BGW = \"Abzan\",\r\n    RGW = \"Naya\"\r\n}\r\n","import fetch from \"node-fetch\";\r\nimport { Card, Deck, Result } from \"./types\";\r\nimport cardInfo from \"./resources/cardInfo.json\";\r\n\r\nexport const getDecksFromUrl = async (wotcUrl: string): Promise<Result[]> => {\r\n    if (wotcUrl.startsWith(\"https://www.mtgo.com\")) {\r\n        try {\r\n            const response = await fetch(`https://scraper-cors.herokuapp.com/${wotcUrl}`);\r\n            const body = await response.text();\r\n            const decklistLineRegex = new RegExp(\"window.MTGO.decklists.data = .*;\");\r\n            const match = decklistLineRegex.exec(body);\r\n            if (match) {\r\n                const parsed = JSON.parse(match[0].split(\" = \")[1].split(\";\")[0]);\r\n                console.log(parsed);\r\n                const results: Result[] = [];\r\n                parsed.decks.map((d, i) => {\r\n                    const parsedMain = d.deck.find((x) => !x.SB).DECK_CARDS;\r\n                    const parsedSideboard = d.deck.find((x) => x.SB).DECK_CARDS;\r\n                    const main: Card[] = [];\r\n                    parsedMain.forEach((c) => {\r\n                        const existingCard = main.find((c2) => c2.name === c.CARD_ATTRIBUTES.NAME);\r\n                        if (existingCard) {\r\n                            existingCard.count += c.Quantity;\r\n                        } else {\r\n                            main.push({\r\n                                name: c.CARD_ATTRIBUTES.NAME,\r\n                                count: c.Quantity,\r\n                                highlighted: false,\r\n                                info: cardInfo[c.CARD_ATTRIBUTES.NAME]\r\n                            });\r\n                        }\r\n                    });\r\n                    const sideboard: Card[] = [];\r\n                    parsedSideboard.forEach((c) => {\r\n                        const existingCard = sideboard.find((c2) => c2.name === c.CARD_ATTRIBUTES.NAME);\r\n                        if (existingCard) {\r\n                            existingCard.count += c.Quantity;\r\n                        } else {\r\n                            sideboard.push({\r\n                                name: c.CARD_ATTRIBUTES.NAME,\r\n                                count: c.Quantity,\r\n                                highlighted: false,\r\n                                info: cardInfo[c.CARD_ATTRIBUTES.NAME]\r\n                            });\r\n                        }\r\n                    });\r\n                    const deck: Deck = {\r\n                        main,\r\n                        sideboard\r\n                    };\r\n                    results.push({\r\n                        pilot: d.player,\r\n                        url: `${wotcUrl}#deck_${d.player}`,\r\n                        archetype: \"\",\r\n                        index: i,\r\n                        favorite: false,\r\n                        spicy: false,\r\n                        deck,\r\n                        duplicatePilot: !!results.find((r) => r.pilot === d.player)\r\n                    });\r\n                });\r\n                if (parsed.STANDINGS) {\r\n                    results.sort((a, b) => {\r\n                        const aStanding = parsed.STANDINGS.find((s) => s.NAME === a.pilot);\r\n                        const bStanding = parsed.STANDINGS.find((s) => s.NAME === b.pilot);\r\n                        return aStanding.RANK - bStanding.RANK;\r\n                    });\r\n                }\r\n                return results;\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            throw err;\r\n        }\r\n    }\r\n    return [];\r\n};\r\n","import React from \"react\";\r\nimport { Card } from \"./types\";\r\nimport { Card as SemanticCard, List, Popup } from \"semantic-ui-react\";\r\nimport { Mana } from \"@saeris/react-mana\";\r\n\r\ninterface CardItemProps {\r\n    card: Card;\r\n    toggleCardHighlight(Card: Card): void;\r\n}\r\n\r\nconst colorMap: {\r\n    [key: string]: \"blue\" | \"black\" | \"red\" | \"green\" | \"yellow\" | \"brown\" | undefined;\r\n} = {\r\n    W: undefined,\r\n    U: \"blue\",\r\n    B: \"black\",\r\n    R: \"red\",\r\n    G: \"green\",\r\n    M: \"yellow\",\r\n    C: \"brown\"\r\n};\r\n\r\nconst CardItem: React.FC<CardItemProps> = (props: CardItemProps) => {\r\n    const { card, toggleCardHighlight } = props;\r\n    let cardColor: \"blue\" | \"black\" | \"red\" | \"green\" | \"yellow\" | \"brown\" | undefined;\r\n    let otherHalfColor: \"blue\" | \"black\" | \"red\" | \"green\" | \"yellow\" | \"brown\" | undefined;\r\n    const costIcons: React.ReactElement[] = [];\r\n    if (card.info) {\r\n        const { colors, manaCost } = card.info;\r\n        switch (colors.length) {\r\n            case 0:\r\n                cardColor = colorMap[\"C\"];\r\n                break;\r\n            case 1:\r\n                cardColor = colorMap[colors[0]];\r\n                break;\r\n            default:\r\n                cardColor = colorMap[\"M\"];\r\n                break;\r\n        }\r\n        if (card.info.otherHalf?.colors) {\r\n            switch (card.info.otherHalf.colors.length) {\r\n                case 0:\r\n                    otherHalfColor = colorMap[\"C\"];\r\n                    break;\r\n                case 1:\r\n                    otherHalfColor = colorMap[colors[0]];\r\n                    break;\r\n                default:\r\n                    otherHalfColor = colorMap[\"M\"];\r\n                    break;\r\n            }\r\n        }\r\n        if (manaCost) {\r\n            const manaCostArray = manaCost.slice(1, manaCost.length - 1).split(\"}{\");\r\n            manaCostArray.forEach((pip, index) => {\r\n                costIcons.push(\r\n                    <List.Item key={index} style={{ marginLeft: 2, paddingTop: 0 }} content={<Mana symbol={pip.replace(\"/\", \"\").toLowerCase()} shadow />} />\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? \"highlight\" : \"\"}>\r\n            <Popup\r\n                trigger={\r\n                    <p>\r\n                        {card.count} {card.name}\r\n                    </p>\r\n                }\r\n            >\r\n                <Popup.Content>\r\n                    {card.info && (\r\n                        <>\r\n                            <SemanticCard color={cardColor}>\r\n                                <SemanticCard.Content>\r\n                                    <SemanticCard.Header>{card.name}</SemanticCard.Header>\r\n                                    <SemanticCard.Meta>{card.info.type}</SemanticCard.Meta>\r\n                                    <SemanticCard.Description style={{ whiteSpace: \"pre-line\" }}>{card.info.text}</SemanticCard.Description>\r\n                                </SemanticCard.Content>\r\n                                {(card.info.power || card.info.toughness) && (\r\n                                    <SemanticCard.Content extra style={{ padding: \".25em 1em\" }}>\r\n                                        <div\r\n                                            style={{\r\n                                                float: \"right\",\r\n                                                fontWeight: \"bold\"\r\n                                            }}\r\n                                        >\r\n                                            {card.info.power}/{card.info.toughness}\r\n                                        </div>\r\n                                    </SemanticCard.Content>\r\n                                )}\r\n                            </SemanticCard>\r\n                            {card.info.otherHalf && (\r\n                                <SemanticCard color={otherHalfColor}>\r\n                                    <SemanticCard.Content>\r\n                                        <SemanticCard.Header>{card.info.otherHalf.faceName}</SemanticCard.Header>\r\n                                        <SemanticCard.Meta>{card.info.otherHalf.type}</SemanticCard.Meta>\r\n                                        <SemanticCard.Description style={{ whiteSpace: \"pre-line\" }}>{card.info.otherHalf.text}</SemanticCard.Description>\r\n                                    </SemanticCard.Content>\r\n                                    {(card.info.otherHalf.power || card.info.otherHalf.toughness) && (\r\n                                        <SemanticCard.Content extra style={{ padding: \".25em 1em\" }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    float: \"right\",\r\n                                                    fontWeight: \"bold\"\r\n                                                }}\r\n                                            >\r\n                                                {card.info.power}/{card.info.toughness}\r\n                                            </div>\r\n                                        </SemanticCard.Content>\r\n                                    )}\r\n                                </SemanticCard>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </Popup.Content>\r\n            </Popup>\r\n        </List.Item>\r\n    );\r\n};\r\n\r\nexport default CardItem;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Header, Grid, List, Container, Icon } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { Result, Card } from \"./types\";\r\nimport CardItem from \"./CardItem\";\r\n\r\ninterface DeckListProps {\r\n    result: Result;\r\n    updateDeck(result: Result): void;\r\n}\r\n\r\nconst colorLabels = [\"White\", \"Blue\", \"Black\", \"Red\", \"Green\", \"Colorless\"];\r\n\r\nconst typeLabels = [\"Creature\", \"Noncreature\", \"Land\"];\r\n\r\nconst colorColors = [\"#fff8d6\", \"#367ae0\", \"#404040\", \"#db2e2e\", \"#187d2a\", \"#cfcfcf\"];\r\n\r\nconst typeColors = [\"#8ba349\", \"#c48dc2\", \"#ffb114\"];\r\n\r\nconst DeckList: React.FC<DeckListProps> = (props: DeckListProps) => {\r\n    const { result, updateDeck } = props;\r\n    const [colorCount, setColorCount] = useState<number[]>([]);\r\n    const [typeCount, setTypeCount] = useState<number[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (!result) return;\r\n        let [wCount, uCount, bCount, rCount, gCount, cCount] = [0, 0, 0, 0, 0, 0];\r\n        let [creatures, noncreatures, lands] = [0, 0, 0];\r\n\r\n        result.deck.main.forEach((card) => {\r\n            if (card.info) {\r\n                const { colors, types } = card.info;\r\n                if (colors.includes(\"W\")) wCount += card.count;\r\n                if (colors.includes(\"U\")) uCount += card.count;\r\n                if (colors.includes(\"B\")) bCount += card.count;\r\n                if (colors.includes(\"R\")) rCount += card.count;\r\n                if (colors.includes(\"G\")) gCount += card.count;\r\n                if (!colors.length && !card.info.types.includes(\"Land\")) cCount += card.count;\r\n\r\n                if (types.includes(\"Creature\")) creatures += card.count;\r\n                else if (types.includes(\"Land\")) lands += card.count;\r\n                else noncreatures += card.count;\r\n            }\r\n        });\r\n        setColorCount([wCount, uCount, bCount, rCount, gCount, cCount]);\r\n        setTypeCount([creatures, noncreatures, lands]);\r\n    }, [result]);\r\n\r\n    const toggleCardHighlight = (card: Card) => {\r\n        const { deck } = result;\r\n        deck.main.forEach((c) => {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted;\r\n            }\r\n        });\r\n        deck.sideboard.forEach((c) => {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted;\r\n            }\r\n        });\r\n        updateDeck({ ...result, deck });\r\n    };\r\n\r\n    const toggleSpicy = () => {\r\n        updateDeck({ ...result, spicy: !result.spicy });\r\n    };\r\n\r\n    const toggleFavorite = () => {\r\n        updateDeck({ ...result, favorite: !result.favorite });\r\n    };\r\n\r\n    const main: { [key: string]: React.ReactElement[] } = {\r\n        Planeswalkers: [],\r\n        Creatures: [],\r\n        Instants: [],\r\n        Sorceries: [],\r\n        Artifacts: [],\r\n        Enchantments: [],\r\n        Lands: [],\r\n        Unknown: []\r\n    };\r\n\r\n    result.deck.main.forEach((card) => {\r\n        if (!card.info) {\r\n            main.Unknown.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Creature\")) {\r\n            main.Creatures.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Land\")) {\r\n            main.Lands.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Instant\")) {\r\n            main.Instants.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Sorcery\")) {\r\n            main.Sorceries.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Artifact\") && !card.info.types.includes(\"Creature\")) {\r\n            main.Artifacts.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Enchantment\") && !card.info.types.includes(\"Creature\")) {\r\n            main.Enchantments.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Planeswalker\")) {\r\n            main.Planeswalkers.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n    });\r\n\r\n    const side: { [key: string]: React.ReactElement[] } = {\r\n        Companion: [],\r\n        Planeswalkers: [],\r\n        Creatures: [],\r\n        Instants: [],\r\n        Sorceries: [],\r\n        Artifacts: [],\r\n        Enchantments: [],\r\n        Lands: [],\r\n        Unknown: []\r\n    };\r\n\r\n    result.deck.sideboard.forEach((card) => {\r\n        if (!card.info) {\r\n            side.Unknown.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Creature\")) {\r\n            if (card.info.text && card.info.text.includes(\"Companion —\")) {\r\n                side.Companion.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n            } else {\r\n                side.Creatures.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n            }\r\n        } else if (card.info.types.includes(\"Land\")) {\r\n            side.Lands.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Instant\")) {\r\n            side.Instants.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Sorcery\")) {\r\n            side.Sorceries.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Artifact\") && !card.info.types.includes(\"Creature\")) {\r\n            side.Artifacts.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Enchantment\") && !card.info.types.includes(\"Creature\")) {\r\n            side.Enchantments.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Planeswalker\")) {\r\n            side.Planeswalkers.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Grid width={16} className=\"decklist\" padded>\r\n            <Grid.Row>\r\n                <Grid.Column width={5}>\r\n                    <Header style={{ marginBottom: 0 }}>\r\n                        {result.archetype ? `${result.archetype} | ` : \"\"}\r\n                        {result.pilot}\r\n                    </Header>\r\n                </Grid.Column>\r\n                <Grid.Column width={2} textAlign={\"right\"}>\r\n                    <Icon name=\"heart\" size=\"big\" color={result.favorite ? \"pink\" : \"grey\"} className=\"clickable\" onClick={toggleFavorite} />{\" \"}\r\n                    <Icon name=\"hotjar\" size=\"big\" color={result.spicy ? \"orange\" : \"grey\"} className=\"clickable\" onClick={toggleSpicy} />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column width={4}>\r\n                    <Header content=\"Main\" style={{ marginBottom: 0 }} />\r\n                    <List style={{ marginTop: 0 }}>\r\n                        <List.Item>\r\n                            {Object.keys(main)\r\n                                .filter((key) => main[key].length)\r\n                                .map((key) => {\r\n                                    return (\r\n                                        <List.List key={key}>\r\n                                            <List.Header content={key} />\r\n                                            {main[key]}\r\n                                        </List.List>\r\n                                    );\r\n                                })}\r\n                        </List.Item>\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={3}>\r\n                    <Header content=\"Sideboard\" style={{ marginBottom: 0 }} />\r\n                    <List style={{ marginTop: 0 }}>\r\n                        <List.Item>\r\n                            {Object.keys(side)\r\n                                .filter((key) => side[key].length)\r\n                                .map((key) => {\r\n                                    return (\r\n                                        <List.List key={key}>\r\n                                            <List.Header>\r\n                                                {key === \"Companion\" && <Icon name=\"paw\" />}\r\n                                                {key}\r\n                                                {key === \"Companion\" && <Icon name=\"paw\" />}\r\n                                            </List.Header>\r\n                                            {side[key]}\r\n                                        </List.List>\r\n                                    );\r\n                                })}\r\n                        </List.Item>\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={6}>\r\n                    <Container style={{ marginBottom: \"10px\" }}>\r\n                        <Doughnut\r\n                            data={{\r\n                                labels: colorLabels,\r\n                                datasets: [\r\n                                    {\r\n                                        backgroundColor: colorColors,\r\n                                        data: colorCount\r\n                                    }\r\n                                ]\r\n                            }}\r\n                            options={{\r\n                                title: {\r\n                                    display: true,\r\n                                    text: \"Color Distribution\"\r\n                                },\r\n                                legend: { display: false }\r\n                            }}\r\n                        />\r\n                    </Container>\r\n                    <Container>\r\n                        <Doughnut\r\n                            data={{\r\n                                labels: typeLabels,\r\n                                datasets: [\r\n                                    {\r\n                                        backgroundColor: typeColors,\r\n                                        data: typeCount,\r\n                                        label: \"1\"\r\n                                    },\r\n                                    {\r\n                                        backgroundColor: typeColors.slice(0, 2),\r\n                                        data: typeCount.slice(0, 2),\r\n                                        label: \"2\"\r\n                                    }\r\n                                ]\r\n                            }}\r\n                            options={{\r\n                                title: {\r\n                                    display: true,\r\n                                    text: \"Type Distribution\"\r\n                                },\r\n                                legend: { display: true, position: \"bottom\" },\r\n                                cutoutPercentage: 30\r\n                            }}\r\n                        />\r\n                    </Container>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default DeckList;\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Grid, Input, Button, Modal, Checkbox, InputOnChangeData } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\nimport { Result } from \"./types\";\r\nimport DeckList from \"./DeckList\";\r\n\r\ninterface DeckDetailModalProps {\r\n    results: Result[];\r\n    setResults(results: Result[]): void;\r\n    open: boolean;\r\n    onClose(): void;\r\n}\r\n\r\nconst DeckDetailModal: React.FC<DeckDetailModalProps> = (props: DeckDetailModalProps) => {\r\n    const { results, setResults, open, onClose } = props;\r\n    const [displayedDeckIndex, setDisplayedDeckIndex] = useState<number>(0);\r\n    const resultCount = results.length;\r\n\r\n    const goToNextDeck = () => {\r\n        if (!displayedDeck) return;\r\n        const index = displayedDeckIndex || 0;\r\n\r\n        const res = [...results];\r\n        res[index] = displayedDeck;\r\n        setResults(res);\r\n\r\n        if (index + 1 < results.length) {\r\n            setDisplayedDeckIndex(index + 1);\r\n        } else {\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    const goToPreviousDeck = () => {\r\n        if (!displayedDeck) return;\r\n        const index = displayedDeckIndex || 0;\r\n\r\n        const res = [...results];\r\n        res[index] = displayedDeck;\r\n        setResults(res);\r\n\r\n        if (index !== 0) {\r\n            setDisplayedDeckIndex(index - 1);\r\n        } else {\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    const updateDisplayedDeck = (result: Result) => {\r\n        const res = [...results];\r\n        res[displayedDeckIndex] = result;\r\n        setResults(res);\r\n    };\r\n\r\n    const handleSetArchetype = (e: ChangeEvent, data: InputOnChangeData) => {\r\n        const { value } = data;\r\n        updateDisplayedDeck({ ...results[displayedDeckIndex], archetype: value });\r\n    };\r\n\r\n    const handleKeyPress = (e: React.KeyboardEvent) => {\r\n        if (e.key === \"Enter\") {\r\n            goToNextDeck();\r\n        }\r\n    };\r\n    const displayedDeck = results[displayedDeckIndex];\r\n    return (\r\n        <Modal open={open} onClose={onClose} style={{ top: \"3em\", left: \"calc(50vw - 475px)\" }} closeOnDimmerClick={false} closeIcon>\r\n            <Modal.Content>\r\n                {!!displayedDeck && (\r\n                    <Grid width={16}>\r\n                        <Grid.Row className=\"decklist-header\" verticalAlign=\"middle\">\r\n                            <Grid.Column width={4}>\r\n                                <h3 style={{ marginBottom: \"0.25em\" }}>{displayedDeck.pilot}</h3>\r\n                                <span>\r\n                                    Deck {displayedDeck.index + 1} of {resultCount}\r\n                                </span>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={6}>\r\n                                <Input label=\"Archetype\" value={displayedDeck.archetype} onChange={handleSetArchetype} onKeyPress={handleKeyPress} />\r\n                            </Grid.Column>\r\n                            <Grid.Column width={2}>\r\n                                <Checkbox\r\n                                    checked={displayedDeck.favorite}\r\n                                    label=\"Favorite?\"\r\n                                    onChange={() =>\r\n                                        updateDisplayedDeck({\r\n                                            ...displayedDeck,\r\n                                            favorite: !displayedDeck.favorite\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <Checkbox\r\n                                    checked={displayedDeck.spicy}\r\n                                    label=\"Spicy?\"\r\n                                    onChange={() =>\r\n                                        updateDisplayedDeck({\r\n                                            ...displayedDeck,\r\n                                            spicy: !displayedDeck.spicy\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Grid.Column>\r\n                            <Grid.Column width={2}>\r\n                                <Button onClick={goToPreviousDeck} content=\"Previous\" />\r\n                            </Grid.Column>\r\n                            <Grid.Column width={2}>\r\n                                <Button onClick={goToNextDeck} content=\"Next\" />\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n\r\n                        <Grid.Row>\r\n                            <DeckList result={displayedDeck} updateDeck={updateDisplayedDeck} />\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                )}\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default DeckDetailModal;\r\n","import React from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { List, Container, Modal, ListItem } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\n\r\ninterface InfoModalProps {\r\n    open: boolean;\r\n    onClose(): void;\r\n}\r\n\r\nconst InfoModal: React.FC<InfoModalProps> = (props: InfoModalProps) => {\r\n    const { open, onClose } = props;\r\n\r\n    return (\r\n        <Modal open={open} centered={false} onClose={onClose} closeOnDimmerClick={true} closeIcon>\r\n            <Modal.Content>\r\n                <List>\r\n                    <List.Item>\r\n                        <List.Header>What am I looking at?</List.Header>\r\n                        <Container style={{ padding: \"0.5em 1.25em 0.25em\" }}>\r\n                            This is a web tool for scraping Wizards of the Coast&apos;s MTGO results posts and formatting the contents for a Reddit post (or\r\n                            anywhere else that supports Markdown)\r\n                        </Container>\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <List.Header>How do I use it?</List.Header>\r\n                        <Container style={{ paddingLeft: \"1em\" }}>\r\n                            <List ordered>\r\n                                <ListItem>Paste the url for a WotC deck dump in the little box and click &apos;Scrape.&apos;</ListItem>\r\n                                <ListItem>\r\n                                    Create archetype definition rules (they&apos;ll be saved locally for next time you use this site from your current device).\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    Click &apos;Decks&apos; to view the decklists. From there, you can tweak the archetype names and click cards to highlight\r\n                                    them.\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    Copy the resulting text into your Reddit post. Be sure you&apos;re in &apos;Markdown Mode&apos; or your links will get ugly.\r\n                                </ListItem>\r\n                            </List>\r\n                        </Container>\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <List.Header>How does the archetype definition stuff work?</List.Header>\r\n                        <Container style={{ padding: \"0.5em 1.25em 0.25em\" }}>\r\n                            For each deck in the scraped results, it checks for the presence and count of each named card in the location specified. &apos;At\r\n                            Most: 0&apos; will override &apos;At Least,&apos; but other contradictory rules will simply fail to match. If a deck matches all the\r\n                            rules in an archetype definitions, it adds that archetype name and optionally prefixes the colors (ignoring hybrid and Phyrexian\r\n                            mana costs). Note that it stops checking once an archetype definition applies, so try to put more general definitions toward the end\r\n                            of the list.\r\n                        </Container>\r\n                        <Container style={{ padding: \"0.5em 1.25em 0.25em\" }}>\r\n                            Your definitions are stored in your browser&apos;s local storage in a JSON array, accessible and editable through your\r\n                            browser&apos;s dev tools. I&apos;m planning on adding import and export options, and bugging some users for their definitions once\r\n                            the feature is more battle-tested.\r\n                        </Container>\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <List.Header>How can I report a bug or suggest a feature?</List.Header>\r\n                        <Container style={{ padding: \"0.5em 1.25em \" }}>\r\n                            Message me on Reddit: <a href=\"https://reddit.com/message/compose/?to=FereMiyJeenyus\">/u/FereMiyJeenyus</a>\r\n                        </Container>\r\n                    </List.Item>\r\n                </List>\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default InfoModal;\r\n","import React from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Button, Form, Container, DropdownItemProps, Grid } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\nimport { Rule } from \"./types\";\r\n\r\ninterface RuleFormProps {\r\n    rule: Rule;\r\n    index: number;\r\n    updateRule(rule: Rule, index: number): void;\r\n    removeRule(index: number): void;\r\n    cardOptions: DropdownItemProps[];\r\n}\r\n\r\nconst RuleForm: React.FC<RuleFormProps> = (props: RuleFormProps) => {\r\n    const { rule, index, updateRule, removeRule, cardOptions } = props;\r\n\r\n    return (\r\n        <>\r\n            <Grid.Column width={4}>\r\n                {rule.cardName ? (\r\n                    <Container>\r\n                        Card Name\r\n                        <br />\r\n                        <strong style={{ display: \"block\", marginTop: \"0.5em\" }}>{rule.cardName}</strong>\r\n                    </Container>\r\n                ) : (\r\n                    <Form.Dropdown\r\n                        label=\"Card Name\"\r\n                        selection\r\n                        search\r\n                        lazyLoad\r\n                        minCharacters={3}\r\n                        value={rule.cardName}\r\n                        options={cardOptions}\r\n                        onChange={(_e, { value }) => {\r\n                            updateRule({ ...rule, cardName: value as string }, index);\r\n                        }}\r\n                    />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={2}>\r\n                <Form.Dropdown\r\n                    label=\"At Least\"\r\n                    fluid\r\n                    selection\r\n                    clearable\r\n                    value={rule.atLeast}\r\n                    options={[\r\n                        { key: 1, text: 1, value: 1 },\r\n                        { key: 2, text: 2, value: 2 },\r\n                        { key: 3, text: 3, value: 3 },\r\n                        { key: 4, text: 4, value: 4 }\r\n                    ]}\r\n                    onChange={(_e, { value }) => updateRule({ ...rule, atLeast: value !== \"\" ? (value as number) : undefined }, index)}\r\n                />\r\n            </Grid.Column>\r\n            <Grid.Column width={2}>\r\n                <Form.Dropdown\r\n                    label=\"At Most\"\r\n                    fluid\r\n                    selection\r\n                    clearable\r\n                    value={rule.atMost}\r\n                    options={[\r\n                        { key: 0, text: 0, value: 0 },\r\n                        { key: 1, text: 1, value: 1 },\r\n                        { key: 2, text: 2, value: 2 },\r\n                        { key: 3, text: 3, value: 3 }\r\n                    ]}\r\n                    onChange={(_e, { value }) => updateRule({ ...rule, atMost: value !== \"\" ? (value as number) : undefined }, index)}\r\n                />\r\n            </Grid.Column>\r\n            <Grid.Column width={3}>\r\n                <Form.Dropdown\r\n                    label=\"In\"\r\n                    fluid\r\n                    selection\r\n                    value={rule.in}\r\n                    options={[\r\n                        { key: 0, text: \"Main\", value: \"main\" },\r\n                        { key: 1, text: \"Sideboard\", value: \"side\" },\r\n                        { key: 2, text: \"Either\", value: \"both\" }\r\n                    ]}\r\n                    onChange={(_e, { value }) => updateRule({ ...rule, in: value as \"main\" | \"side\" | \"both\" }, index)}\r\n                />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} textAlign=\"right\">\r\n                <Button\r\n                    style={{ marginTop: \"1.4em\" }}\r\n                    icon=\"trash\"\r\n                    onClick={() => {\r\n                        removeRule(index);\r\n                    }}\r\n                />\r\n            </Grid.Column>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RuleForm;\r\n","import React from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { DropdownItemProps, Checkbox, Grid, Input, Button } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\nimport RuleForm from \"./RuleForm\";\r\nimport { Archetype, Rule } from \"./types\";\r\n\r\ninterface ArchetypeViewProps {\r\n    archetype: Archetype;\r\n    updateArchetype(archetype: Archetype): void;\r\n    cardOptions: DropdownItemProps[];\r\n}\r\n\r\nconst ArchetypeView: React.FC<ArchetypeViewProps> = (props: ArchetypeViewProps) => {\r\n    const { archetype, updateArchetype, cardOptions } = props;\r\n\r\n    const updateRule = (rule: Rule, index: number) => {\r\n        const newRules = [...archetype.rules];\r\n        newRules[index] = rule;\r\n        updateArchetype({ ...archetype, rules: newRules });\r\n    };\r\n\r\n    const addRule = () => {\r\n        const newRules = [...archetype.rules, { cardName: \"\", in: \"main\" } as Rule];\r\n        updateArchetype({ ...archetype, rules: newRules });\r\n    };\r\n\r\n    const removeRule = (index: number) => {\r\n        const newRules = [...archetype.rules];\r\n        newRules.splice(index, 1);\r\n        updateArchetype({ ...archetype, rules: newRules });\r\n    };\r\n\r\n    return (\r\n        <Grid divided=\"vertically\">\r\n            <Grid.Row verticalAlign=\"middle\">\r\n                <Grid.Column width={4}>\r\n                    <Input\r\n                        value={archetype.name}\r\n                        placeholder=\"Archetype Name\"\r\n                        onChange={(e) => {\r\n                            updateArchetype({ ...archetype, name: e.target.value });\r\n                        }}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Checkbox\r\n                        toggle\r\n                        label=\"Add Color Prefix?\"\r\n                        checked={archetype.prefixColors}\r\n                        onChange={(e, { checked }) => {\r\n                            updateArchetype({ ...archetype, prefixColors: checked });\r\n                        }}\r\n                    />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n\r\n            {archetype.rules.map((r, i) => {\r\n                return (\r\n                    <Grid.Row key={r.cardName}>\r\n                        <RuleForm rule={r} index={i} updateRule={updateRule} removeRule={removeRule} cardOptions={cardOptions} />\r\n                    </Grid.Row>\r\n                );\r\n            })}\r\n            <Grid.Row>\r\n                <Grid.Column>\r\n                    <Button icon=\"plus\" content=\"Add Card Rule\" onClick={addRule} />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default ArchetypeView;\r\n","import React, { useState } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Modal, Accordion, Icon, Button } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\nimport ArchetypeView from \"./ArchetypeView\";\r\nimport { Archetype } from \"./types\";\r\nimport cardInfo from \"./resources/cardInfo.json\";\r\n\r\ninterface RulesModalProps {\r\n    open: boolean;\r\n    onClose(refresh: boolean): void;\r\n    archetypeRules: Archetype[];\r\n    setArchetypeRules(archetypes: Archetype[]): void;\r\n}\r\n\r\nconst cardOptions = Object.keys(cardInfo).map((card) => ({ key: card, text: card, value: card }));\r\n\r\nconst RulesModal: React.FC<RulesModalProps> = (props: RulesModalProps) => {\r\n    const { open, onClose, archetypeRules, setArchetypeRules } = props;\r\n    const [activeIndex, setActiveIndex] = useState<number>(0);\r\n\r\n    const updateArchetype = (archetype: Archetype) => {\r\n        const newArchetypes = [...archetypeRules];\r\n        const index = archetypeRules.findIndex((a) => a.id === archetype.id);\r\n        newArchetypes[index] = archetype;\r\n        setArchetypeRules(newArchetypes);\r\n    };\r\n\r\n    const addArchetype = () => {\r\n        setArchetypeRules([...archetypeRules, { id: archetypeRules.length + 1, name: \"\", rules: [] }]);\r\n        setActiveIndex(archetypeRules.length);\r\n    };\r\n\r\n    return (\r\n        <Modal open={open} onClose={() => onClose(false)} closeIcon style={{ top: \"3em\", left: \"calc(50vw - 475px)\" }}>\r\n            <Modal.Header>Archetype Definitions (this is super beta, let me know if anything breaks)</Modal.Header>\r\n            <Modal.Content>\r\n                <Accordion>\r\n                    {archetypeRules.map((archetype, i) => {\r\n                        return (\r\n                            <>\r\n                                <Accordion.Title\r\n                                    key={`${archetype.id}-title`}\r\n                                    active={activeIndex === i}\r\n                                    index={i}\r\n                                    onClick={() => {\r\n                                        setActiveIndex(activeIndex !== i ? i : -1);\r\n                                    }}\r\n                                >\r\n                                    <Icon name=\"dropdown\" />\r\n                                    <span>{archetype.name}</span>\r\n                                    <div className=\"accordion-title-line\" />\r\n                                </Accordion.Title>\r\n                                <Accordion.Content key={`${archetype.id}-content`} active={activeIndex === i}>\r\n                                    <ArchetypeView archetype={archetype} updateArchetype={updateArchetype} cardOptions={cardOptions} />\r\n                                </Accordion.Content>\r\n                            </>\r\n                        );\r\n                    })}\r\n                </Accordion>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button icon=\"plus\" content=\"Create New Archetype Definition\" floated=\"left\" onClick={() => addArchetype()} />\r\n                <Button color=\"blue\" content=\"Save and Apply\" onClick={() => onClose(true)} />\r\n            </Modal.Actions>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default RulesModal;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Header, Container, Grid, Input, Button, Form, Message, Tab, List, DropdownItemProps, Accordion, Icon, Dimmer, Loader } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\nimport { getDecksFromUrl } from \"./scraper\";\r\nimport { Result, Deck, setList, Card, CardCount, Rule, Archetype, guildMap, shardMap } from \"./types\";\r\nimport DeckDetailModal from \"./DeckDetailModal\";\r\nimport InfoModal from \"./InfoModal\";\r\nimport RulesModal from \"./RulesModal\";\r\n\r\nexport type TextFormat = \"plaintext\" | \"markdown\";\r\nconst thx = `Direct links courtesy of /u/FereMiyJeenyus and their [MTGO Results Scraper](https://feremiyjeenyus.github.io/mtgo-results-scraper/)`;\r\n\r\nconst App: React.FC = () => {\r\n    const [hasScraped, setHasScraped] = useState<boolean>(false);\r\n    const [wotcUrl, setWotcUrl] = useState<string>(\"\");\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [resultList, setResultList] = useState<Result[]>([]);\r\n    const [selectedCards, setSelectedCards] = useState<string[]>([]);\r\n    const [cardCounts, setCardCounts] = useState<CardCount[]>([]);\r\n    const [selectedExpansions, setSelectedExpansions] = useState<string[]>([]);\r\n    const [deckModalOpen, setDeckModalOpen] = useState<boolean>(false);\r\n    const [infoModalOpen, setInfoModalOpen] = useState<boolean>(false);\r\n    const [scrapeError, setScrapeError] = useState<boolean>(false);\r\n    const [isNumberedResults, setIsNumberedResults] = useState<boolean>(false);\r\n    const [expandOptions, setExpandOptions] = useState<boolean>(false);\r\n    const [textFormat, setTextFormat] = useState<TextFormat>(\"markdown\");\r\n    const [filterForSpice, setFilterForSpice] = useState<boolean>(false);\r\n    const [filterForFave, setFilterForFave] = useState<boolean>(false);\r\n    const [rulesModalOpen, setRulesModalOpen] = useState<boolean>(false);\r\n    const [cardOptions, setCardOptions] = useState<DropdownItemProps[]>([]);\r\n    const [showReprints, setShowReprints] = useState<boolean>(true);\r\n\r\n    const [archetypeRules, setArchetypeRules] = useState<Archetype[]>([]);\r\n\r\n    useEffect(() => {\r\n        const rulesFromStorage = window.localStorage?.getItem(\"archetypeRules\");\r\n        if (rulesFromStorage && rulesFromStorage !== \"undefined\") {\r\n            setArchetypeRules(JSON.parse(rulesFromStorage));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        window.localStorage?.setItem(\"archetypeRules\", JSON.stringify(archetypeRules));\r\n    }, [archetypeRules]);\r\n\r\n    // scraping\r\n    const generateCardCounts = (results: Result[]) => {\r\n        const counts: CardCount[] = [];\r\n        results.forEach((r) => {\r\n            r.deck.main.forEach((card) => {\r\n                const countRow = counts.find((c) => c.card.name === card.name);\r\n                if (!countRow) {\r\n                    counts.push({\r\n                        card: { ...card, highlighted: false },\r\n                        deckCount: 1\r\n                    });\r\n                } else {\r\n                    countRow.card.count += card.count;\r\n                    countRow.deckCount++;\r\n                }\r\n            });\r\n\r\n            r.deck.sideboard.forEach((card) => {\r\n                const countRow = counts.find((c) => c.card.name === card.name);\r\n                if (!countRow) {\r\n                    counts.push({\r\n                        card: { ...card, highlighted: false },\r\n                        deckCount: 1\r\n                    });\r\n                } else {\r\n                    countRow.card.count += card.count;\r\n                    if (!r.deck.main.find((c) => c.name === card.name)) {\r\n                        countRow.deckCount++;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        setCardOptions(\r\n            counts\r\n                .sort((a, b) => {\r\n                    if (a.card.name < b.card.name) return -1;\r\n                    if (b.card.name < a.card.name) return 1;\r\n                    return 0;\r\n                })\r\n                .map((c) => ({\r\n                    key: c.card.name,\r\n                    text: c.card.name,\r\n                    value: c.card.name\r\n                }))\r\n        );\r\n        setCardCounts(counts);\r\n    };\r\n\r\n    const deckFitsRule = (deck: Card[], rule: Rule) => {\r\n        const { cardName, atMost, atLeast } = rule;\r\n        return (\r\n            (atMost === 0 && !deck.some((c) => c.name === cardName)) ||\r\n            deck.some((c) => c.name === cardName && (!atLeast || c.count >= atLeast) && (!atMost || c.count <= atMost))\r\n        );\r\n    };\r\n\r\n    const identifyArchetype = useCallback(\r\n        (result: Result): Result => {\r\n            const { deck } = result;\r\n            //lazy clone the card objects because we add the sideboard counts\r\n            const combinedCards = deck.main.map((c) => ({ ...c }));\r\n            deck.sideboard.forEach((card) => {\r\n                const mb = combinedCards.find((c) => c.name === card.name);\r\n                if (!mb) {\r\n                    combinedCards.push(card);\r\n                } else {\r\n                    mb.count += card.count;\r\n                }\r\n            });\r\n            for (const a of archetypeRules) {\r\n                const { name, rules } = a;\r\n                let isMatch = true;\r\n                rules.forEach((r) => {\r\n                    if (isMatch) {\r\n                        //short circuit if a rule isn't fit\r\n                        let cardSet: Card[] = [];\r\n                        switch (r.in) {\r\n                            case \"main\":\r\n                                cardSet = deck.main;\r\n                                break;\r\n                            case \"side\":\r\n                                cardSet = deck.sideboard;\r\n                                break;\r\n                            case \"both\":\r\n                                cardSet = combinedCards;\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n\r\n                        isMatch = deckFitsRule(cardSet, r);\r\n                    }\r\n                });\r\n                if (isMatch) {\r\n                    if (a.prefixColors) {\r\n                        const colorPresence = combinedCards.reduce(\r\n                            (hasColor, card) => {\r\n                                card.info?.colors.forEach((color) => {\r\n                                    if (!card.info?.manaCost?.includes(\"/\")) {\r\n                                        hasColor[color] = true;\r\n                                    }\r\n                                });\r\n                                return hasColor;\r\n                            },\r\n                            { W: false, U: false, B: false, R: false, G: false }\r\n                        );\r\n                        const colorString = `${colorPresence.U ? \"U\" : \"\"}${colorPresence.B ? \"B\" : \"\"}${colorPresence.R ? \"R\" : \"\"}${\r\n                            colorPresence.G ? \"G\" : \"\"\r\n                        }${colorPresence.W ? \"W\" : \"\"}`;\r\n                        let colorPrefix = \"\";\r\n                        const useGuildNames = false;\r\n                        const useShardNames = true;\r\n                        switch (colorString.length) {\r\n                            case 1:\r\n                                colorPrefix = `Mono-${colorString}`;\r\n                                break;\r\n                            case 2:\r\n                                colorPrefix = useGuildNames ? guildMap[colorString] : colorString;\r\n                                break;\r\n                            case 3:\r\n                                colorPrefix = useShardNames ? shardMap[colorString] : colorString;\r\n                                break;\r\n                            case 4:\r\n                                colorPrefix = colorString;\r\n                                break;\r\n                            case 5:\r\n                                colorPrefix = \"5c\";\r\n                                break;\r\n                        }\r\n                        result.archetype = `${colorPrefix} ${name}`;\r\n                    } else {\r\n                        result.archetype = name;\r\n                    }\r\n                    break; //escape loop\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        [archetypeRules]\r\n    );\r\n\r\n    const scrape = async () => {\r\n        try {\r\n            if (!wotcUrl) return;\r\n            setIsLoading(true);\r\n            const scrapedResults = await getDecksFromUrl(wotcUrl);\r\n            const namedResults = scrapedResults.map((r) => identifyArchetype(r));\r\n            generateCardCounts(namedResults);\r\n            setResultList(namedResults);\r\n            setHasScraped(true);\r\n            setDeckModalOpen(true);\r\n            setIsNumberedResults(wotcUrl.includes(\"champ\") || wotcUrl.includes(\"challenge\") || wotcUrl.includes(\"qualifier\"));\r\n            setIsLoading(false);\r\n        } catch (error) {\r\n            setScrapeError(true);\r\n        }\r\n    };\r\n\r\n    // text generation\r\n    const generatePlaintext = (results: Result[]) => {\r\n        const resultLines = results.map(\r\n            (r) => `${r.archetype ? `${r.archetype} | ` : \"\"}${r.pilot}: <${r.url}>${r.duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}`\r\n        );\r\n\r\n        const [path] = wotcUrl.split(\"/\").slice(-1);\r\n        const title = path.slice(0, -10);\r\n        const date = path.slice(-10);\r\n        const titleLine = title.replace(/-/g, \" \").replace(/\\w\\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase()) + date;\r\n        return [titleLine, ...resultLines].join(\"\\r\\n\");\r\n    };\r\n\r\n    const generateMarkdownLine = (result: Result): string => {\r\n        const { deck, archetype, pilot, duplicatePilot, url } = result;\r\n\r\n        const muUrl = `[${archetype || \"archetype\"}](${url})`;\r\n        const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`;\r\n\r\n        const highlights = [...deck.main.filter((c) => c.highlighted), ...deck.sideboard.filter((c) => c.highlighted)].map((c) => c.name);\r\n        const muHighlights = `(${Array.from(new Set(highlights.map((c) => `[[${c}]]`))).join(\", \")})`;\r\n        return `${isNumberedResults ? \"1.\" : \"*\"} ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`;\r\n    };\r\n\r\n    const generateMarkdown = (results: Result[]) => {\r\n        if (!hasScraped) return \"\";\r\n        const resultLines: string[] = [];\r\n        for (const result of results) {\r\n            const muString = generateMarkdownLine(result);\r\n            resultLines.push(muString);\r\n        }\r\n        return [`Full Results: ${wotcUrl || \"\"}`, \"\", ...resultLines, \"\", thx].join(\"\\r\\n\");\r\n    };\r\n\r\n    const copyToClipboard = async (text: string) => {\r\n        if (!navigator.clipboard) {\r\n            return;\r\n        }\r\n        await navigator.clipboard.writeText(text);\r\n    };\r\n\r\n    // filtering\r\n    const deckHasCard = (deck: Deck, filterCards: string[]): boolean => {\r\n        const cards = [...deck.main, ...deck.sideboard];\r\n        if (cards.filter((c) => filterCards.includes(c.name)).length) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const deckHasExpansion = (deck: Deck, filterExpansions: string[]): boolean => {\r\n        const cards = [...deck.main, ...deck.sideboard];\r\n        const nonBasics = cards.filter(\r\n            (c) =>\r\n                ![\r\n                    \"Plains\",\r\n                    \"Island\",\r\n                    \"Swamp\",\r\n                    \"Mountain\",\r\n                    \"Forest\",\r\n                    \"Snow-Covered Plains\",\r\n                    \"Snow-Covered Island\",\r\n                    \"Snow-Covered Swamp\",\r\n                    \"Snow-Covered Mountain\",\r\n                    \"Snow-Covered Forest\"\r\n                ].includes(c.name)\r\n        );\r\n        const expansions = nonBasics.flatMap((c) => c.info?.printings || []);\r\n        const deduped = [...new Set(expansions)];\r\n\r\n        if (deduped.filter((e) => filterExpansions.includes(e)).length) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const applyDeckFilters = useCallback(\r\n        (results: Result[]): Result[] => {\r\n            const spicyResults = results.filter((r) => !filterForSpice || r.spicy);\r\n            const faveResults = spicyResults.filter((r) => !filterForFave || r.favorite);\r\n            const expacResults = faveResults.filter((r) => !selectedExpansions.length || deckHasExpansion(r.deck, selectedExpansions));\r\n            const cardResults = expacResults.filter((r) => !selectedCards.length || deckHasCard(r.deck, selectedCards));\r\n            return cardResults;\r\n        },\r\n        [selectedCards, selectedExpansions, filterForFave, filterForSpice]\r\n    );\r\n\r\n    const applyCardFilters = useCallback(\r\n        (cards: CardCount[]): CardCount[] => {\r\n            const filteredBySet = cards.filter(\r\n                (c) => !selectedExpansions.length || c.card.info?.printings.filter((p) => selectedExpansions.includes(p)).length\r\n            );\r\n            const filteredByCard = filteredBySet.filter((c) => !selectedCards.length || selectedCards.includes(c.card.name));\r\n            return filteredByCard;\r\n        },\r\n        [selectedCards, selectedExpansions]\r\n    );\r\n\r\n    const filteredResults = applyDeckFilters(resultList);\r\n    const filteredCardCounts = applyCardFilters(cardCounts);\r\n\r\n    const previewText = textFormat === \"markdown\" ? generateMarkdown(filteredResults) : generatePlaintext(filteredResults);\r\n\r\n    const decksByCard: string = cardCounts\r\n        .filter(\r\n            (c) =>\r\n                ![\r\n                    \"Plains\",\r\n                    \"Island\",\r\n                    \"Swamp\",\r\n                    \"Mountain\",\r\n                    \"Forest\",\r\n                    \"Snow-Covered Plains\",\r\n                    \"Snow-Covered Island\",\r\n                    \"Snow-Covered Swamp\",\r\n                    \"Snow-Covered Mountain\",\r\n                    \"Snow-Covered Forest\"\r\n                ].includes(c.card.name)\r\n        )\r\n        .filter((c) => c.card.info?.printings.includes(setList[0].code) && (showReprints || c.card.info?.printings.length === 1))\r\n        .map((c) => {\r\n            const cardName = `* [[${c.card.name}]]`;\r\n            const urls = resultList\r\n                .filter((r) => deckHasCard(r.deck, [c.card.name]))\r\n                .map((r) => {\r\n                    return `**[${r.archetype || \"archetype\"}](${r.url})**`;\r\n                });\r\n            return `${cardName} ${[...urls].join(\", \")}`;\r\n        })\r\n        .join(\"\\r\\n\");\r\n\r\n    const panes = [\r\n        {\r\n            menuItem: \"Preview\",\r\n            pane: (\r\n                <Tab.Pane key=\"Preview\">\r\n                    <Form>\r\n                        <Form.TextArea value={previewText} style={{ height: 500 }} />\r\n                    </Form>\r\n                </Tab.Pane>\r\n            )\r\n        },\r\n        {\r\n            menuItem: \"Card Counts\",\r\n            pane: (\r\n                <Tab.Pane key=\"Counts\">\r\n                    <Form>\r\n                        <Form.TextArea\r\n                            value={filteredCardCounts\r\n                                .sort((a, b) => b.card.count - a.card.count)\r\n                                .map(\r\n                                    (c) =>\r\n                                        `${c.card.count} cop${c.card.count > 1 ? \"ies\" : \"y\"} of ${c.card.name} in ${c.deckCount} deck${\r\n                                            c.deckCount > 1 ? \"s\" : \"\"\r\n                                        }`\r\n                                )\r\n                                .join(\"\\r\\n\")}\r\n                            style={{ height: 500 }}\r\n                        />\r\n                    </Form>\r\n                </Tab.Pane>\r\n            )\r\n        },\r\n        {\r\n            menuItem: `Decks with ${setList[0].code} Cards`,\r\n            pane: (\r\n                <Tab.Pane key=\"ByCard\">\r\n                    <Form>\r\n                        <Form.Checkbox label=\"Show Reprints?\" checked={!!showReprints} onChange={(e, { checked }) => setShowReprints(!!checked)} />\r\n                        <Form.TextArea style={{ height: 500 }} value={decksByCard} />\r\n                    </Form>\r\n                </Tab.Pane>\r\n            )\r\n        }\r\n    ];\r\n\r\n    const handleRulesModalClose = (refresh: boolean) => {\r\n        if (refresh) {\r\n            const namedResults = resultList.map((r) => identifyArchetype(r));\r\n            setResultList(namedResults);\r\n        }\r\n        setRulesModalOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Container className=\"App\">\r\n            {isLoading && (\r\n                <Dimmer active inverted>\r\n                    <Loader size=\"large\">Loading</Loader>\r\n                </Dimmer>\r\n            )}\r\n            <Header>MTGO Results Scraper</Header>\r\n            <Grid columns={16}>\r\n                <Grid.Row>\r\n                    <Message success>\r\n                        The scraper should be functional, but there will likely be some bugs as the new MTGO team works out issues with their site and I try to\r\n                        keep up. Please <a href=\"https://reddit.com/message/compose/?to=FereMiyJeenyus\">message me on Reddit</a> if you notice anything, and I\r\n                        will fix it as soon as possible.\r\n                        <br />\r\n                        KNOWN ISSUE: Challenges are shown ordered entirely by Swiss standings, instead of by top 8 results and Swiss for players 9-32.\r\n                    </Message>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column width={3} textAlign=\"left\">\r\n                        <Input value={wotcUrl} onChange={(e) => setWotcUrl(e.target.value)} placeholder=\"Deck Dump URL\" />\r\n                        <a href=\"https://www.mtgo.com/en/mtgo/decklists\" target=\"_blank\" rel=\"noopener noreferrer\" style={{ marginLeft: \"1em\" }}>\r\n                            MTGO Results\r\n                        </a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={13} textAlign=\"left\">\r\n                        <List horizontal>\r\n                            <List.Item>\r\n                                <Button onClick={scrape} content=\"Scrape\" />\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <Button onClick={() => setDeckModalOpen(true)} content=\"Decks\" disabled={!hasScraped} />\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <Button\r\n                                    onClick={() => {\r\n                                        setRulesModalOpen(true);\r\n                                    }}\r\n                                    content=\"Archetype Definitions\"\r\n                                />\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <Button onClick={() => setInfoModalOpen(true)} content=\"What is this?\" />\r\n                            </List.Item>\r\n                        </List>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        <Accordion>\r\n                            <Accordion.Title\r\n                                active={expandOptions}\r\n                                onClick={() => {\r\n                                    setExpandOptions(!expandOptions);\r\n                                }}\r\n                            >\r\n                                <Icon name=\"dropdown\" />\r\n                                <span>Filters and Options (mostly functional, will make it look nicer soon)</span>\r\n                                <div className=\"accordion-title-line\" />\r\n                            </Accordion.Title>\r\n                            <Accordion.Content active={expandOptions}>\r\n                                <Form.Dropdown\r\n                                    label=\"Filter By Card: \"\r\n                                    multiple\r\n                                    clearable\r\n                                    search\r\n                                    selection\r\n                                    lazyLoad\r\n                                    value={selectedCards}\r\n                                    options={cardOptions || []}\r\n                                    onChange={(_e, { value }) => {\r\n                                        setSelectedCards(value as string[]);\r\n                                    }}\r\n                                />\r\n                                <Form.Dropdown\r\n                                    label=\"Filter By Expansion: \"\r\n                                    multiple\r\n                                    clearable\r\n                                    search\r\n                                    selection\r\n                                    value={selectedExpansions}\r\n                                    options={setList.map((s) => ({\r\n                                        key: s.code,\r\n                                        value: s.code,\r\n                                        text: s.name\r\n                                    }))}\r\n                                    onChange={(_e, { value }) => {\r\n                                        setSelectedExpansions(value as string[]);\r\n                                    }}\r\n                                />\r\n                                <Form.Field>Preview Text</Form.Field>\r\n                                <Form.Checkbox\r\n                                    radio\r\n                                    name=\"textFormatRadioGroup\"\r\n                                    label=\"Markdown\"\r\n                                    value={textFormat}\r\n                                    checked={textFormat === \"markdown\"}\r\n                                    onClick={() => setTextFormat(\"markdown\")}\r\n                                />\r\n                                <Form.Checkbox\r\n                                    radio\r\n                                    name=\"textFormatRadioGroup\"\r\n                                    label=\"Plaintext\"\r\n                                    value={textFormat}\r\n                                    checked={textFormat === \"plaintext\"}\r\n                                    onClick={() => setTextFormat(\"plaintext\")}\r\n                                />\r\n                                <Form.Checkbox\r\n                                    toggle\r\n                                    label=\"Marked as Spicy?\"\r\n                                    checked={filterForSpice}\r\n                                    onChange={(_e, { checked }) => setFilterForSpice(!!checked)}\r\n                                />\r\n                                <Form.Checkbox\r\n                                    toggle\r\n                                    label=\"Marked as Favorite?\"\r\n                                    checked={filterForFave}\r\n                                    onChange={(_e, { checked }) => setFilterForFave(!!checked)}\r\n                                />\r\n                            </Accordion.Content>\r\n                        </Accordion>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        {scrapeError && (\r\n                            <Message negative>\r\n                                <p>There was an error while attempting to scrape results. Please try again later</p>\r\n                            </Message>\r\n                        )}\r\n                        <Tab panes={panes} renderActiveOnly={false} />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Button\r\n                        onClick={() => {\r\n                            copyToClipboard(generatePlaintext(filteredResults));\r\n                        }}\r\n                        content=\"Copy Plaintext\"\r\n                    />\r\n                    <Button\r\n                        onClick={() => {\r\n                            copyToClipboard(generateMarkdown(filteredResults));\r\n                        }}\r\n                        content=\"Copy Markdown\"\r\n                    />\r\n                </Grid.Row>\r\n            </Grid>\r\n            <DeckDetailModal\r\n                open={deckModalOpen && !!resultList?.length}\r\n                onClose={() => setDeckModalOpen(false)}\r\n                results={resultList}\r\n                setResults={setResultList}\r\n            />\r\n            <RulesModal open={rulesModalOpen} onClose={handleRulesModalClose} archetypeRules={archetypeRules} setArchetypeRules={setArchetypeRules} />\r\n            <InfoModal open={infoModalOpen} onClose={() => setInfoModalOpen(false)} />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://bit.ly/CRA-PWA\");\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\"New content is available and will be used when all \" + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" }\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\"No internet connection found. App is running in offline mode.\");\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}