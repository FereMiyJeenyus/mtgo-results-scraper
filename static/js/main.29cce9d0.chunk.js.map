{"version":3,"sources":["types.ts","lib.ts","CardItem.tsx","DeckList.tsx","DeckDetailModal.tsx","OldApp.tsx","components/NavBar.tsx","components/About.tsx","components/archetypes/RuleForm.tsx","components/archetypes/ArchetypeView.tsx","components/archetypes/EditArchetypeModal.tsx","components/archetypes/Archetypes.tsx","scrapeResultSlice.ts","components/ResultDisplay.tsx","components/ScraperForm.tsx","App.tsx","serviceWorker.ts","store.ts","index.tsx"],"names":["guildMap","shardMap","setList","code","name","ignoreColorCards","identifyArchetype","result","archetypeRules","deck","combinedCards","main","map","c","sideboard","forEach","card","mb","find","count","push","a","rules","isMatch","r","atLeast","atMost","cardName","cardSet","in","some","prefixColors","colorPresence","reduce","hasColor","info","colors","color","includes","manaCost","W","U","B","R","G","colorString","colorPrefix","length","archetype","generateCardCounts","results","counts","countRow","deckCount","highlighted","scrapeUrl","url","fetch","response","text","body","decklistLineRegex","RegExp","aetherRegex","lorienRegex","match","exec","parsed","JSON","parse","split","console","log","decks","d","i","parsedMain","x","SB","DECK_CARDS","parsedSideboard","test","CARD_ATTRIBUTES","NAME","replace","existingCard","c2","Quantity","cardInfo","pilot","player","id","favorite","spicy","duplicatePilot","STANDINGS","topEightScore","Brackets","matchResults","flatMap","b","matches","m","players","Winner","sort","aStanding","s","bStanding","RANK","mtgoUrl","eventType","event_name","eventDate","date","deckResults","cardCounts","numbered","CardItem","props","toggleCardHighlight","List","Item","onClick","className","Popup","basic","mouseEnterDelay","mouseLeaveDelay","position","trigger","Content","Image","types","src","replaceAll","colorLabels","typeLabels","colorColors","typeColors","DeckList","updateDeck","goToNext","collapsible","useState","colorCount","setColorCount","typeCount","setTypeCount","collapsed","setCollapsed","useEffect","wCount","uCount","bCount","rCount","gCount","cCount","creatures","noncreatures","lands","mainIndex","findIndex","sideIndex","Planeswalkers","Creatures","Instants","Sorceries","Artifacts","Enchantments","Battles","Lands","Unknown","side","Companion","companion","Grid","width","container","centered","padded","Row","verticalAlign","Column","Header","style","marginBottom","Icon","floated","textAlign","horizontal","size","Input","label","value","onChange","e","data","onKeyPress","event","key","content","marginTop","Object","keys","filter","Container","labels","datasets","backgroundColor","options","title","display","legend","slice","cutoutPercentage","DeckDetailModal","setResults","open","onClose","displayedDeckIndex","setDisplayedDeckIndex","goToNextDeck","displayedDeck","index","res","Modal","top","left","closeOnDimmerClick","closeIcon","Button","App","hasScraped","setHasScraped","wotcUrl","setWotcUrl","isLoading","setIsLoading","resultList","setResultList","selectedCards","setSelectedCards","setCardCounts","selectedExpansions","setSelectedExpansions","deckModalOpen","setDeckModalOpen","scrapeError","setScrapeError","isNumberedResults","setIsNumberedResults","expandOptions","setExpandOptions","textFormat","setTextFormat","filterForSpice","setFilterForSpice","filterForFave","setFilterForFave","cardOptions","setCardOptions","showReprints","setShowReprints","scrape","scrapeResults","rulesFromStorage","window","localStorage","getItem","namedResults","generatePlaintext","resultLines","path","txt","charAt","toUpperCase","toLowerCase","join","generateMarkdownLine","muUrl","muPilot","highlights","muHighlights","Array","from","Set","generateMarkdown","muString","copyToClipboard","navigator","clipboard","writeText","deckHasCard","filterCards","applyDeckFilters","useCallback","filterExpansions","expansions","printings","deckHasExpansion","applyCardFilters","cards","p","filteredResults","filteredCardCounts","previewText","decksByCard","urls","panes","menuItem","pane","Tab","Pane","Form","TextArea","height","Checkbox","checked","Dimmer","active","inverted","Loader","columns","target","placeholder","href","rel","marginLeft","disabled","Accordion","Title","Dropdown","multiple","clearable","search","selection","lazyLoad","_e","Field","radio","toggle","Message","negative","renderActiveOnly","NavBar","location","pathname","setPath","Menu","as","Link","to","About","padding","paddingLeft","ordered","ListItem","RuleForm","rule","updateRule","removeRule","minCharacters","fluid","undefined","icon","ArchetypeView","updateArchetype","newRules","splice","divided","EditArchetypeModal","localArchetype","setLocalArchetype","Actions","ArchetypePage","setArchetypeRules","selectedArchetype","setSelectedArchetype","editModalOpen","setEditModalOpen","exportModalOpen","setExportModalOpen","exportString","setExportString","importError","setImportError","str","stringify","setItem","compact","onDragEnd","destination","items","list","startIndex","endIndex","removed","reorder","source","droppableId","provided","Ref","innerRef","droppableProps","item","draggableId","toString","draggableProps","dragHandleProps","newArchetypes","handleDeleteClick","addArchetype","error","positive","scrapeResultSlice","createSlice","initialState","reducers","pushScrapeResult","state","action","payload","updateScrapeResult","clearResults","actions","selectScrapeResults","ResultDisplay","scrapeResult","dispatch","useDispatch","copyMessageVisible","setCopyMessageVisible","handleMarkdownClick","setTimeout","deckResult","success","floating","hidden","onDismiss","ScraperForm","setUrls","useSelector","scrapeUrls","splitUrls","trim","startsWith","Error","onInput","basename","Archetypes","OldApp","Boolean","hostname","configureStore","reducer","scrapeResultReducer","ReactDOM","render","store","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.29cce9d0.chunk.js","sourcesContent":["export interface ScrapeResult {\r\n    id: number;\r\n    mtgoUrl: string;\r\n    eventType: string;\r\n    eventDate: string;\r\n    deckResults: Result[];\r\n    cardCounts: CardCount[];\r\n    numbered: boolean;\r\n}\r\n\r\nexport interface Deck {\r\n    main: Card[];\r\n    sideboard: Card[];\r\n}\r\n\r\nexport interface Card {\r\n    name: string;\r\n    count: number;\r\n    highlighted: boolean;\r\n    info?: CardInfo;\r\n}\r\n\r\nexport interface Result {\r\n    pilot: string;\r\n    url: string;\r\n    deck: Deck;\r\n    duplicatePilot: boolean;\r\n    archetype: string;\r\n    id: number;\r\n    favorite: boolean;\r\n    spicy: boolean;\r\n}\r\n\r\nexport interface CardInfo {\r\n    colors: Color[];\r\n    faceName: string;\r\n    type: string;\r\n    types: CardType[];\r\n    manaCost: string;\r\n    companion: boolean;\r\n    power: string;\r\n    toughness: string;\r\n    otherHalf: {\r\n        colors: Color[];\r\n        faceName: string;\r\n        type: string;\r\n        types: CardType[];\r\n        manaCost: string;\r\n        text: string;\r\n        power: string;\r\n        toughness: string;\r\n    };\r\n    printings: string[];\r\n}\r\n\r\nexport interface CardCount {\r\n    card: Card;\r\n    deckCount: number;\r\n}\r\n\r\nexport type Color = \"W\" | \"U\" | \"B\" | \"R\" | \"G\";\r\nexport type CardType = \"Creature\" | \"Land\" | \"Instant\" | \"Sorcery\" | \"Artifact\" | \"Enchantment\" | \"Planeswalker\" | \"Battle\";\r\n\r\nexport const setList = [\r\n    { code: \"LCI\", name: \"Lost Caverns of Ixalan\" },\r\n    { code: \"WOE\", name: \"Wilds of Eldraine\" },\r\n    { code: \"LTR\", name: \"Lord of the Rings\" },\r\n    { code: \"MOM\", name: \"March of the Machine\" },\r\n    { code: \"ONE\", name: \"Phyrexia: All Will Be One\" },\r\n    { code: \"BRO\", name: \"The Brothers' War\" },\r\n    { code: \"DMU\", name: \"Dominaria United\" },\r\n    { code: \"SNC\", name: \"Streets of New Capenna\" },\r\n    { code: \"NEO\", name: \"Kamigawa: Neon Dynasty\" },\r\n    { code: \"VOW\", name: \"Innistrad: Crimson Vow\" },\r\n    { code: \"MID\", name: \"Innistrad: Midnight Hunt\" },\r\n    { code: \"AFR\", name: \"Adventures in the Forgotten Realms\" },\r\n    { code: \"MH2\", name: \"Modern Horizons 2\" }\r\n    // { code: \"STX\", name: \"Strixhaven: School of Mages\" },\r\n    // { code: \"KHM\", name: \"Kaldheim\" },\r\n    // { code: \"ZNR\", name: \"Zendikar Rising\" },\r\n    // { code: \"M21\", name: \"Core Set 2021\" },\r\n    // { code: \"IKO\", name: \"Ikoria: Lair of Behemoths\" },\r\n    // { code: \"THB\", name: \"Theros Beyond Death\" },\r\n    // { code: \"ELD\", name: \"Throne of Eldraine\" },\r\n    // { code: \"M20\", name: \"Core Set 2020\" },\r\n    // { code: \"MH1\", name: \"Modern Horizons\" },\r\n    // { code: \"WAR\", name: \"War of the Spark\" }\r\n];\r\n\r\nexport type Format = \"standard\" | \"pioneer\" | \"modern\" | \"legacy\" | \"vintage\" | \"pauper\";\r\n\r\nexport interface Metagame {\r\n    format: Format;\r\n    archetypes: Archetype[];\r\n}\r\n\r\nexport interface Archetype {\r\n    id: number;\r\n    name: string;\r\n    prefixColors?: boolean;\r\n    rules: Rule[];\r\n}\r\n\r\nexport interface Rule {\r\n    cardName: string;\r\n    in: \"main\" | \"side\" | \"both\";\r\n    atLeast?: number;\r\n    atMost?: number;\r\n}\r\n\r\nexport enum guildMap {\r\n    UW = \"Azorius\",\r\n    UB = \"Dimir\",\r\n    UR = \"Izzet\",\r\n    UG = \"Simic\",\r\n    BW = \"Orzhov\",\r\n    BR = \"Rakdos\",\r\n    BG = \"Golgari\",\r\n    RG = \"Gruul\",\r\n    RW = \"Boros\",\r\n    GW = \"Selesnya\"\r\n}\r\n\r\nexport enum shardMap {\r\n    UBR = \"Grixis\",\r\n    UBG = \"Sultai\",\r\n    UBW = \"Esper\",\r\n    URG = \"Temur\",\r\n    URW = \"Jeskai\",\r\n    UGW = \"Bant\",\r\n    BRG = \"Jund\",\r\n    BRW = \"Mardu\",\r\n    BGW = \"Abzan\",\r\n    RGW = \"Naya\"\r\n}\r\n\r\nexport const thx = `Direct links courtesy of /u/FereMiyJeenyus and their [MTGO Results Scraper](https://feremiyjeenyus.github.io/mtgo-results-scraper/about). If you've appreciated this post, consider [supporting their cardboard addiction](https://ko-fi.com/feremiyjeenyus).`;\r\n","import fetch from \"node-fetch\";\r\nimport { Archetype, Card, CardCount, Deck, guildMap, Result, ScrapeResult, shardMap } from \"./types\";\r\nimport cardInfo from \"./resources/cardInfo.json\";\r\n\r\nconst ignoreColorCards = [\"Leyline of Sanctity\", \"Leyline of the Void\", \"Orvar, the All-Form\"];\r\n\r\nexport const identifyArchetype = (result: Result, archetypeRules: Archetype[]): Result => {\r\n    const { deck } = result;\r\n    //lazy clone the card objects because we add the sideboard counts\r\n    const combinedCards = deck.main.map((c) => ({ ...c }));\r\n    deck.sideboard.forEach((card) => {\r\n        const mb = combinedCards.find((c) => c.name === card.name);\r\n        if (!mb) {\r\n            combinedCards.push(card);\r\n        } else {\r\n            mb.count += card.count;\r\n        }\r\n    });\r\n    for (const a of archetypeRules) {\r\n        const { name, rules } = a;\r\n        let isMatch = true;\r\n        rules.forEach((r) => {\r\n            const { atLeast, atMost, cardName } = r;\r\n            if (isMatch) {\r\n                //short circuit if a rule isn't fit\r\n                let cardSet: Card[] = [];\r\n                switch (r.in) {\r\n                    case \"main\":\r\n                        cardSet = deck.main;\r\n                        break;\r\n                    case \"side\":\r\n                        cardSet = deck.sideboard;\r\n                        break;\r\n                    case \"both\":\r\n                        cardSet = combinedCards;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                isMatch =\r\n                    (atMost === 0 && !cardSet.some((c) => c.name === cardName)) ||\r\n                    cardSet.some((c) => c.name === cardName && (!atLeast || c.count >= atLeast) && (!atMost || c.count <= atMost));\r\n            }\r\n        });\r\n        if (isMatch) {\r\n            if (a.prefixColors) {\r\n                const colorPresence = combinedCards.reduce(\r\n                    (hasColor, card) => {\r\n                        card.info?.colors.forEach((color) => {\r\n                            if (!ignoreColorCards.includes(card.name) && !card.info?.manaCost?.includes(\"/\")) {\r\n                                hasColor[color] = true;\r\n                            }\r\n                        });\r\n                        return hasColor;\r\n                    },\r\n                    { W: false, U: false, B: false, R: false, G: false }\r\n                );\r\n                const colorString = `${colorPresence.U ? \"U\" : \"\"}${colorPresence.B ? \"B\" : \"\"}${colorPresence.R ? \"R\" : \"\"}${colorPresence.G ? \"G\" : \"\"}${\r\n                    colorPresence.W ? \"W\" : \"\"\r\n                }`;\r\n                let colorPrefix = \"\";\r\n                const useGuildNames = false;\r\n                const useShardNames = true;\r\n                switch (colorString.length) {\r\n                    case 0:\r\n                        colorPrefix = `Colorless`;\r\n                        break;\r\n                    case 1:\r\n                        colorPrefix = `Mono-${colorString}`;\r\n                        break;\r\n                    case 2:\r\n                        colorPrefix = useGuildNames ? guildMap[colorString] : colorString;\r\n                        break;\r\n                    case 3:\r\n                        colorPrefix = useShardNames ? shardMap[colorString] : colorString;\r\n                        break;\r\n                    case 4:\r\n                        colorPrefix = \"4c\";\r\n                        break;\r\n                    case 5:\r\n                        colorPrefix = \"5c\";\r\n                        break;\r\n                }\r\n                result.archetype = `${colorPrefix} ${name}`;\r\n            } else {\r\n                result.archetype = name;\r\n            }\r\n            break; //escape loop\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const generateCardCounts = (results: Result[]): CardCount[] => {\r\n    const counts: CardCount[] = [];\r\n    results.forEach((r) => {\r\n        r.deck.main.forEach((card) => {\r\n            const countRow = counts.find((c) => c.card.name === card.name);\r\n            if (!countRow) {\r\n                counts.push({\r\n                    card: { ...card, highlighted: false },\r\n                    deckCount: 1\r\n                });\r\n            } else {\r\n                countRow.card.count += card.count;\r\n                countRow.deckCount++;\r\n            }\r\n        });\r\n\r\n        r.deck.sideboard.forEach((card) => {\r\n            const countRow = counts.find((c) => c.card.name === card.name);\r\n            if (!countRow) {\r\n                counts.push({\r\n                    card: { ...card, highlighted: false },\r\n                    deckCount: 1\r\n                });\r\n            } else {\r\n                countRow.card.count += card.count;\r\n                if (!r.deck.main.find((c) => c.name === card.name)) {\r\n                    countRow.deckCount++;\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    return counts;\r\n};\r\n\r\nexport const scrapeUrl = async (url: string): Promise<ScrapeResult | undefined> => {\r\n    try {\r\n        const response = await fetch(`https://scraper-cors.herokuapp.com/${url}`);\r\n        const body = await response.text();\r\n        const decklistLineRegex = new RegExp(\"window.MTGO.decklists.data = .*;\");\r\n        const aetherRegex = new RegExp(\"^Ã[^ ]*r\");\r\n        const lorienRegex = new RegExp(\"^LÃ[^]rien\");\r\n        const match = decklistLineRegex.exec(body);\r\n        if (match) {\r\n            const parsed = JSON.parse(match[0].split(\" = \")[1].split(\";\")[0]);\r\n            console.log(parsed);\r\n            const results: Result[] = [];\r\n            parsed.decks.map((d, i) => {\r\n                const parsedMain = d.deck.find((x) => !x.SB)?.DECK_CARDS || [];\r\n                const parsedSideboard = d.deck.find((x) => x.SB)?.DECK_CARDS || [];\r\n                const main: Card[] = [];\r\n                parsedMain.forEach((c) => {\r\n                    if (aetherRegex.test(c.CARD_ATTRIBUTES.NAME)) c.CARD_ATTRIBUTES.NAME = c.CARD_ATTRIBUTES.NAME.replace(aetherRegex, \"Aether\");\r\n                    if (lorienRegex.test(c.CARD_ATTRIBUTES.NAME)) c.CARD_ATTRIBUTES.NAME = c.CARD_ATTRIBUTES.NAME.replace(lorienRegex, \"Lórien\");\r\n                    const existingCard = main.find((c2) => c2.name === c.CARD_ATTRIBUTES.NAME);\r\n                    if (existingCard) {\r\n                        existingCard.count += c.Quantity;\r\n                    } else {\r\n                        main.push({\r\n                            name: c.CARD_ATTRIBUTES.NAME,\r\n                            count: c.Quantity,\r\n                            highlighted: false,\r\n                            info: cardInfo[c.CARD_ATTRIBUTES.NAME]\r\n                        });\r\n                    }\r\n                });\r\n                const sideboard: Card[] = [];\r\n                parsedSideboard.forEach((c) => {\r\n                    const existingCard = sideboard.find((c2) => c2.name === c.CARD_ATTRIBUTES.NAME);\r\n                    if (existingCard) {\r\n                        existingCard.count += c.Quantity;\r\n                    } else {\r\n                        sideboard.push({\r\n                            name: c.CARD_ATTRIBUTES.NAME,\r\n                            count: c.Quantity,\r\n                            highlighted: false,\r\n                            info: cardInfo[c.CARD_ATTRIBUTES.NAME]\r\n                        });\r\n                    }\r\n                });\r\n                const deck: Deck = {\r\n                    main,\r\n                    sideboard\r\n                };\r\n                results.push({\r\n                    pilot: d.player,\r\n                    url: `${url}#deck_${d.player}`,\r\n                    archetype: \"\",\r\n                    id: i,\r\n                    favorite: false,\r\n                    spicy: false,\r\n                    deck,\r\n                    duplicatePilot: !!results.find((r) => r.pilot === d.player)\r\n                });\r\n            });\r\n            if (parsed.STANDINGS) {\r\n                const topEightScore = {};\r\n                if (parsed.Brackets) {\r\n                    const matchResults = parsed.Brackets.flatMap((b) => b.matches).flatMap((m) => m.players);\r\n                    console.log(matchResults);\r\n                    matchResults.forEach((r) => {\r\n                        const { player, Winner } = r;\r\n                        if (topEightScore[player]) {\r\n                            topEightScore[player] += Winner ? 2 : 1;\r\n                        } else {\r\n                            topEightScore[player] = Winner ? 2 : 1;\r\n                        }\r\n                    });\r\n                    console.log(topEightScore);\r\n                }\r\n                results.sort((a, b) => {\r\n                    if (topEightScore[a.pilot] && topEightScore[b.pilot] && topEightScore[a.pilot] !== topEightScore[b.pilot]) {\r\n                        return topEightScore[b.pilot] - topEightScore[a.pilot];\r\n                    }\r\n                    const aStanding = parsed.STANDINGS.find((s) => s.NAME === a.pilot);\r\n                    const bStanding = parsed.STANDINGS.find((s) => s.NAME === b.pilot);\r\n                    return aStanding.RANK - bStanding.RANK;\r\n                });\r\n            }\r\n            return {\r\n                id: 0,\r\n                mtgoUrl: url,\r\n                eventType: parsed.event_name,\r\n                eventDate: parsed.date.split(\"T\")[0],\r\n                deckResults: results,\r\n                cardCounts: generateCardCounts(results),\r\n                numbered: url.includes(\"champ\") || url.includes(\"challenge\") || url.includes(\"qualifier\")\r\n            };\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        throw err;\r\n    }\r\n    return;\r\n};\r\n","import React from \"react\";\r\nimport { Card } from \"./types\";\r\nimport { List, Popup, Image } from \"semantic-ui-react\";\r\n\r\ninterface CardItemProps {\r\n    card: Card;\r\n    toggleCardHighlight(Card: Card): void;\r\n}\r\n\r\nconst CardItem: React.FC<CardItemProps> = (props: CardItemProps) => {\r\n    const { card, toggleCardHighlight } = props;\r\n\r\n    return (\r\n        <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? \"highlight\" : \"\"}>\r\n            <Popup\r\n                basic\r\n                mouseEnterDelay={600}\r\n                mouseLeaveDelay={400}\r\n                position=\"top right\"\r\n                trigger={\r\n                    <p>\r\n                        {card.count} {card.name}\r\n                    </p>\r\n                }\r\n            >\r\n                <Popup.Content>\r\n                    {card.info && (\r\n                        <Image\r\n                            className={card.info.types.includes(\"Battle\") ? \"rotate90\" : \"\"}\r\n                            src={`https://api.scryfall.com/cards/named?format=image&exact=${card.name.replaceAll(\" \", \"+\")}`}\r\n                        />\r\n                    )}\r\n                </Popup.Content>\r\n            </Popup>\r\n        </List.Item>\r\n    );\r\n};\r\n\r\nexport default CardItem;\r\n","import React, { useState, useEffect, ChangeEvent } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Header, Grid, List, Container, Icon, Input, InputOnChangeData } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { Result, Card } from \"./types\";\r\nimport CardItem from \"./CardItem\";\r\n\r\ninterface DeckListProps {\r\n    result: Result;\r\n    collapsible?: boolean;\r\n    updateDeck(result: Result): void;\r\n    goToNext?(): void;\r\n}\r\n\r\nconst colorLabels = [\"White\", \"Blue\", \"Black\", \"Red\", \"Green\", \"Colorless\"];\r\n\r\nconst typeLabels = [\"Creature\", \"Noncreature\", \"Land\"];\r\n\r\nconst colorColors = [\"#fff8d6\", \"#367ae0\", \"#404040\", \"#db2e2e\", \"#187d2a\", \"#cfcfcf\"];\r\n\r\nconst typeColors = [\"#8ba349\", \"#c48dc2\", \"#ffb114\"];\r\n\r\nconst DeckList: React.FC<DeckListProps> = (props: DeckListProps) => {\r\n    const { result, updateDeck, goToNext, collapsible = true } = props;\r\n    const [colorCount, setColorCount] = useState<number[]>([]);\r\n    const [typeCount, setTypeCount] = useState<number[]>([]);\r\n    const [collapsed, setCollapsed] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        if (!result) return;\r\n        let [wCount, uCount, bCount, rCount, gCount, cCount] = [0, 0, 0, 0, 0, 0];\r\n        let [creatures, noncreatures, lands] = [0, 0, 0];\r\n\r\n        result.deck.main.forEach((card) => {\r\n            if (card.info) {\r\n                const { colors, types } = card.info;\r\n                if (colors.includes(\"W\")) wCount += card.count;\r\n                if (colors.includes(\"U\")) uCount += card.count;\r\n                if (colors.includes(\"B\")) bCount += card.count;\r\n                if (colors.includes(\"R\")) rCount += card.count;\r\n                if (colors.includes(\"G\")) gCount += card.count;\r\n                if (!colors.length && !card.info.types.includes(\"Land\")) cCount += card.count;\r\n\r\n                if (types.includes(\"Creature\")) creatures += card.count;\r\n                else if (types.includes(\"Land\")) lands += card.count;\r\n                else noncreatures += card.count;\r\n            }\r\n        });\r\n        setColorCount([wCount, uCount, bCount, rCount, gCount, cCount]);\r\n        setTypeCount([creatures, noncreatures, lands]);\r\n    }, [result]);\r\n\r\n    const toggleCardHighlight = (card: Card) => {\r\n        const mainIndex = result.deck.main.findIndex((c) => c.name === card.name);\r\n        const sideIndex = result.deck.sideboard.findIndex((c) => c.name === card.name);\r\n        const main = [...result.deck.main];\r\n        const sideboard = [...result.deck.sideboard];\r\n        if (mainIndex > -1) {\r\n            main[mainIndex] = { ...main[mainIndex], highlighted: !main[mainIndex].highlighted };\r\n        }\r\n        if (sideIndex > -1) {\r\n            sideboard[sideIndex] = { ...sideboard[sideIndex], highlighted: !sideboard[sideIndex].highlighted };\r\n        }\r\n        updateDeck({ ...result, deck: { main, sideboard } });\r\n    };\r\n\r\n    const toggleSpicy = () => {\r\n        updateDeck({ ...result, spicy: !result.spicy });\r\n    };\r\n\r\n    const toggleFavorite = () => {\r\n        updateDeck({ ...result, favorite: !result.favorite });\r\n    };\r\n\r\n    const handleSetArchetype = (e: ChangeEvent, data: InputOnChangeData) => {\r\n        const { value } = data;\r\n        updateDeck({ ...result, archetype: value });\r\n    };\r\n\r\n    const handleKeyPress = (event) => {\r\n        if (event.key === \"Enter\" && !!goToNext) {\r\n            goToNext();\r\n        }\r\n    };\r\n\r\n    const main: { [key: string]: React.ReactElement[] } = {\r\n        Planeswalkers: [],\r\n        Creatures: [],\r\n        Instants: [],\r\n        Sorceries: [],\r\n        Artifacts: [],\r\n        Enchantments: [],\r\n        Battles: [],\r\n        Lands: [],\r\n        Unknown: []\r\n    };\r\n\r\n    result.deck.main.forEach((card) => {\r\n        if (!card.info) {\r\n            main.Unknown.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Creature\")) {\r\n            main.Creatures.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Land\")) {\r\n            main.Lands.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Instant\")) {\r\n            main.Instants.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Sorcery\")) {\r\n            main.Sorceries.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Artifact\") && !card.info.types.includes(\"Creature\")) {\r\n            main.Artifacts.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Enchantment\") && !card.info.types.includes(\"Creature\")) {\r\n            main.Enchantments.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Planeswalker\")) {\r\n            main.Planeswalkers.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Battle\")) {\r\n            main.Battles.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n    });\r\n\r\n    const side: { [key: string]: React.ReactElement[] } = {\r\n        Companion: [],\r\n        Planeswalkers: [],\r\n        Creatures: [],\r\n        Instants: [],\r\n        Sorceries: [],\r\n        Artifacts: [],\r\n        Enchantments: [],\r\n        Battles: [],\r\n        Lands: [],\r\n        Unknown: []\r\n    };\r\n\r\n    result.deck.sideboard.forEach((card) => {\r\n        if (!card.info) {\r\n            side.Unknown.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Creature\")) {\r\n            if (card.info.companion) {\r\n                side.Companion.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n            } else {\r\n                side.Creatures.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n            }\r\n        } else if (card.info.types.includes(\"Land\")) {\r\n            side.Lands.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Instant\")) {\r\n            side.Instants.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Sorcery\")) {\r\n            side.Sorceries.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Artifact\") && !card.info.types.includes(\"Creature\")) {\r\n            side.Artifacts.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Enchantment\") && !card.info.types.includes(\"Creature\")) {\r\n            side.Enchantments.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Planeswalker\")) {\r\n            side.Planeswalkers.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Battle\")) {\r\n            main.Battles.push(<CardItem key={card.name} card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Grid width={16} container centered className=\"decklist\" padded>\r\n            <Grid.Row className={result.archetype ? \"decklist-header\" : \"decklist-header-unnamed\"} verticalAlign=\"middle\">\r\n                <Grid.Column width={6} onClick={() => setCollapsed(!collapsed)}>\r\n                    <Header style={{ marginBottom: 0 }}>\r\n                        {collapsible && <Icon name={collapsed ? \"triangle right\" : \"triangle down\"} />}\r\n                        {result.archetype ? `${result.archetype} | ` : \"\"}\r\n                        {result.pilot}\r\n                    </Header>\r\n                </Grid.Column>\r\n                <Grid.Column width={8} floated=\"right\" textAlign=\"right\">\r\n                    <List horizontal>\r\n                        <List.Item>\r\n                            <Icon name=\"heart\" size=\"big\" color={result.favorite ? \"pink\" : \"grey\"} className=\"clickable\" onClick={toggleFavorite} />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <Icon name=\"hotjar\" size=\"big\" color={result.spicy ? \"orange\" : \"grey\"} className=\"clickable\" onClick={toggleSpicy} />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <Input label=\"Archetype\" value={result.archetype} onChange={handleSetArchetype} onKeyPress={handleKeyPress} />\r\n                        </List.Item>\r\n                    </List>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            {(!collapsible || !collapsed) && (\r\n                <Grid.Row>\r\n                    <Grid.Column width={4}>\r\n                        <Header content=\"Main\" style={{ marginBottom: 0 }} />\r\n                        <List style={{ marginTop: 0 }}>\r\n                            <List.Item>\r\n                                {Object.keys(main)\r\n                                    .filter((key) => main[key].length)\r\n                                    .map((key) => {\r\n                                        return (\r\n                                            <List.List key={key}>\r\n                                                <List.Header content={key} />\r\n                                                {main[key]}\r\n                                            </List.List>\r\n                                        );\r\n                                    })}\r\n                            </List.Item>\r\n                        </List>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={3}>\r\n                        <Header content=\"Sideboard\" style={{ marginBottom: 0 }} />\r\n                        <List style={{ marginTop: 0 }}>\r\n                            <List.Item>\r\n                                {Object.keys(side)\r\n                                    .filter((key) => side[key].length)\r\n                                    .map((key) => {\r\n                                        return (\r\n                                            <List.List key={key}>\r\n                                                <List.Header>\r\n                                                    {key === \"Companion\" && <Icon name=\"paw\" />}\r\n                                                    {key} {key === \"Companion\" && <Icon name=\"paw\" />}\r\n                                                </List.Header>\r\n                                                {side[key]}\r\n                                            </List.List>\r\n                                        );\r\n                                    })}\r\n                            </List.Item>\r\n                        </List>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={6}>\r\n                        <Container style={{ marginBottom: \"10px\" }}>\r\n                            <Doughnut\r\n                                data={{\r\n                                    labels: colorLabels,\r\n                                    datasets: [\r\n                                        {\r\n                                            backgroundColor: colorColors,\r\n                                            data: colorCount\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                                options={{\r\n                                    title: {\r\n                                        display: true,\r\n                                        text: \"Color Distribution\"\r\n                                    },\r\n                                    legend: { display: false }\r\n                                }}\r\n                            />\r\n                        </Container>\r\n                        <Container>\r\n                            <Doughnut\r\n                                data={{\r\n                                    labels: typeLabels,\r\n                                    datasets: [\r\n                                        {\r\n                                            backgroundColor: typeColors,\r\n                                            data: typeCount,\r\n                                            label: \"1\"\r\n                                        },\r\n                                        {\r\n                                            backgroundColor: typeColors.slice(0, 2),\r\n                                            data: typeCount.slice(0, 2),\r\n                                            label: \"2\"\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                                options={{\r\n                                    title: {\r\n                                        display: true,\r\n                                        text: \"Type Distribution\"\r\n                                    },\r\n                                    legend: { display: true, position: \"bottom\" },\r\n                                    cutoutPercentage: 30\r\n                                }}\r\n                            />\r\n                        </Container>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default DeckList;\r\n","import React, { useState } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Button, Modal, List, Container } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\nimport { Result } from \"./types\";\r\nimport DeckList from \"./DeckList\";\r\n\r\ninterface DeckDetailModalProps {\r\n    results: Result[];\r\n    setResults(results: Result[]): void;\r\n    open: boolean;\r\n    onClose(): void;\r\n}\r\n\r\nconst DeckDetailModal: React.FC<DeckDetailModalProps> = (props: DeckDetailModalProps) => {\r\n    const { results, setResults, open, onClose } = props;\r\n    const [displayedDeckIndex, setDisplayedDeckIndex] = useState<number>(0);\r\n\r\n    const goToNextDeck = () => {\r\n        if (!displayedDeck) return;\r\n        const index = displayedDeckIndex || 0;\r\n\r\n        const res = [...results];\r\n        res[index] = displayedDeck;\r\n        setResults(res);\r\n\r\n        if (index + 1 < results.length) {\r\n            setDisplayedDeckIndex(index + 1);\r\n        } else {\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    const goToPreviousDeck = () => {\r\n        if (!displayedDeck) return;\r\n        const index = displayedDeckIndex || 0;\r\n\r\n        const res = [...results];\r\n        res[index] = displayedDeck;\r\n        setResults(res);\r\n\r\n        if (index !== 0) {\r\n            setDisplayedDeckIndex(index - 1);\r\n        } else {\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    const updateDisplayedDeck = (result: Result) => {\r\n        const res = [...results];\r\n        res[displayedDeckIndex] = result;\r\n        setResults(res);\r\n    };\r\n\r\n    const displayedDeck = results[displayedDeckIndex];\r\n    return (\r\n        <Modal open={open} onClose={onClose} style={{ top: \"3em\", left: \"calc(50vw - 475px)\" }} closeOnDimmerClick={false} closeIcon>\r\n            <Modal.Header>\r\n                <Container textAlign=\"right\">\r\n                    <List horizontal>\r\n                        <List.Item>\r\n                            <Button onClick={goToPreviousDeck} content=\"Previous\" />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <Button onClick={goToNextDeck} content=\"Next\" />\r\n                        </List.Item>\r\n                    </List>\r\n                </Container>\r\n            </Modal.Header>\r\n            <Modal.Content>\r\n                {!!displayedDeck && <DeckList result={displayedDeck} updateDeck={updateDisplayedDeck} collapsible={false} goToNext={goToNextDeck} />}\r\n            </Modal.Content>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default DeckDetailModal;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Header, Container, Grid, Input, Button, Form, Message, Tab, List, DropdownItemProps, Accordion, Icon, Dimmer, Loader } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\nimport { identifyArchetype, scrapeUrl } from \"./lib\";\r\nimport { Result, Deck, setList, Card, CardCount, Rule, Archetype, guildMap, shardMap } from \"./types\";\r\nimport DeckDetailModal from \"./DeckDetailModal\";\r\n\r\nexport type TextFormat = \"plaintext\" | \"markdown\";\r\nconst thx = `Direct links courtesy of /u/FereMiyJeenyus and their [MTGO Results Scraper](https://feremiyjeenyus.github.io/mtgo-results-scraper/)`;\r\n\r\nconst App: React.FC = () => {\r\n    const [hasScraped, setHasScraped] = useState<boolean>(false);\r\n    const [wotcUrl, setWotcUrl] = useState<string>(\"\");\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [resultList, setResultList] = useState<Result[]>([]);\r\n    const [selectedCards, setSelectedCards] = useState<string[]>([]);\r\n    const [cardCounts, setCardCounts] = useState<CardCount[]>([]);\r\n    const [selectedExpansions, setSelectedExpansions] = useState<string[]>([]);\r\n    const [deckModalOpen, setDeckModalOpen] = useState<boolean>(false);\r\n    const [scrapeError, setScrapeError] = useState<boolean>(false);\r\n    const [isNumberedResults, setIsNumberedResults] = useState<boolean>(false);\r\n    const [expandOptions, setExpandOptions] = useState<boolean>(false);\r\n    const [textFormat, setTextFormat] = useState<TextFormat>(\"markdown\");\r\n    const [filterForSpice, setFilterForSpice] = useState<boolean>(false);\r\n    const [filterForFave, setFilterForFave] = useState<boolean>(false);\r\n    const [cardOptions, setCardOptions] = useState<DropdownItemProps[]>([]);\r\n    const [showReprints, setShowReprints] = useState<boolean>(true);\r\n\r\n    // scraping\r\n    const generateCardCounts = (results: Result[]) => {\r\n        const counts: CardCount[] = [];\r\n        results.forEach((r) => {\r\n            r.deck.main.forEach((card) => {\r\n                const countRow = counts.find((c) => c.card.name === card.name);\r\n                if (!countRow) {\r\n                    counts.push({\r\n                        card: { ...card, highlighted: false },\r\n                        deckCount: 1\r\n                    });\r\n                } else {\r\n                    countRow.card.count += card.count;\r\n                    countRow.deckCount++;\r\n                }\r\n            });\r\n\r\n            r.deck.sideboard.forEach((card) => {\r\n                const countRow = counts.find((c) => c.card.name === card.name);\r\n                if (!countRow) {\r\n                    counts.push({\r\n                        card: { ...card, highlighted: false },\r\n                        deckCount: 1\r\n                    });\r\n                } else {\r\n                    countRow.card.count += card.count;\r\n                    if (!r.deck.main.find((c) => c.name === card.name)) {\r\n                        countRow.deckCount++;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        setCardOptions(\r\n            counts\r\n                .sort((a, b) => {\r\n                    if (a.card.name < b.card.name) return -1;\r\n                    if (b.card.name < a.card.name) return 1;\r\n                    return 0;\r\n                })\r\n                .map((c) => ({\r\n                    key: c.card.name,\r\n                    text: c.card.name,\r\n                    value: c.card.name\r\n                }))\r\n        );\r\n        setCardCounts(counts);\r\n    };\r\n\r\n    const scrape = async () => {\r\n        try {\r\n            if (!wotcUrl) return;\r\n            setIsLoading(true);\r\n            const scrapeResults = await scrapeUrl(wotcUrl);\r\n            if (!scrapeResults) return;\r\n            const rulesFromStorage = window.localStorage?.getItem(\"archetypeRules\");\r\n            let archetypeRules: Archetype[] = [];\r\n            if (rulesFromStorage && rulesFromStorage !== \"undefined\") {\r\n                archetypeRules = JSON.parse(rulesFromStorage);\r\n            }\r\n            const namedResults = scrapeResults.deckResults.map((r) => identifyArchetype(r, archetypeRules));\r\n            generateCardCounts(namedResults);\r\n            setResultList(namedResults);\r\n            setHasScraped(true);\r\n            setDeckModalOpen(true);\r\n            setIsNumberedResults(wotcUrl.includes(\"champ\") || wotcUrl.includes(\"challenge\") || wotcUrl.includes(\"qualifier\"));\r\n            setIsLoading(false);\r\n        } catch (error) {\r\n            setScrapeError(true);\r\n        }\r\n    };\r\n\r\n    // text generation\r\n    const generatePlaintext = (results: Result[]) => {\r\n        const resultLines = results.map(\r\n            (r) => `${r.archetype ? `${r.archetype} | ` : \"\"}${r.pilot}: <${r.url}>${r.duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}`\r\n        );\r\n\r\n        const [path] = wotcUrl.split(\"/\").slice(-1);\r\n        const title = path.slice(0, -10);\r\n        const date = path.slice(-10);\r\n        const titleLine = title.replace(/-/g, \" \").replace(/\\w\\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase()) + date;\r\n        return [titleLine, ...resultLines].join(\"\\r\\n\");\r\n    };\r\n\r\n    const generateMarkdownLine = (result: Result): string => {\r\n        const { deck, archetype, pilot, duplicatePilot, url } = result;\r\n\r\n        const muUrl = `[${archetype || \"archetype\"}](${url})`;\r\n        const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`;\r\n\r\n        const highlights = [...deck.main.filter((c) => c.highlighted), ...deck.sideboard.filter((c) => c.highlighted)].map((c) => c.name);\r\n        const muHighlights = `(${Array.from(new Set(highlights.map((c) => `[[${c}]]`))).join(\", \")})`;\r\n        return `${isNumberedResults ? \"1.\" : \"*\"} ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`;\r\n    };\r\n\r\n    const generateMarkdown = (results: Result[]) => {\r\n        if (!hasScraped) return \"\";\r\n        const resultLines: string[] = [];\r\n        for (const result of results) {\r\n            const muString = generateMarkdownLine(result);\r\n            resultLines.push(muString);\r\n        }\r\n        return [`Full Results: ${wotcUrl || \"\"}`, \"\", ...resultLines, \"\", thx].join(\"\\r\\n\");\r\n    };\r\n\r\n    const copyToClipboard = async (text: string) => {\r\n        if (!navigator.clipboard) {\r\n            return;\r\n        }\r\n        await navigator.clipboard.writeText(text);\r\n    };\r\n\r\n    // filtering\r\n    const deckHasCard = (deck: Deck, filterCards: string[]): boolean => {\r\n        const cards = [...deck.main, ...deck.sideboard];\r\n        if (cards.filter((c) => filterCards.includes(c.name)).length) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const deckHasExpansion = (deck: Deck, filterExpansions: string[]): boolean => {\r\n        const cards = [...deck.main, ...deck.sideboard];\r\n        const nonBasics = cards.filter(\r\n            (c) =>\r\n                ![\r\n                    \"Plains\",\r\n                    \"Island\",\r\n                    \"Swamp\",\r\n                    \"Mountain\",\r\n                    \"Forest\",\r\n                    \"Snow-Covered Plains\",\r\n                    \"Snow-Covered Island\",\r\n                    \"Snow-Covered Swamp\",\r\n                    \"Snow-Covered Mountain\",\r\n                    \"Snow-Covered Forest\"\r\n                ].includes(c.name)\r\n        );\r\n        const expansions = nonBasics.flatMap((c) => c.info?.printings || []);\r\n        const deduped = [...new Set(expansions)];\r\n\r\n        if (deduped.filter((e) => filterExpansions.includes(e)).length) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const applyDeckFilters = useCallback(\r\n        (results: Result[]): Result[] => {\r\n            const spicyResults = results.filter((r) => !filterForSpice || r.spicy);\r\n            const faveResults = spicyResults.filter((r) => !filterForFave || r.favorite);\r\n            const expacResults = faveResults.filter((r) => !selectedExpansions.length || deckHasExpansion(r.deck, selectedExpansions));\r\n            const cardResults = expacResults.filter((r) => !selectedCards.length || deckHasCard(r.deck, selectedCards));\r\n            return cardResults;\r\n        },\r\n        [selectedCards, selectedExpansions, filterForFave, filterForSpice]\r\n    );\r\n\r\n    const applyCardFilters = useCallback(\r\n        (cards: CardCount[]): CardCount[] => {\r\n            const filteredBySet = cards.filter(\r\n                (c) => !selectedExpansions.length || c.card.info?.printings.filter((p) => selectedExpansions.includes(p)).length\r\n            );\r\n            const filteredByCard = filteredBySet.filter((c) => !selectedCards.length || selectedCards.includes(c.card.name));\r\n            return filteredByCard;\r\n        },\r\n        [selectedCards, selectedExpansions]\r\n    );\r\n\r\n    const filteredResults = applyDeckFilters(resultList);\r\n    const filteredCardCounts = applyCardFilters(cardCounts);\r\n\r\n    const previewText = textFormat === \"markdown\" ? generateMarkdown(filteredResults) : generatePlaintext(filteredResults);\r\n\r\n    const decksByCard: string = cardCounts\r\n        .filter(\r\n            (c) =>\r\n                ![\r\n                    \"Plains\",\r\n                    \"Island\",\r\n                    \"Swamp\",\r\n                    \"Mountain\",\r\n                    \"Forest\",\r\n                    \"Snow-Covered Plains\",\r\n                    \"Snow-Covered Island\",\r\n                    \"Snow-Covered Swamp\",\r\n                    \"Snow-Covered Mountain\",\r\n                    \"Snow-Covered Forest\"\r\n                ].includes(c.card.name)\r\n        )\r\n        .filter((c) => c.card.info?.printings.includes(setList[0].code) && (showReprints || c.card.info?.printings.length === 1))\r\n        .map((c) => {\r\n            const cardName = `* [[${c.card.name}]]`;\r\n            const urls = resultList\r\n                .filter((r) => deckHasCard(r.deck, [c.card.name]))\r\n                .map((r) => {\r\n                    return `**[${r.archetype || \"archetype\"}](${r.url})**`;\r\n                });\r\n            return `${cardName} ${[...urls].join(\", \")}`;\r\n        })\r\n        .join(\"\\r\\n\");\r\n\r\n    const panes = [\r\n        {\r\n            menuItem: \"Preview\",\r\n            pane: (\r\n                <Tab.Pane key=\"Preview\">\r\n                    <Form>\r\n                        <Form.TextArea value={previewText} style={{ height: 500 }} />\r\n                    </Form>\r\n                </Tab.Pane>\r\n            )\r\n        },\r\n        {\r\n            menuItem: \"Card Counts\",\r\n            pane: (\r\n                <Tab.Pane key=\"Counts\">\r\n                    <Form>\r\n                        <Form.TextArea\r\n                            value={filteredCardCounts\r\n                                .sort((a, b) => b.card.count - a.card.count)\r\n                                .map(\r\n                                    (c) =>\r\n                                        `${c.card.count} cop${c.card.count > 1 ? \"ies\" : \"y\"} of ${c.card.name} in ${c.deckCount} deck${\r\n                                            c.deckCount > 1 ? \"s\" : \"\"\r\n                                        }`\r\n                                )\r\n                                .join(\"\\r\\n\")}\r\n                            style={{ height: 500 }}\r\n                        />\r\n                    </Form>\r\n                </Tab.Pane>\r\n            )\r\n        },\r\n        {\r\n            menuItem: `Decks with ${setList[0].code} Cards`,\r\n            pane: (\r\n                <Tab.Pane key=\"ByCard\">\r\n                    <Form>\r\n                        <Form.Checkbox label=\"Show Reprints?\" checked={!!showReprints} onChange={(e, { checked }) => setShowReprints(!!checked)} />\r\n                        <Form.TextArea style={{ height: 500 }} value={decksByCard} />\r\n                    </Form>\r\n                </Tab.Pane>\r\n            )\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <Container className=\"App\">\r\n            {isLoading && (\r\n                <Dimmer active inverted>\r\n                    <Loader size=\"large\">Loading</Loader>\r\n                </Dimmer>\r\n            )}\r\n            <Header>MTGO Results Scraper</Header>\r\n            <Grid columns={16}>\r\n                <Grid.Row>\r\n                    <Grid.Column width={3} textAlign=\"left\">\r\n                        <Input value={wotcUrl} onChange={(e) => setWotcUrl(e.target.value)} placeholder=\"Deck Dump URL\" />\r\n                        <a href=\"https://www.mtgo.com/en/mtgo/decklists\" target=\"_blank\" rel=\"noopener noreferrer\" style={{ marginLeft: \"1em\" }}>\r\n                            MTGO Results\r\n                        </a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={13} textAlign=\"left\">\r\n                        <List horizontal>\r\n                            <List.Item>\r\n                                <Button onClick={scrape} content=\"Scrape\" />\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <Button onClick={() => setDeckModalOpen(true)} content=\"Decks\" disabled={!hasScraped} />\r\n                            </List.Item>\r\n                        </List>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        <Accordion>\r\n                            <Accordion.Title\r\n                                active={expandOptions}\r\n                                onClick={() => {\r\n                                    setExpandOptions(!expandOptions);\r\n                                }}\r\n                            >\r\n                                <Icon name=\"dropdown\" />\r\n                                <span>Filters and Options (mostly functional, will make it look nicer soon)</span>\r\n                                <div className=\"accordion-title-line\" />\r\n                            </Accordion.Title>\r\n                            <Accordion.Content active={expandOptions}>\r\n                                <Form.Dropdown\r\n                                    label=\"Filter By Card: \"\r\n                                    multiple\r\n                                    clearable\r\n                                    search\r\n                                    selection\r\n                                    lazyLoad\r\n                                    value={selectedCards}\r\n                                    options={cardOptions || []}\r\n                                    onChange={(_e, { value }) => {\r\n                                        setSelectedCards(value as string[]);\r\n                                    }}\r\n                                />\r\n                                <Form.Dropdown\r\n                                    label=\"Filter By Expansion: \"\r\n                                    multiple\r\n                                    clearable\r\n                                    search\r\n                                    selection\r\n                                    value={selectedExpansions}\r\n                                    options={setList.map((s) => ({\r\n                                        key: s.code,\r\n                                        value: s.code,\r\n                                        text: s.name\r\n                                    }))}\r\n                                    onChange={(_e, { value }) => {\r\n                                        setSelectedExpansions(value as string[]);\r\n                                    }}\r\n                                />\r\n                                <Form.Field>Preview Text</Form.Field>\r\n                                <Form.Checkbox\r\n                                    radio\r\n                                    name=\"textFormatRadioGroup\"\r\n                                    label=\"Markdown\"\r\n                                    value={textFormat}\r\n                                    checked={textFormat === \"markdown\"}\r\n                                    onClick={() => setTextFormat(\"markdown\")}\r\n                                />\r\n                                <Form.Checkbox\r\n                                    radio\r\n                                    name=\"textFormatRadioGroup\"\r\n                                    label=\"Plaintext\"\r\n                                    value={textFormat}\r\n                                    checked={textFormat === \"plaintext\"}\r\n                                    onClick={() => setTextFormat(\"plaintext\")}\r\n                                />\r\n                                <Form.Checkbox\r\n                                    toggle\r\n                                    label=\"Marked as Spicy?\"\r\n                                    checked={filterForSpice}\r\n                                    onChange={(_e, { checked }) => setFilterForSpice(!!checked)}\r\n                                />\r\n                                <Form.Checkbox\r\n                                    toggle\r\n                                    label=\"Marked as Favorite?\"\r\n                                    checked={filterForFave}\r\n                                    onChange={(_e, { checked }) => setFilterForFave(!!checked)}\r\n                                />\r\n                            </Accordion.Content>\r\n                        </Accordion>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        {scrapeError && (\r\n                            <Message negative>\r\n                                <p>There was an error while attempting to scrape results. Please try again later</p>\r\n                            </Message>\r\n                        )}\r\n                        <Tab panes={panes} renderActiveOnly={false} />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Button\r\n                        onClick={() => {\r\n                            copyToClipboard(generatePlaintext(filteredResults));\r\n                        }}\r\n                        content=\"Copy Plaintext\"\r\n                    />\r\n                    <Button\r\n                        onClick={() => {\r\n                            copyToClipboard(generateMarkdown(filteredResults));\r\n                        }}\r\n                        content=\"Copy Markdown\"\r\n                    />\r\n                </Grid.Row>\r\n            </Grid>\r\n            <DeckDetailModal\r\n                open={deckModalOpen && !!resultList?.length}\r\n                onClose={() => setDeckModalOpen(false)}\r\n                results={resultList}\r\n                setResults={setResultList}\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React, { useState } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Container, Menu } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavBar: React.FC = () => {\r\n    const [path, setPath] = useState<string>(window.location.pathname);\r\n\r\n    return (\r\n        <Menu size=\"large\">\r\n            <Container>\r\n                <Menu.Item as={Link} to={\"/\"} active={path === \"/\"} onClick={() => setPath(\"/\")}>\r\n                    Home\r\n                </Menu.Item>\r\n                <Menu.Item as={Link} to={\"/archetypes\"} active={path === \"/archetypes\"} onClick={() => setPath(\"/archetypes\")}>\r\n                    Archetypes\r\n                </Menu.Item>\r\n                <Menu.Item as={Link} to={\"/mass-entry\"} active={path === \"/mass-entry\"} onClick={() => setPath(\"/mass-entry\")}>\r\n                    Mass Entry\r\n                </Menu.Item>\r\n                <Menu.Item as={Link} to={\"/about\"} active={path === \"/about\"} onClick={() => setPath(\"/about\")}>\r\n                    About\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { List, Container, ListItem } from \"semantic-ui-react\";\r\n\r\nconst About: React.FC = () => {\r\n    return (\r\n        <List>\r\n            <List.Item>\r\n                <List.Header>What am I looking at?</List.Header>\r\n                <Container style={{ padding: \"0.5em 1.25em 0.25em\" }}>\r\n                    This is a web tool for scraping Wizards of the Coast&apos;s MTGO results posts and formatting the contents for a Reddit post (or anywhere\r\n                    else that supports Markdown)\r\n                </Container>\r\n            </List.Item>\r\n            <List.Item>\r\n                <List.Header>How do I use it?</List.Header>\r\n                <Container style={{ paddingLeft: \"1em\" }}>\r\n                    <List ordered>\r\n                        <ListItem>Paste the url for a WotC deck dump in the little box and click &apos;Scrape.&apos;</ListItem>\r\n                        <ListItem>\r\n                            Create archetype definition rules (they&apos;ll be saved locally for next time you use this site from your current device).\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            Click &apos;Decks&apos; to view the decklists. From there, you can tweak the archetype names and click cards to highlight them.\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            Copy the resulting text into your Reddit post. Be sure you&apos;re in &apos;Markdown Mode&apos; or your links will get ugly.\r\n                        </ListItem>\r\n                    </List>\r\n                </Container>\r\n            </List.Item>\r\n            <List.Item>\r\n                <List.Header>How does the archetype definition stuff work?</List.Header>\r\n                <Container style={{ padding: \"0.5em 1.25em 0.25em\" }}>\r\n                    For each deck in the scraped results, it checks for the presence and count of each named card in the location specified. &apos;At Most:\r\n                    0&apos; will override &apos;At Least,&apos; but other contradictory rules will simply fail to match. If a deck matches all the rules in an\r\n                    archetype definitions, it adds that archetype name and optionally prefixes the colors (ignoring hybrid and Phyrexian mana costs). Note that\r\n                    it stops checking once an archetype definition applies, so try to put more general definitions toward the end of the list.\r\n                </Container>\r\n                <Container style={{ padding: \"0.5em 1.25em 0.25em\" }}>\r\n                    Your definitions are stored in your browser&apos;s local storage in a JSON array, accessible and editable through your browser&apos;s dev\r\n                    tools. I&apos;m planning on adding import and export options, and bugging some users for their definitions once the feature is more\r\n                    battle-tested.\r\n                </Container>\r\n            </List.Item>\r\n            <List.Item>\r\n                <List.Header>How can I report a bug or suggest a feature?</List.Header>\r\n                <Container style={{ padding: \"0.5em 1.25em \" }}>\r\n                    Message me on Reddit: <a href=\"https://reddit.com/message/compose/?to=FereMiyJeenyus\">/u/FereMiyJeenyus</a>\r\n                </Container>\r\n            </List.Item>\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Button, Form, Container, DropdownItemProps, Grid } from \"semantic-ui-react\";\r\nimport { Rule } from \"../../types\";\r\n\r\ninterface RuleFormProps {\r\n    rule: Rule;\r\n    index: number;\r\n    updateRule(rule: Rule, index: number): void;\r\n    removeRule(index: number): void;\r\n    cardOptions: DropdownItemProps[];\r\n}\r\n\r\nconst RuleForm: React.FC<RuleFormProps> = (props: RuleFormProps) => {\r\n    const { rule, index, updateRule, removeRule, cardOptions } = props;\r\n\r\n    return (\r\n        <>\r\n            <Grid.Column width={4}>\r\n                {rule.cardName ? (\r\n                    <Container>\r\n                        Card Name\r\n                        <br />\r\n                        <strong style={{ display: \"block\", marginTop: \"0.5em\" }}>{rule.cardName}</strong>\r\n                    </Container>\r\n                ) : (\r\n                    <Form.Dropdown\r\n                        label=\"Card Name\"\r\n                        selection\r\n                        search\r\n                        lazyLoad\r\n                        minCharacters={3}\r\n                        value={rule.cardName}\r\n                        options={cardOptions}\r\n                        onChange={(_e, { value }) => {\r\n                            updateRule({ ...rule, cardName: value as string }, index);\r\n                        }}\r\n                    />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={2}>\r\n                <Form.Dropdown\r\n                    label=\"At Least\"\r\n                    fluid\r\n                    selection\r\n                    clearable\r\n                    value={rule.atLeast}\r\n                    options={[\r\n                        { key: 1, text: 1, value: 1 },\r\n                        { key: 2, text: 2, value: 2 },\r\n                        { key: 3, text: 3, value: 3 },\r\n                        { key: 4, text: 4, value: 4 }\r\n                    ]}\r\n                    onChange={(_e, { value }) => updateRule({ ...rule, atLeast: value !== \"\" ? (value as number) : undefined }, index)}\r\n                />\r\n            </Grid.Column>\r\n            <Grid.Column width={2}>\r\n                <Form.Dropdown\r\n                    label=\"At Most\"\r\n                    fluid\r\n                    selection\r\n                    clearable\r\n                    value={rule.atMost}\r\n                    options={[\r\n                        { key: 0, text: 0, value: 0 },\r\n                        { key: 1, text: 1, value: 1 },\r\n                        { key: 2, text: 2, value: 2 },\r\n                        { key: 3, text: 3, value: 3 }\r\n                    ]}\r\n                    onChange={(_e, { value }) => updateRule({ ...rule, atMost: value !== \"\" ? (value as number) : undefined }, index)}\r\n                />\r\n            </Grid.Column>\r\n            <Grid.Column width={3}>\r\n                <Form.Dropdown\r\n                    label=\"In\"\r\n                    fluid\r\n                    selection\r\n                    value={rule.in}\r\n                    options={[\r\n                        { key: 0, text: \"Main\", value: \"main\" },\r\n                        { key: 1, text: \"Sideboard\", value: \"side\" },\r\n                        { key: 2, text: \"Either\", value: \"both\" }\r\n                    ]}\r\n                    onChange={(_e, { value }) => updateRule({ ...rule, in: value as \"main\" | \"side\" | \"both\" }, index)}\r\n                />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} textAlign=\"right\">\r\n                <Button\r\n                    style={{ marginTop: \"1.4em\" }}\r\n                    icon=\"trash\"\r\n                    onClick={() => {\r\n                        removeRule(index);\r\n                    }}\r\n                />\r\n            </Grid.Column>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RuleForm;\r\n","import React from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { DropdownItemProps, Checkbox, Grid, Input, Button } from \"semantic-ui-react\";\r\nimport RuleForm from \"./RuleForm\";\r\nimport { Archetype, Rule } from \"../../types\";\r\n\r\ninterface ArchetypeViewProps {\r\n    archetype: Archetype;\r\n    updateArchetype(archetype: Archetype): void;\r\n    cardOptions: DropdownItemProps[];\r\n}\r\n\r\nconst ArchetypeView: React.FC<ArchetypeViewProps> = (props: ArchetypeViewProps) => {\r\n    const { archetype, updateArchetype, cardOptions } = props;\r\n\r\n    const updateRule = (rule: Rule, index: number) => {\r\n        const newRules = [...archetype.rules];\r\n        newRules[index] = rule;\r\n        updateArchetype({ ...archetype, rules: newRules });\r\n    };\r\n\r\n    const addRule = () => {\r\n        const newRules = [...archetype.rules, { cardName: \"\", in: \"main\" } as Rule];\r\n        updateArchetype({ ...archetype, rules: newRules });\r\n    };\r\n\r\n    const removeRule = (index: number) => {\r\n        const newRules = [...archetype.rules];\r\n        newRules.splice(index, 1);\r\n        updateArchetype({ ...archetype, rules: newRules });\r\n    };\r\n\r\n    return (\r\n        <Grid divided=\"vertically\">\r\n            <Grid.Row verticalAlign=\"middle\">\r\n                <Grid.Column width={4}>\r\n                    <Input\r\n                        value={archetype.name}\r\n                        placeholder=\"Archetype Name\"\r\n                        onChange={(e) => {\r\n                            updateArchetype({ ...archetype, name: e.target.value });\r\n                        }}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Checkbox\r\n                        toggle\r\n                        label=\"Add Color Prefix?\"\r\n                        checked={archetype.prefixColors}\r\n                        onChange={(e, { checked }) => {\r\n                            updateArchetype({ ...archetype, prefixColors: checked });\r\n                        }}\r\n                    />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n\r\n            {archetype.rules.map((r, i) => {\r\n                return (\r\n                    <Grid.Row key={r.cardName}>\r\n                        <RuleForm rule={r} index={i} updateRule={updateRule} removeRule={removeRule} cardOptions={cardOptions} />\r\n                    </Grid.Row>\r\n                );\r\n            })}\r\n            <Grid.Row>\r\n                <Grid.Column>\r\n                    <Button icon=\"plus\" content=\"Add Card Rule\" onClick={addRule} />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default ArchetypeView;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Modal } from \"semantic-ui-react\";\r\nimport ArchetypeView from \"./ArchetypeView\";\r\nimport { Archetype } from \"../../types\";\r\nimport cardInfo from \"../../resources/cardInfo.json\";\r\n\r\ninterface EditArchetypeModalProps {\r\n    open: boolean;\r\n    onClose(): void;\r\n    archetype?: Archetype;\r\n    updateArchetype(archetype: Archetype): void;\r\n}\r\nconst cardOptions = Object.keys(cardInfo).map((card) => ({ key: card, text: card, value: card }));\r\n\r\nconst EditArchetypeModal: React.FC<EditArchetypeModalProps> = (props: EditArchetypeModalProps) => {\r\n    const { archetype, updateArchetype, open, onClose } = props;\r\n    const [localArchetype, setLocalArchetype] = useState<Archetype>();\r\n\r\n    useEffect(() => {\r\n        if (!archetype) return;\r\n        setLocalArchetype({ ...archetype } || { id: 999, name: \"\", rules: [] });\r\n    }, [archetype]);\r\n\r\n    const handleSave = () => {\r\n        if (localArchetype) {\r\n            updateArchetype(localArchetype);\r\n        }\r\n        setLocalArchetype(undefined);\r\n        onClose();\r\n    };\r\n    return (\r\n        <Modal open={open} onClose={onClose}>\r\n            <Modal.Content>\r\n                {localArchetype && <ArchetypeView archetype={localArchetype} updateArchetype={setLocalArchetype} cardOptions={cardOptions} />}\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button content=\"Save\" onClick={handleSave} />\r\n                <Button content=\"Cancel\" onClick={onClose} />\r\n            </Modal.Actions>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default EditArchetypeModal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Button, Header, Container, List, Ref, Modal, Form, Message } from \"semantic-ui-react\";\r\nimport { Archetype } from \"../../types\";\r\nimport { DragDropContext, Draggable, Droppable, DropResult } from \"react-beautiful-dnd\";\r\nimport EditArchetypeModal from \"./EditArchetypeModal\";\r\n\r\nconst reorder = (list: any[], startIndex: number, endIndex: number) => {\r\n    const result = [...list];\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n// const formatDropdownOptions = [\r\n//     { key: \"modern\", text: \"Modern\", value: \"modern\" },\r\n//     { key: \"pioneer\", text: \"Pioneer\", value: \"pioneer\" },\r\n//     { key: \"legacy\", text: \"Legacy\", value: \"legacy\" },\r\n//     { key: \"vintage\", text: \"Vintage\", value: \"vintage\" },\r\n//     { key: \"standard\", text: \"Standard\", value: \"standard\" }\r\n// ];\r\n\r\nconst ArchetypePage: React.FC = () => {\r\n    const [archetypeRules, setArchetypeRules] = useState<Archetype[]>([]);\r\n    const [selectedArchetype, setSelectedArchetype] = useState<Archetype>();\r\n    const [editModalOpen, setEditModalOpen] = useState<boolean>(false);\r\n    const [exportModalOpen, setExportModalOpen] = useState<boolean>(false);\r\n    const [exportString, setExportString] = useState<string>(\"\");\r\n    const [importError, setImportError] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        const rulesFromStorage = window.localStorage?.getItem(\"archetypeRules\");\r\n        if (rulesFromStorage && rulesFromStorage !== \"undefined\") {\r\n            setArchetypeRules(JSON.parse(rulesFromStorage));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const str = JSON.stringify(archetypeRules);\r\n        window.localStorage?.setItem(\"archetypeRules\", str);\r\n        setExportString(str);\r\n    }, [archetypeRules]);\r\n\r\n    useEffect(() => {\r\n        setImportError(false);\r\n    }, [exportModalOpen]);\r\n\r\n    const updateArchetype = (archetype: Archetype) => {\r\n        const newArchetypes = [...archetypeRules];\r\n        const index = archetypeRules.findIndex((a) => a.id === archetype.id);\r\n        if (index > -1) newArchetypes[index] = archetype;\r\n        else newArchetypes.push(archetype);\r\n        setArchetypeRules(newArchetypes);\r\n    };\r\n\r\n    const addArchetype = () => {\r\n        let id = 0;\r\n        archetypeRules.forEach((a) => {\r\n            if (a.id > id) id = a.id;\r\n        });\r\n        setEditModalOpen(true);\r\n        setSelectedArchetype({ id: id + 1, name: \"\", rules: [] });\r\n    };\r\n\r\n    const handleDragEnd = (result: DropResult) => {\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        const items = reorder(archetypeRules, result.source.index, result.destination.index);\r\n\r\n        setArchetypeRules(items);\r\n    };\r\n\r\n    const handleDeleteClick = (archetype: Archetype) => {\r\n        const newArchetypes = [...archetypeRules];\r\n        const index = newArchetypes.findIndex((a) => a.id === archetype.id);\r\n        if (index > -1) {\r\n            newArchetypes.splice(index, 1);\r\n        }\r\n        setArchetypeRules(newArchetypes);\r\n    };\r\n\r\n    const handleEditClick = (archetype: Archetype) => {\r\n        setSelectedArchetype(archetype);\r\n        setEditModalOpen(true);\r\n    };\r\n\r\n    const onEditModalClose = () => {\r\n        setEditModalOpen(false);\r\n    };\r\n\r\n    const saveFromString = () => {\r\n        try {\r\n            setImportError(false);\r\n            const rules = JSON.parse(exportString);\r\n            setArchetypeRules(rules);\r\n            setExportModalOpen(false);\r\n        } catch (error) {\r\n            setImportError(true);\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Header as=\"h2\">Archetype Definitions</Header>\r\n            <Message compact content=\"Tip: You can drag to reorder the archetypes!\" />\r\n            <Container>\r\n                <DragDropContext onDragEnd={handleDragEnd}>\r\n                    <Droppable droppableId=\"droppable\">\r\n                        {(provided) => (\r\n                            <Ref innerRef={provided.innerRef}>\r\n                                <List divided verticalAlign=\"middle\" {...provided.droppableProps}>\r\n                                    {archetypeRules.map((item, index) => (\r\n                                        <Draggable key={item.id} draggableId={item.id?.toString()} index={index}>\r\n                                            {(provided) => (\r\n                                                <Ref innerRef={provided.innerRef}>\r\n                                                    <List.Item {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                                        <List.Content floated=\"right\">\r\n                                                            <Button content=\"Delete\" onClick={() => handleDeleteClick(item)} />\r\n                                                        </List.Content>\r\n                                                        <List.Content floated=\"right\">\r\n                                                            <Button content=\"Edit\" onClick={() => handleEditClick(item)} />\r\n                                                        </List.Content>\r\n                                                        <List.Content verticalAlign=\"middle\">\r\n                                                            <Header>{item.name}</Header>\r\n                                                        </List.Content>\r\n                                                    </List.Item>\r\n                                                </Ref>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    ))}\r\n                                    {provided.placeholder}\r\n                                </List>\r\n                            </Ref>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n            </Container>\r\n            <Button icon=\"plus\" content=\"Create New Archetype Definition\" floated=\"left\" onClick={() => addArchetype()} />\r\n            <Button color=\"blue\" content=\"Import/Export\" onClick={() => setExportModalOpen(true)} />\r\n            <EditArchetypeModal open={editModalOpen} onClose={onEditModalClose} archetype={selectedArchetype} updateArchetype={updateArchetype} />\r\n            <Modal open={exportModalOpen} onClose={() => setExportModalOpen(false)}>\r\n                <Modal.Content>\r\n                    <Message\r\n                        content=\"Copy the text below into pastebin or a text file to make sure you don't lose your archetype rules if you clear your browser's\r\n                        local storage, then paste it here to restore them.\"\r\n                    />\r\n                    {importError && <Message error content=\"Failed to parse input! Reach out to me (FereMiyJeenyus) and I'll try to correct it.\" />}\r\n                    <Form>\r\n                        <Form.TextArea value={exportString} style={{ height: 500 }} onChange={(_e, { value }) => setExportString(value as string)} />\r\n                    </Form>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button content=\"Close without Saving\" icon=\"x\" onClick={() => setExportModalOpen(false)} />\r\n                    <Button content=\"Save & Close\" icon=\"checkmark\" onClick={saveFromString} positive />\r\n                </Modal.Actions>\r\n            </Modal>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ArchetypePage;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { ScrapeResult } from \"./types\";\r\n\r\nexport const scrapeResultSlice = createSlice({\r\n    name: \"scrapeResults\",\r\n    initialState: {\r\n        scrapeResults: [] as ScrapeResult[]\r\n    },\r\n    reducers: {\r\n        pushScrapeResult: (state, action) => {\r\n            state.scrapeResults.push(action.payload);\r\n        },\r\n        updateScrapeResult: (state, action) => {\r\n            const results = [...state.scrapeResults];\r\n            results[action.payload.id] = action.payload;\r\n            state.scrapeResults = results;\r\n        },\r\n        clearResults: (state) => {\r\n            state.scrapeResults = [];\r\n        }\r\n    }\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { pushScrapeResult, updateScrapeResult, clearResults } = scrapeResultSlice.actions;\r\n\r\nexport const selectScrapeResults = (state: { scrapeResults: ScrapeResult[] }): ScrapeResult[] => state.scrapeResults;\r\nexport default scrapeResultSlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Container, List, Message } from \"semantic-ui-react\";\r\nimport DeckList from \"../DeckList\";\r\nimport { Result, ScrapeResult, thx } from \"../types\";\r\nimport { updateScrapeResult } from \"../scrapeResultSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\ninterface ResultDisplayProps {\r\n    scrapeResult: ScrapeResult;\r\n}\r\n\r\nconst ResultDisplay: React.FC<ResultDisplayProps> = (props: ResultDisplayProps) => {\r\n    const { scrapeResult } = props;\r\n    const { eventType, eventDate, deckResults } = scrapeResult;\r\n    const dispatch = useDispatch();\r\n\r\n    const [copyMessageVisible, setCopyMessageVisible] = useState<boolean>(false);\r\n\r\n    const copyToClipboard = async (text: string) => {\r\n        if (!navigator.clipboard) {\r\n            return;\r\n        }\r\n        await navigator.clipboard.writeText(text);\r\n    };\r\n\r\n    const generateMarkdown = () => {\r\n        const resultLines: string[] = [];\r\n        for (const result of deckResults) {\r\n            const { deck, archetype, pilot, duplicatePilot, url } = result;\r\n\r\n            const muUrl = `[${archetype || \"archetype\"}](${url})`;\r\n            const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`;\r\n\r\n            const highlights = [...deck.main.filter((c) => c.highlighted), ...deck.sideboard.filter((c) => c.highlighted)].map((c) => c.name);\r\n            const muHighlights = `(${Array.from(new Set(highlights.map((c) => `[[${c}]]`))).join(\", \")})`;\r\n            const muString = `${scrapeResult.numbered ? \"1.\" : \"*\"} ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`;\r\n            resultLines.push(muString);\r\n        }\r\n        return [`Full Results: ${scrapeResult.mtgoUrl || \"\"}`, \"\", ...resultLines, \"\", thx].join(\"\\r\\n\");\r\n    };\r\n\r\n    const handleMarkdownClick = async () => {\r\n        const text = generateMarkdown();\r\n        await copyToClipboard(text);\r\n        setCopyMessageVisible(true);\r\n        setTimeout(() => {\r\n            setCopyMessageVisible(false);\r\n        }, 3000);\r\n    };\r\n\r\n    const updateDeck = (deckResult: Result) => {\r\n        const res = [...scrapeResult.deckResults];\r\n        const index = res.findIndex((r) => r.id === deckResult.id);\r\n        res[index] = deckResult;\r\n        dispatch(updateScrapeResult({ ...scrapeResult, deckResults: res }));\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <List>\r\n                <List.Item>\r\n                    <List.Content floated=\"right\">\r\n                        <Button content=\"Copy Markdown\" onClick={handleMarkdownClick} />\r\n                    </List.Content>\r\n                    <List.Content floated=\"right\">\r\n                        <Message success floating content=\"Copied to clipboard!\" hidden={!copyMessageVisible} onDismiss={() => setCopyMessageVisible(false)} />\r\n                    </List.Content>\r\n                    <List.Content>\r\n                        {eventType} {eventDate}\r\n                    </List.Content>\r\n                </List.Item>\r\n            </List>\r\n            {deckResults.map((d, i) => (\r\n                <DeckList key={i} result={d} updateDeck={updateDeck} />\r\n            ))}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ResultDisplay;\r\n","import React, { useState } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Button, Dimmer, Form, Grid, Header, List, Loader, Message, TextArea } from \"semantic-ui-react\";\r\nimport { identifyArchetype, scrapeUrl } from \"../lib\";\r\nimport { Archetype } from \"../types\";\r\nimport ResultDisplay from \"./ResultDisplay\";\r\nimport { clearResults, pushScrapeResult, selectScrapeResults } from \"../scrapeResultSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst ScraperForm: React.FC = () => {\r\n    const [urls, setUrls] = useState<string>(\"\");\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const scrapeResults = useSelector(selectScrapeResults);\r\n    const dispatch = useDispatch();\r\n\r\n    const scrapeUrls = async () => {\r\n        dispatch(clearResults());\r\n        const splitUrls = urls.split(\";\").map((s) => s.trim());\r\n        setIsLoading(true);\r\n        for (let index = 0; index < splitUrls.length; index++) {\r\n            const url = splitUrls[index];\r\n            try {\r\n                if (!url?.startsWith(\"https://www.mtgo.com\")) throw new Error(`non mtgo url ${url}`);\r\n                const scrape = await scrapeUrl(url);\r\n                if (!scrape) throw new Error(`no scraped results returned for ${url}`);\r\n\r\n                const rulesFromStorage = window.localStorage?.getItem(\"archetypeRules\");\r\n                let archetypeRules: Archetype[] = [];\r\n                if (rulesFromStorage && rulesFromStorage !== \"undefined\") {\r\n                    archetypeRules = JSON.parse(rulesFromStorage);\r\n                }\r\n                const namedResults = scrape?.deckResults.map((r) => identifyArchetype(r, archetypeRules));\r\n\r\n                dispatch(pushScrapeResult({ ...scrape, deckResults: namedResults, id: index }));\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        setIsLoading(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading && (\r\n                <Dimmer active inverted>\r\n                    <Loader size=\"large\">Loading</Loader>\r\n                </Dimmer>\r\n            )}\r\n            <Header>MTGO Results Scraper</Header>\r\n            <Grid columns={16}>\r\n                <Grid.Row>\r\n                    <Grid.Column width={8} textAlign=\"left\">\r\n                        <Form>\r\n                            <TextArea value={urls} onInput={(e, data) => setUrls(data.value as string)} placeholder=\"Deck Dump URLs, separated by semicolons\" />\r\n                        </Form>\r\n                        <a href=\"https://www.mtgo.com/en/mtgo/decklists\" target=\"_blank\" rel=\"noopener noreferrer\" style={{ marginLeft: \"1em\" }}>\r\n                            MTGO Results\r\n                        </a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={8} textAlign=\"left\">\r\n                        <List horizontal>\r\n                            <List.Item>\r\n                                <Button onClick={scrapeUrls} content=\"Scrape\" />\r\n                            </List.Item>\r\n                        </List>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                {!!scrapeResults.length &&\r\n                    scrapeResults.map((r, i) => (\r\n                        <Grid.Row key={i}>\r\n                            <ResultDisplay scrapeResult={r} />\r\n                        </Grid.Row>\r\n                    ))}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ScraperForm;\r\n","import React from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport OldApp from \"./OldApp\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport About from \"./components/About\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport Archetypes from \"./components/archetypes/Archetypes\";\r\nimport ScraperForm from \"./components/ScraperForm\";\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <Router basename={\"/mtgo-results-scraper/\"}>\r\n            <NavBar />\r\n            <Container>\r\n                <Switch>\r\n                    <Route path=\"/archetypes\">\r\n                        <Archetypes />\r\n                    </Route>\r\n                    <Route path=\"/about\">\r\n                        <About />\r\n                    </Route>\r\n                    <Route path=\"/mass-entry\">\r\n                        <ScraperForm />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <OldApp />\r\n                    </Route>\r\n                </Switch>\r\n            </Container>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://bit.ly/CRA-PWA\");\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\"New content is available and will be used when all \" + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" }\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\"No internet connection found. App is running in offline mode.\");\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport scrapeResultReducer from \"./scrapeResultSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: scrapeResultReducer\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}