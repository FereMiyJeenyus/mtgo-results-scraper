{"version":3,"sources":["scraper.ts","CardItem.tsx","DeckList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["regex","spaces","getDecksFromUrl","wotcUrl","a","results","startsWith","fetch","response","text","body","$","cheerio","usernames","each","index","dg","headerContent","find","username","split","duplicatePilot","includes","push","parts","name","chaff","replace","toLowerCase","url","deck","maindeck","sideboard","row","trim","info","cardInfo","count","parseInt","highlighted","pilot","archetype","console","log","colorMap","W","undefined","U","B","R","G","M","C","CardItem","props","cardColor","otherHalfColor","card","toggleCardHighlight","costIcons","colors","manaCost","length","otherHalf","slice","forEach","pip","List","Item","style","marginLeft","paddingTop","content","symbol","shadow","onClick","className","Popup","trigger","Content","color","Header","Meta","type","Description","whiteSpace","power","toughness","extra","padding","float","fontWeight","faceName","colorLabels","typeLabels","colorColors","typeColors","DeckList","result","resultCount","goToNextDeck","goToPreviousDeck","setDisplayedDeck","useState","colorCount","setColorCount","typeCount","setTypeCount","c","useEffect","wCount","uCount","bCount","rCount","gCount","cCount","creatures","noncreatures","lands","types","main","Planeswalkers","Creatures","Instants","Sorceries","Artifacts","Enchantments","Lands","Unknown","side","Companion","Grid","width","Row","Column","marginBottom","Input","label","value","onChange","e","data","onKeyPress","key","Button","marginTop","Object","keys","map","Icon","Container","labels","datasets","backgroundColor","options","title","display","legend","position","cutoutPercentage","App","hasScraped","setHasScraped","setWotcUrl","setResults","resultsMarkup","setResultsMarkup","cardCounts","setCardCounts","displayedDeck","displayedDeckIndex","setDisplayedDeckIndex","deckModalOpen","setDeckModalOpen","tutorialModalOpen","setTutorialModalOpen","scrapeError","setScrapeError","isNumberedResults","setIsNumberedResults","generateMarkupLine","muUrl","muPilot","highlights","filter","muHighlights","Array","from","Set","join","generateMarkup","mu","muString","generateCardCounts","counts","r","countRow","deckCount","sort","b","scrape","scrapedResults","panes","menuItem","pane","Tab","Pane","Form","TextArea","height","columns","textAlign","target","placeholder","href","rel","horizontal","disabled","Message","negative","renderActiveOnly","Modal","open","centered","onClose","closeOnDimmerClick","closeIcon","res","paddingLeft","ordered","ListItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ssnjNAKMA,EAAQ,gBACRC,EAAS,KAEFC,EAAe,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,yDACrBC,EAAoB,IACtBF,EAAQG,WAAW,6BAFI,0CAIIC,IAAM,sCAAD,OAAuCJ,IAJhD,cAIbK,EAJa,gBAKAA,EAASC,OALT,OAKbC,EALa,OAMbC,EAAIC,OAAaF,GACjBG,EAAsB,GAC5BF,EAAE,eAAeG,MAAK,SAACC,EAAeC,GAClC,IAAMC,EAAgBN,EAAEK,GAAIE,KAAK,MAAMT,OACjCU,EAAWF,EAAcG,MAAM,MAAM,GACrCC,EAAiBR,EAAUS,SAASH,GAC1CN,EAAUU,KAAKJ,GACf,IAAMK,EAAQP,EAAcG,MAAM,MAC5BK,EAAOD,EAAM,GACfE,EAAQ,GACRF,EAAM,KACNE,EAAQF,EAAM,GAAGG,QAAQ3B,EAAO,IAAI2B,QAAQ1B,EAAQ,KAAK2B,eAE7D,IAAMC,EAAG,UAAM1B,EAAN,YAAiBsB,EAAKE,QAAQ3B,EAAO,IAAI2B,QAAQ1B,EAAQ,KAAK2B,eAA9D,OACLF,EAAQ,IAAMA,EAAQ,IAGpBI,EAAa,CACfC,SAAU,GACVC,UAAW,IAEfrB,EAAEK,GACGE,KAAK,iCACLA,KAAK,QACLJ,MAAK,SAACC,EAAekB,GAClB,IAAMR,EAAed,EAAEsB,GAAKf,KAAK,cAAcT,OAAOyB,OAChDC,EAAOC,EAASX,IAASW,EAASX,EAAKL,MAAM,MAAM,GAAGc,QAC5DJ,EAAKC,SAASR,KAAK,CACfE,OACAY,MAAOC,SAAS3B,EAAEsB,GAAKf,KAAK,eAAeT,OAAQ,IACnD8B,aAAa,EACbJ,YAIZxB,EAAEK,GACGE,KAAK,kCACLA,KAAK,QACLJ,MAAK,SAACC,EAAekB,GAClB,IAAMR,EAAOd,EAAEsB,GAAKf,KAAK,cAAcT,OAAOyB,OACxCC,EAAOC,EAASX,IAASW,EAASX,EAAKL,MAAM,MAAM,GAAGc,QAC5DJ,EAAKE,UAAUT,KAAK,CAChBE,OACAY,MAAOC,SAAS3B,EAAEsB,GAAKf,KAAK,eAAeT,OAAQ,IACnD8B,aAAa,EACbJ,YAIZ9B,EAAQkB,KAAK,CACTiB,MAAOrB,EACPU,IAAKA,EACLC,KAAMA,EACNT,iBACAoB,UAAW,GACX1B,aA7DW,wDAiEnB2B,QAAQC,IAAR,MAjEmB,sCAqEpBtC,GArEoB,0DAAH,sD,4DCEtBuC,EAEF,CACAC,OAAGC,EACHC,EAAG,OACHC,EAAG,QACHC,EAAG,MACHC,EAAG,QACHC,EAAG,SACHC,EAAG,SAgHQC,EA7G2B,SAACC,GACvC,IACIC,EACAC,EAFIC,EAA8BH,EAA9BG,KAAMC,EAAwBJ,EAAxBI,oBAGRC,EAAkC,GACxC,GAAIF,EAAKtB,KAAM,CAAC,IAAD,EACX,EAA6BsB,EAAKtB,KAA1ByB,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,SAChB,OAAQD,EAAOE,QACX,KAAK,EACDP,EAAYX,EAAQ,EACpB,MACJ,KAAK,EACDW,EAAYX,EAASgB,EAAO,IAC5B,MACJ,QACIL,EAAYX,EAAQ,EAG5B,aAAIa,EAAKtB,KAAK4B,iBAAd,aAAI,EAAqBH,OACrB,OAAQH,EAAKtB,KAAK4B,UAAUH,OAAOE,QAC/B,KAAK,EACDN,EAAiBZ,EAAQ,EACzB,MACJ,KAAK,EACDY,EAAiBZ,EAASgB,EAAO,IACjC,MACJ,QACIJ,EAAiBZ,EAAQ,EAIrC,GAAIiB,EACsBA,EAASG,MAAM,EAAGH,EAASC,OAAS,GAAG1C,MAAM,MACrD6C,SAAQ,SAACC,EAAKnD,GACxB4C,EAAUpC,KACN,cAAC4C,EAAA,EAAKC,KAAN,CAEIC,MAAO,CAAEC,WAAY,EAAGC,WAAY,GACpCC,QAAS,cAAC,IAAD,CAAMC,OAAQP,EAAIvC,QAAQ,IAAK,IAAIC,cAAe8C,QAAM,KAF5D3D,OASzB,OACI,cAACoD,EAAA,EAAKC,KAAN,CAEIO,QAAS,kBAAMjB,EAAoBD,IACnCmB,UAAWnB,EAAKlB,YAAc,YAAc,GAHhD,SAII,cAACsC,EAAA,EAAD,CACIC,QACI,8BACKrB,EAAKpB,MADV,IACkBoB,EAAKhC,QAH/B,SAMI,cAACoD,EAAA,EAAME,QAAP,UACKtB,EAAKtB,MACF,qCACI,eAAC,IAAD,CAAc6C,MAAOzB,EAArB,UACI,eAAC,IAAawB,QAAd,WACI,cAAC,IAAaE,OAAd,UAAsBxB,EAAKhC,OAC3B,cAAC,IAAayD,KAAd,UAAoBzB,EAAKtB,KAAKgD,OAC9B,cAAC,IAAaC,YAAd,CAA0Bf,MAAO,CAAEgB,WAAY,YAA/C,SACK5B,EAAKtB,KAAK1B,WAGjBgD,EAAKtB,KAAKmD,OAAS7B,EAAKtB,KAAKoD,YAC3B,cAAC,IAAaR,QAAd,CAAsBS,OAAK,EAACnB,MAAO,CAAEoB,QAAS,aAA9C,SACI,sBACIpB,MAAO,CACHqB,MAAO,QACPC,WAAY,QAHpB,UAKKlC,EAAKtB,KAAKmD,MALf,IAKuB7B,EAAKtB,KAAKoD,kBAK5C9B,EAAKtB,KAAK4B,WACP,eAAC,IAAD,CAAciB,MAAOxB,EAArB,UACI,eAAC,IAAauB,QAAd,WACI,cAAC,IAAaE,OAAd,UAAsBxB,EAAKtB,KAAK4B,UAAU6B,WAC1C,cAAC,IAAaV,KAAd,UAAoBzB,EAAKtB,KAAK4B,UAAUoB,OACxC,cAAC,IAAaC,YAAd,CAA0Bf,MAAO,CAAEgB,WAAY,YAA/C,SACK5B,EAAKtB,KAAK4B,UAAUtD,WAG3BgD,EAAKtB,KAAK4B,UAAUuB,OAAS7B,EAAKtB,KAAK4B,UAAUwB,YAC/C,cAAC,IAAaR,QAAd,CAAsBS,OAAK,EAACnB,MAAO,CAAEoB,QAAS,aAA9C,SACI,sBACIpB,MAAO,CACHqB,MAAO,QACPC,WAAY,QAHpB,UAKKlC,EAAKtB,KAAKmD,MALf,IAKuB7B,EAAKtB,KAAKoD,0BAhD5D9B,EAAKhC,OCrDhBoE,EAAc,CAAC,QAAS,OAAQ,QAAS,MAAO,QAAS,aAEzDC,EAAa,CAAC,WAAY,cAAe,QAEzCC,EAAc,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAEtEC,EAAa,CAAC,UAAW,UAAW,WAoP3BC,EAlP2B,SAAC3C,GACvC,IAAQ4C,EAA0E5C,EAA1E4C,OAAQC,EAAkE7C,EAAlE6C,YAAaC,EAAqD9C,EAArD8C,aAAcC,EAAuC/C,EAAvC+C,iBAAkBC,EAAqBhD,EAArBgD,iBAC7D,EAAoCC,mBAAmB,IAAvD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,mBAAmB,IAArD,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMjD,EAAsB,SAACD,GACzB,IAAQ3B,EAASoE,EAATpE,KACRoE,EAAOpE,KAAKC,SAASkC,SAAQ,SAAC2C,GACtBA,EAAEnF,OAASgC,EAAKhC,OAChBmF,EAAErE,aAAeqE,EAAErE,gBAG3B2D,EAAOpE,KAAKE,UAAUiC,SAAQ,SAAC2C,GACvBA,EAAEnF,OAASgC,EAAKhC,OAChBmF,EAAErE,aAAeqE,EAAErE,gBAG3B+D,EAAiB,2BAAKJ,GAAN,IAAcpE,WAGlC+E,qBAAU,WACN,GAAKX,EAAL,CACA,IAAKY,EAAmD,EAA3CC,EAA8C,EAAtCC,EAAyC,EAAjCC,EAAoC,EAA5BC,EAA+B,EAAvBC,EAA0B,EAClEC,EAAmC,EAAxBC,EAA2B,EAAbC,EAAgB,EAE9CpB,EAAOpE,KAAKC,SAASkC,SAAQ,SAACR,GAC1B,GAAIA,EAAKtB,KAAM,CACX,MAA0BsB,EAAKtB,KAAvByB,EAAR,EAAQA,OAAQ2D,EAAhB,EAAgBA,MACZ3D,EAAOtC,SAAS,OAAMwF,GAAUrD,EAAKpB,OACrCuB,EAAOtC,SAAS,OAAMyF,GAAUtD,EAAKpB,OACrCuB,EAAOtC,SAAS,OAAM0F,GAAUvD,EAAKpB,OACrCuB,EAAOtC,SAAS,OAAM2F,GAAUxD,EAAKpB,OACrCuB,EAAOtC,SAAS,OAAM4F,GAAUzD,EAAKpB,OACpCuB,EAAOE,QAAWL,EAAKtB,KAAKoF,MAAMjG,SAAS,UAAS6F,GAAU1D,EAAKpB,OAEpEkF,EAAMjG,SAAS,YAAa8F,GAAa3D,EAAKpB,MACzCkF,EAAMjG,SAAS,QAASgG,GAAS7D,EAAKpB,MAC1CgF,GAAgB5D,EAAKpB,UAGlCoE,EAAc,CAACK,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,IACvDR,EAAa,CAACS,EAAWC,EAAcC,OACxC,CAACpB,IAEJ,IAAMsB,EAAgD,CAClDC,cAAe,GACfC,UAAW,GACXC,SAAU,GACVC,UAAW,GACXC,UAAW,GACXC,aAAc,GACdC,MAAO,GACPC,QAAS,IAGb9B,EAAOpE,KAAKC,SAASkC,SAAQ,SAACR,GACrBA,EAAKtB,KAECsB,EAAKtB,KAAKoF,MAAMjG,SAAS,YAChCkG,EAAKE,UAAUnG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KACxDD,EAAKtB,KAAKoF,MAAMjG,SAAS,QAChCkG,EAAKO,MAAMxG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KACpDD,EAAKtB,KAAKoF,MAAMjG,SAAS,WAChCkG,EAAKG,SAASpG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KACvDD,EAAKtB,KAAKoF,MAAMjG,SAAS,WAChCkG,EAAKI,UAAUrG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KACxDD,EAAKtB,KAAKoF,MAAMjG,SAAS,cAAgBmC,EAAKtB,KAAKoF,MAAMjG,SAAS,YACzEkG,EAAKK,UAAUtG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KACxDD,EAAKtB,KAAKoF,MAAMjG,SAAS,iBAAmBmC,EAAKtB,KAAKoF,MAAMjG,SAAS,YAC5EkG,EAAKM,aAAavG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KAC3DD,EAAKtB,KAAKoF,MAAMjG,SAAS,iBAChCkG,EAAKC,cAAclG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KAdnE8D,EAAKQ,QAAQzG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,QAkBrE,IAAMuE,EAAgD,CAClDC,UAAW,GACXT,cAAe,GACfC,UAAW,GACXC,SAAU,GACVC,UAAW,GACXC,UAAW,GACXC,aAAc,GACdC,MAAO,GACPC,QAAS,IAGb9B,EAAOpE,KAAKE,UAAUiC,SAAQ,SAACR,GACtBA,EAAKtB,KAECsB,EAAKtB,KAAKoF,MAAMjG,SAAS,YAC5BmC,EAAKtB,KAAK1B,MAAQgD,EAAKtB,KAAK1B,KAAKa,SAAS,oBAC1C2G,EAAKC,UAAU3G,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KAE/DuE,EAAKP,UAAUnG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KAE5DD,EAAKtB,KAAKoF,MAAMjG,SAAS,QAChC2G,EAAKF,MAAMxG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KACpDD,EAAKtB,KAAKoF,MAAMjG,SAAS,WAChC2G,EAAKN,SAASpG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KACvDD,EAAKtB,KAAKoF,MAAMjG,SAAS,WAChC2G,EAAKL,UAAUrG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KACxDD,EAAKtB,KAAKoF,MAAMjG,SAAS,cAAgBmC,EAAKtB,KAAKoF,MAAMjG,SAAS,YACzE2G,EAAKJ,UAAUtG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KACxDD,EAAKtB,KAAKoF,MAAMjG,SAAS,iBAAmBmC,EAAKtB,KAAKoF,MAAMjG,SAAS,YAC5E2G,EAAKH,aAAavG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KAC3DD,EAAKtB,KAAKoF,MAAMjG,SAAS,iBAChC2G,EAAKR,cAAclG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,KAlBnEuE,EAAKD,QAAQzG,KAAK,cAAC,EAAD,CAAUkC,KAAMA,EAAMC,oBAAqBA,QAiCrE,OACI,eAACyE,EAAA,EAAD,CAAMC,MAAO,GAAb,UACI,eAACD,EAAA,EAAKE,IAAN,CAAUzD,UAAU,kBAApB,UACI,eAACuD,EAAA,EAAKG,OAAN,CAAaF,MAAO,EAApB,UACI,oBAAI/D,MAAO,CAAEkE,aAAc,UAA3B,SAAwCrC,EAAO1D,QAC/C,yCACU0D,EAAOnF,MAAQ,EADzB,OACgCoF,QAGpC,cAACgC,EAAA,EAAKG,OAAN,CAAaF,MAAO,EAApB,SACI,cAACI,EAAA,EAAD,CACIC,MAAM,YACNC,MAAOxC,EAAOzD,UACdkG,SAxBO,SAACC,EAAgBC,GACxC,IAAQH,EAAUG,EAAVH,MACRpC,EAAiB,2BAAKJ,GAAN,IAAczD,UAAWiG,MAuBzBI,WApBG,SAACF,GACN,UAAVA,EAAEG,KACF3C,SAqBI,cAAC+B,EAAA,EAAKG,OAAN,CAAaF,MAAO,EAApB,SACI,cAACY,EAAA,EAAD,CAAQrE,QAAS0B,EAAkB7B,QAAQ,eAE/C,cAAC2D,EAAA,EAAKG,OAAN,CAAaF,MAAO,EAApB,SACI,cAACY,EAAA,EAAD,CAAQrE,QAASyB,EAAc5B,QAAQ,cAI/C,eAAC2D,EAAA,EAAKE,IAAN,WACI,eAACF,EAAA,EAAKG,OAAN,CAAaF,MAAO,EAApB,UACI,cAACnD,EAAA,EAAD,CAAQT,QAAQ,WAAWH,MAAO,CAAEkE,aAAc,KAClD,cAACpE,EAAA,EAAD,CAAME,MAAO,CAAE4E,UAAW,GAA1B,SACI,cAAC9E,EAAA,EAAKC,KAAN,UACK8E,OAAOC,KAAK3B,GAAM4B,KAAI,SAACL,GACpB,OAAKvB,EAAKuB,GAAKjF,OAIX,eAACK,EAAA,EAAKA,KAAN,WACI,cAACA,EAAA,EAAKc,OAAN,CAAaT,QAASuE,IACrBvB,EAAKuB,KAFMA,GAHT,uCAY3B,eAACZ,EAAA,EAAKG,OAAN,CAAaF,MAAO,EAApB,UACI,cAACnD,EAAA,EAAD,CAAQT,QAAQ,YAAYH,MAAO,CAAEkE,aAAc,KACnD,cAACpE,EAAA,EAAD,CAAME,MAAO,CAAE4E,UAAW,GAA1B,SACI,cAAC9E,EAAA,EAAKC,KAAN,UACK8E,OAAOC,KAAKlB,GAAMmB,KAAI,SAACL,GACpB,OAAKd,EAAKc,GAAKjF,OAIX,eAACK,EAAA,EAAKA,KAAN,WACI,eAACA,EAAA,EAAKc,OAAN,WACa,cAAR8D,GAAuB,cAACM,EAAA,EAAD,CAAM5H,KAAK,QAClCsH,EACQ,cAARA,GAAuB,cAACM,EAAA,EAAD,CAAM5H,KAAK,WAEtCwG,EAAKc,KANMA,GAHT,uCAgB3B,eAACZ,EAAA,EAAKG,OAAN,CAAaF,MAAO,EAApB,UACI,cAACkB,EAAA,EAAD,CAAWjF,MAAO,CAAEkE,aAAc,QAAlC,SACI,cAAC,WAAD,CACIM,KAAM,CACFU,OAAQ1D,EACR2D,SAAU,CACN,CACIC,gBAAiB1D,EACjB8C,KAAMrC,KAIlBkD,QAAS,CACLC,MAAO,CACHC,SAAS,EACTnJ,KAAM,sBAEVoJ,OAAQ,CAAED,SAAS,QAI/B,cAACN,EAAA,EAAD,UACI,cAAC,WAAD,CACIT,KAAM,CACFU,OAAQzD,EACR0D,SAAU,CACN,CACIC,gBAAiBzD,EACjB6C,KAAMnC,EACN+B,MAAO,KAEX,CACIgB,gBAAiBzD,EAAWhC,MAAM,EAAG,GACrC6E,KAAMnC,EAAU1C,MAAM,EAAG,GACzByE,MAAO,OAInBiB,QAAS,CACLC,MAAO,CACHC,SAAS,EACTnJ,KAAM,qBAEVoJ,OAAQ,CAAED,SAAS,EAAME,SAAU,UACnCC,iBAAkB,kBCiDnCC,EAvSO,WAClB,MAAoCzD,oBAAkB,GAAtD,mBAAO0D,EAAP,KAAmBC,EAAnB,KACA,EAA8B3D,mBAAiB,IAA/C,mBAAOpG,EAAP,KAAgBgK,EAAhB,KACA,EAA8B5D,mBAAmB,IAAjD,mBAAOlG,EAAP,KAAgB+J,EAAhB,KACA,EAA0C7D,mBAAmB,IAA7D,mBAAO8D,EAAP,KAAsBC,EAAtB,KACA,EAAoC/D,mBAAmB,IAAvD,mBAAOgE,EAAP,KAAmBC,EAAnB,KACA,EAA0CjE,qBAA1C,mBAAOkE,EAAP,KAAsBnE,EAAtB,KACA,EAAoDC,qBAApD,mBAAOmE,EAAP,KAA2BC,EAA3B,KACA,EAA0CpE,oBAAkB,GAA5D,mBAAOqE,EAAP,KAAsBC,EAAtB,KACA,EAAkDtE,oBAAkB,GAApE,mBAAOuE,GAAP,KAA0BC,GAA1B,KACA,GAAsCxE,oBAAkB,GAAxD,qBAAOyE,GAAP,MAAoBC,GAApB,MACA,GAAkD1E,oBAAkB,GAApE,qBAAO2E,GAAP,MAA0BC,GAA1B,MAEAtE,qBAAU,WACFxG,IAAY4J,IACZ3D,EAAiBjG,EAAQ,IACzBsK,EAAsB,MAE3B,CAACtK,EAAS4J,IAEbpD,qBAAU,WACF1G,IAAYA,EAAQmB,SAAS,UAAYnB,EAAQmB,SAAS,eAC1D6J,IAAqB,KAE1B,CAAChL,IAEJ,IAAMiL,GAAqB,SAAClF,GACxB,IAAQpE,EAAgDoE,EAAhDpE,KAAMW,EAA0CyD,EAA1CzD,UAAWD,EAA+B0D,EAA/B1D,MAAOnB,EAAwB6E,EAAxB7E,eAAgBQ,EAAQqE,EAARrE,IAE1CwJ,EAAK,WAAO5I,GAAa,YAApB,aAAoCZ,EAApC,KACLyJ,EAAO,YAAQ9I,EAAMb,QAAQ,OAAQ,QAA9B,OACTN,EAAiB,gDAAkD,GAD1D,MAIPkK,EAAa,sBACZzJ,EAAKC,SAASyJ,QAAO,SAAC5E,GAAD,OAAOA,EAAErE,gBADlB,YAEZT,EAAKE,UAAUwJ,QAAO,SAAC5E,GAAD,OAAOA,EAAErE,iBACpC6G,KAAI,SAACxC,GAAD,OAAOA,EAAEnF,QACTgK,EAAY,WAAOC,MAAMC,KAAK,IAAIC,IAAIL,EAAWnC,KAAI,SAACxC,GAAD,kBAAYA,EAAZ,WAAqBiF,KAAK,MAAnE,KAClB,MAAM,GAAN,OAAUX,GAAoB,KAAO,IAArC,YAA4CG,EAA5C,aAAsDC,EAAtD,YAAiEC,EAAWzH,OAAS2H,EAAe,KAGlGK,GAAiB,SAACzL,GACpB,IAD0C,EACpC0L,EAAe,GADqB,cAErB1L,GAFqB,IAE1C,2BAA8B,CAAC,IAApB6F,EAAmB,QACpB8F,EAAWZ,GAAmBlF,GACpC6F,EAAGxK,KAAKyK,IAJ8B,8BAM1C1B,EAAiByB,IAGfE,GAAqB,SAAC5L,GACxB,IAAM6L,EAA8C,GACpD7L,EAAQ4D,SAAQ,SAACkI,GACbA,EAAErK,KAAKC,SAASkC,SAAQ,SAACR,GACrB,IAAM2I,EAAWF,EAAOhL,MAAK,SAAC0F,GAAD,OAAOA,EAAEnD,KAAKhC,OAASgC,EAAKhC,QACpD2K,GAUDA,EAAS3I,KAAKpB,OAASoB,EAAKpB,MAC5B+J,EAASC,aAVTH,EAAO3K,KAAK,CACRkC,KAAM,CACFhC,KAAMgC,EAAKhC,KACXY,MAAOoB,EAAKpB,MACZE,aAAa,GAEjB8J,UAAW,OAQvBF,EAAErK,KAAKE,UAAUiC,SAAQ,SAACR,GACtB,IAAM2I,EAAWF,EAAOhL,MAAK,SAAC0F,GAAD,OAAOA,EAAEnD,KAAKhC,OAASgC,EAAKhC,QACpD2K,GAUDA,EAAS3I,KAAKpB,OAASoB,EAAKpB,MACvB8J,EAAErK,KAAKC,SAASb,MAAK,SAAC0F,GAAD,OAAOA,EAAEnF,OAASgC,EAAKhC,SAC7C2K,EAASC,aAXbH,EAAO3K,KAAK,CACRkC,KAAM,CACFhC,KAAMgC,EAAKhC,KACXY,MAAOoB,EAAKpB,MACZE,aAAa,GAEjB8J,UAAW,UAW3BH,EAAOI,MAAK,SAAClM,EAAGmM,GAAJ,OAAUA,EAAE9I,KAAKpB,MAAQjC,EAAEqD,KAAKpB,SAC5CmI,EACI0B,EAAO9C,KACH,SAACxC,GAAD,gBACOA,EAAEnD,KAAKpB,MADd,eAC0BuE,EAAEnD,KAAKpB,MAAQ,EAAI,MAAQ,IADrD,eAC+DuE,EAAEnD,KAAKhC,KADtE,eACiFmF,EAAEyF,UADnF,gBAEQzF,EAAEyF,UAAY,EAAI,IAAM,SAMtCG,GAAM,uCAAG,4BAAApM,EAAA,kEAEFD,EAFE,iEAGsBD,EAAgBC,GAHtC,OAGDsM,EAHC,OAIPX,GAAeW,GACfR,GAAmBQ,GACnBrC,EAAWqC,GACXvC,GAAc,GACdW,GAAiB,GARV,kDAUPI,IAAe,GAVR,0DAAH,qDAyDNyB,GAAQ,CACV,CACIC,SAAU,WACVC,KACI,cAACC,EAAA,EAAIC,KAAL,UACI,cAACC,EAAA,EAAD,UACI,cAACA,EAAA,EAAKC,SAAN,CACItE,MAAO,CAAC,iBAAD,OAAkBvI,GAAW,IAAM,IAAnC,mBAA0CkK,GAA1C,CAAyD,GAxKnF,wIAwK4FwB,KAAK,QAC9ExH,MAAO,CAAE4I,OAAQ,UAJf,aAUtB,CACIN,SAAU,cACVC,KACI,cAACC,EAAA,EAAIC,KAAL,UACI,cAACC,EAAA,EAAD,UACI,cAACA,EAAA,EAAKC,SAAN,CAAetE,MAAK,OAAE6B,QAAF,IAAEA,OAAF,EAAEA,EAAYsB,KAAK,QAASxH,MAAO,CAAE4I,OAAQ,UAF3D,YAS1B,OACI,eAAC3D,EAAA,EAAD,CAAW1E,UAAU,MAArB,UACI,cAACK,EAAA,EAAD,mCACA,eAACkD,EAAA,EAAD,CAAM+E,QAAS,GAAf,UACI,eAAC/E,EAAA,EAAKE,IAAN,WACI,eAACF,EAAA,EAAKG,OAAN,CAAaF,MAAO,EAAG+E,UAAU,OAAjC,UACI,cAAC3E,EAAA,EAAD,CACIE,MAAOvI,EACPwI,SAAU,SAACC,GAAD,OAAOuB,EAAWvB,EAAEwE,OAAO1E,QACrC2E,YAAY,kBAEhB,mBACIC,KAAK,kFACLF,OAAO,SACPG,IAAI,sBACJlJ,MAAO,CAAEC,WAAY,OAJzB,6BAQJ,cAAC6D,EAAA,EAAKG,OAAN,CAAaF,MAAO,GAAI+E,UAAU,OAAlC,SACI,eAAChJ,EAAA,EAAD,CAAMqJ,YAAU,EAAhB,UACI,cAACrJ,EAAA,EAAKC,KAAN,UACI,cAAC4E,EAAA,EAAD,CAAQrE,QAAS6H,GAAQhI,QAAQ,aAErC,cAACL,EAAA,EAAKC,KAAN,UACI,cAAC4E,EAAA,EAAD,CAAQrE,QAAS,kBAAMkG,GAAiB,IAAOrG,QAAQ,QAAQiJ,UAAWxD,MAE9E,cAAC9F,EAAA,EAAKC,KAAN,UACI,cAAC4E,EAAA,EAAD,CAAQrE,QAAS,kBAAMoG,IAAqB,IAAOvG,QAAQ,2BAM3E,cAAC2D,EAAA,EAAKE,IAAN,UACI,eAACF,EAAA,EAAKG,OAAN,CAAaF,MAAO,GAApB,UACK4C,IACG,cAAC0C,EAAA,EAAD,CAASC,UAAQ,EAAjB,SACI,gHAGR,cAACd,EAAA,EAAD,CAAKH,MAAOA,GAAOkB,kBAAkB,YAIjD,cAACC,EAAA,EAAD,CACIC,KAAMlD,KAAmBH,EACzBsD,UAAU,EACVC,QAAS,kBAAMnD,GAAiB,IAChCoD,oBAAoB,EACpBC,WAAS,EALb,SAMI,cAACL,EAAA,EAAM9I,QAAP,UACK0F,GACG,cAAC,EAAD,CACIvE,OAAQuE,EACRrE,aA5HH,WACjB,GAAKqE,EAAL,CAGA,IAAM1J,EAAQ2J,GAAsB,EAE9ByD,EAAG,YAAO9N,GAChB8N,EAAIpN,GAAS0J,EACbL,EAAW+D,GAEX,IAAMpC,EAAK1B,EACX0B,EAAGhL,GAASqK,GAAmBX,GAC/BH,EAAiByB,GACbhL,EAAQ,EAAIV,EAAQyD,QACpBwC,EAAiBjG,EAAQU,EAAQ,IACjC4J,EAAsB5J,EAAQ,IAE9B8J,GAAiB,KA4GDxE,iBAxGC,WACrB,GAAKoE,EAAL,CAGA,IAAM1J,EAAQ2J,GAAsB,EAE9ByD,EAAG,YAAO9N,GAChB8N,EAAIpN,GAAS0J,EACbL,EAAW+D,GAEX,IAAMpC,EAAE,YAAO1B,GACf0B,EAAGhL,GAASqK,GAAmBX,GAC/BH,EAAiByB,GAEH,IAAVhL,GACAuF,EAAiBjG,EAAQU,EAAQ,IACjC4J,EAAsB5J,EAAQ,IAE9B8J,GAAiB,KAuFDvE,iBAAkBA,EAClBH,YAAa9F,EAAQyD,QAAU,QAK/C,cAAC+J,EAAA,EAAD,CACIC,KAAMhD,GACNiD,UAAU,EACVC,QAAS,kBAAMjD,IAAqB,IACpCkD,oBAAoB,EACpBC,WAAS,EALb,SAMI,cAACL,EAAA,EAAM9I,QAAP,UACI,eAACZ,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,KAAN,WACI,cAACD,EAAA,EAAKc,OAAN,oCACA,cAACqE,EAAA,EAAD,CAAWjF,MAAO,CAAEoB,QAAS,uBAA7B,kLAKJ,eAACtB,EAAA,EAAKC,KAAN,WACI,cAACD,EAAA,EAAKc,OAAN,+BACA,cAACqE,EAAA,EAAD,CAAWjF,MAAO,CAAE+J,YAAa,OAAjC,SACI,eAACjK,EAAA,EAAD,CAAMkK,SAAO,EAAb,UACI,cAACC,EAAA,EAAD,uFAGA,cAACA,EAAA,EAAD,oIAIA,cAACA,EAAA,EAAD,oIAOZ,eAACnK,EAAA,EAAKC,KAAN,WACI,cAACD,EAAA,EAAKc,OAAN,2DACA,eAACqE,EAAA,EAAD,CAAWjF,MAAO,CAAEoB,QAAS,iBAA7B,kCAC0B,IACtB,mBAAG6H,KAAK,wDAAR,gDC3RZiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7M,QAAQ6M,MAAMA,EAAMC,c","file":"static/js/main.2a32a20e.chunk.js","sourcesContent":["import fetch from \"node-fetch\";\r\nimport * as cheerio from \"cheerio\";\r\nimport { Deck, Result } from \"./types\";\r\nimport cardInfo from \"./resources/cardInfo.json\";\r\n\r\nconst regex = /[^A-Za-z _-]/g;\r\nconst spaces = / /g;\r\n\r\nexport const getDecksFromUrl = async (wotcUrl: string): Promise<Result[]> => {\r\n    const results: Result[] = [];\r\n    if (wotcUrl.startsWith(\"https://magic.wizards.com\")) {\r\n        try {\r\n            const response = await fetch(`https://scraper-cors.herokuapp.com/${wotcUrl}`);\r\n            const body = await response.text();\r\n            const $ = cheerio.load(body);\r\n            const usernames: string[] = [];\r\n            $(\".deck-group\").each((index: number, dg: cheerio.Element) => {\r\n                const headerContent = $(dg).find(\"h4\").text();\r\n                const username = headerContent.split(\" (\")[0];\r\n                const duplicatePilot = usernames.includes(username);\r\n                usernames.push(username);\r\n                const parts = headerContent.split(\" (\");\r\n                const name = parts[0];\r\n                let chaff = \"\";\r\n                if (parts[1]) {\r\n                    chaff = parts[1].replace(regex, \"\").replace(spaces, \"_\").toLowerCase();\r\n                }\r\n                const url = `${wotcUrl}#${name.replace(regex, \"\").replace(spaces, \"_\").toLowerCase()}${\r\n                    chaff ? \"_\" + chaff : \"\"\r\n                }`;\r\n\r\n                const deck: Deck = {\r\n                    maindeck: [],\r\n                    sideboard: []\r\n                };\r\n                $(dg)\r\n                    .find(\".sorted-by-overview-container\")\r\n                    .find(\".row\")\r\n                    .each((index: number, row: cheerio.Element) => {\r\n                        const name: string = $(row).find(\".card-name\").text().trim();\r\n                        const info = cardInfo[name] || cardInfo[name.split(\"//\")[0].trim()];\r\n                        deck.maindeck.push({\r\n                            name,\r\n                            count: parseInt($(row).find(\".card-count\").text(), 10),\r\n                            highlighted: false,\r\n                            info\r\n                        });\r\n                    });\r\n\r\n                $(dg)\r\n                    .find(\".sorted-by-sideboard-container\")\r\n                    .find(\".row\")\r\n                    .each((index: number, row: cheerio.Element) => {\r\n                        const name = $(row).find(\".card-name\").text().trim();\r\n                        const info = cardInfo[name] || cardInfo[name.split(\"//\")[0].trim()];\r\n                        deck.sideboard.push({\r\n                            name,\r\n                            count: parseInt($(row).find(\".card-count\").text(), 10),\r\n                            highlighted: false,\r\n                            info\r\n                        });\r\n                    });\r\n\r\n                results.push({\r\n                    pilot: username,\r\n                    url: url,\r\n                    deck: deck,\r\n                    duplicatePilot,\r\n                    archetype: \"\",\r\n                    index\r\n                });\r\n            });\r\n        } catch (err) {\r\n            console.log(err);\r\n            throw err;\r\n        }\r\n    }\r\n    return results;\r\n};\r\n","import React from \"react\";\r\nimport { Card } from \"./types\";\r\nimport { Card as SemanticCard, List, Popup } from \"semantic-ui-react\";\r\nimport { Mana } from \"@saeris/react-mana\";\r\n\r\ninterface CardItemProps {\r\n    card: Card;\r\n    toggleCardHighlight(Card: Card): void;\r\n}\r\n\r\nconst colorMap: {\r\n    [key: string]: \"blue\" | \"black\" | \"red\" | \"green\" | \"yellow\" | \"brown\" | undefined;\r\n} = {\r\n    W: undefined,\r\n    U: \"blue\",\r\n    B: \"black\",\r\n    R: \"red\",\r\n    G: \"green\",\r\n    M: \"yellow\",\r\n    C: \"brown\"\r\n};\r\n\r\nconst CardItem: React.FC<CardItemProps> = (props: CardItemProps) => {\r\n    const { card, toggleCardHighlight } = props;\r\n    let cardColor: \"blue\" | \"black\" | \"red\" | \"green\" | \"yellow\" | \"brown\" | undefined;\r\n    let otherHalfColor: \"blue\" | \"black\" | \"red\" | \"green\" | \"yellow\" | \"brown\" | undefined;\r\n    const costIcons: React.ReactElement[] = [];\r\n    if (card.info) {\r\n        const { colors, manaCost } = card.info;\r\n        switch (colors.length) {\r\n            case 0:\r\n                cardColor = colorMap[\"C\"];\r\n                break;\r\n            case 1:\r\n                cardColor = colorMap[colors[0]];\r\n                break;\r\n            default:\r\n                cardColor = colorMap[\"M\"];\r\n                break;\r\n        }\r\n        if (card.info.otherHalf?.colors) {\r\n            switch (card.info.otherHalf.colors.length) {\r\n                case 0:\r\n                    otherHalfColor = colorMap[\"C\"];\r\n                    break;\r\n                case 1:\r\n                    otherHalfColor = colorMap[colors[0]];\r\n                    break;\r\n                default:\r\n                    otherHalfColor = colorMap[\"M\"];\r\n                    break;\r\n            }\r\n        }\r\n        if (manaCost) {\r\n            const manaCostArray = manaCost.slice(1, manaCost.length - 1).split(\"}{\");\r\n            manaCostArray.forEach((pip, index) => {\r\n                costIcons.push(\r\n                    <List.Item\r\n                        key={index}\r\n                        style={{ marginLeft: 2, paddingTop: 0 }}\r\n                        content={<Mana symbol={pip.replace(\"/\", \"\").toLowerCase()} shadow />}\r\n                    />\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <List.Item\r\n            key={card.name}\r\n            onClick={() => toggleCardHighlight(card)}\r\n            className={card.highlighted ? \"highlight\" : \"\"}>\r\n            <Popup\r\n                trigger={\r\n                    <p>\r\n                        {card.count} {card.name}\r\n                    </p>\r\n                }>\r\n                <Popup.Content>\r\n                    {card.info && (\r\n                        <>\r\n                            <SemanticCard color={cardColor}>\r\n                                <SemanticCard.Content>\r\n                                    <SemanticCard.Header>{card.name}</SemanticCard.Header>\r\n                                    <SemanticCard.Meta>{card.info.type}</SemanticCard.Meta>\r\n                                    <SemanticCard.Description style={{ whiteSpace: \"pre-line\" }}>\r\n                                        {card.info.text}\r\n                                    </SemanticCard.Description>\r\n                                </SemanticCard.Content>\r\n                                {(card.info.power || card.info.toughness) && (\r\n                                    <SemanticCard.Content extra style={{ padding: \".25em 1em\" }}>\r\n                                        <div\r\n                                            style={{\r\n                                                float: \"right\",\r\n                                                fontWeight: \"bold\"\r\n                                            }}>\r\n                                            {card.info.power}/{card.info.toughness}\r\n                                        </div>\r\n                                    </SemanticCard.Content>\r\n                                )}\r\n                            </SemanticCard>\r\n                            {card.info.otherHalf && (\r\n                                <SemanticCard color={otherHalfColor}>\r\n                                    <SemanticCard.Content>\r\n                                        <SemanticCard.Header>{card.info.otherHalf.faceName}</SemanticCard.Header>\r\n                                        <SemanticCard.Meta>{card.info.otherHalf.type}</SemanticCard.Meta>\r\n                                        <SemanticCard.Description style={{ whiteSpace: \"pre-line\" }}>\r\n                                            {card.info.otherHalf.text}\r\n                                        </SemanticCard.Description>\r\n                                    </SemanticCard.Content>\r\n                                    {(card.info.otherHalf.power || card.info.otherHalf.toughness) && (\r\n                                        <SemanticCard.Content extra style={{ padding: \".25em 1em\" }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    float: \"right\",\r\n                                                    fontWeight: \"bold\"\r\n                                                }}>\r\n                                                {card.info.power}/{card.info.toughness}\r\n                                            </div>\r\n                                        </SemanticCard.Content>\r\n                                    )}\r\n                                </SemanticCard>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </Popup.Content>\r\n            </Popup>\r\n        </List.Item>\r\n    );\r\n};\r\n\r\nexport default CardItem;\r\n","import React, { ChangeEvent, useState, useEffect } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Header, Grid, Input, Button, List, Container, Icon } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { Result, Card } from \"./types\";\r\nimport CardItem from \"./CardItem\";\r\n\r\ninterface DeckListProps {\r\n    result: Result;\r\n    resultCount: number;\r\n    goToNextDeck(): void;\r\n    goToPreviousDeck(): void;\r\n    setDisplayedDeck(Result: Result): void;\r\n}\r\n\r\nconst colorLabels = [\"White\", \"Blue\", \"Black\", \"Red\", \"Green\", \"Colorless\"];\r\n\r\nconst typeLabels = [\"Creature\", \"Noncreature\", \"Land\"];\r\n\r\nconst colorColors = [\"#fff8d6\", \"#367ae0\", \"#404040\", \"#db2e2e\", \"#187d2a\", \"#cfcfcf\"];\r\n\r\nconst typeColors = [\"#8ba349\", \"#c48dc2\", \"#ffb114\"];\r\n\r\nconst DeckList: React.FC<DeckListProps> = (props: DeckListProps) => {\r\n    const { result, resultCount, goToNextDeck, goToPreviousDeck, setDisplayedDeck } = props;\r\n    const [colorCount, setColorCount] = useState<number[]>([]);\r\n    const [typeCount, setTypeCount] = useState<number[]>([]);\r\n\r\n    const toggleCardHighlight = (card: Card) => {\r\n        const { deck } = result;\r\n        result.deck.maindeck.forEach((c) => {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted;\r\n            }\r\n        });\r\n        result.deck.sideboard.forEach((c) => {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted;\r\n            }\r\n        });\r\n        setDisplayedDeck({ ...result, deck });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!result) return;\r\n        let [wCount, uCount, bCount, rCount, gCount, cCount] = [0, 0, 0, 0, 0, 0];\r\n        let [creatures, noncreatures, lands] = [0, 0, 0];\r\n\r\n        result.deck.maindeck.forEach((card) => {\r\n            if (card.info) {\r\n                const { colors, types } = card.info;\r\n                if (colors.includes(\"W\")) wCount += card.count;\r\n                if (colors.includes(\"U\")) uCount += card.count;\r\n                if (colors.includes(\"B\")) bCount += card.count;\r\n                if (colors.includes(\"R\")) rCount += card.count;\r\n                if (colors.includes(\"G\")) gCount += card.count;\r\n                if (!colors.length && !card.info.types.includes(\"Land\")) cCount += card.count;\r\n\r\n                if (types.includes(\"Creature\")) creatures += card.count;\r\n                else if (types.includes(\"Land\")) lands += card.count;\r\n                else noncreatures += card.count;\r\n            }\r\n        });\r\n        setColorCount([wCount, uCount, bCount, rCount, gCount, cCount]);\r\n        setTypeCount([creatures, noncreatures, lands]);\r\n    }, [result]);\r\n\r\n    const main: { [key: string]: React.ReactElement[] } = {\r\n        Planeswalkers: [],\r\n        Creatures: [],\r\n        Instants: [],\r\n        Sorceries: [],\r\n        Artifacts: [],\r\n        Enchantments: [],\r\n        Lands: [],\r\n        Unknown: []\r\n    };\r\n\r\n    result.deck.maindeck.forEach((card) => {\r\n        if (!card.info) {\r\n            main.Unknown.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Creature\")) {\r\n            main.Creatures.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Land\")) {\r\n            main.Lands.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Instant\")) {\r\n            main.Instants.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Sorcery\")) {\r\n            main.Sorceries.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Artifact\") && !card.info.types.includes(\"Creature\")) {\r\n            main.Artifacts.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Enchantment\") && !card.info.types.includes(\"Creature\")) {\r\n            main.Enchantments.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Planeswalker\")) {\r\n            main.Planeswalkers.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n    });\r\n\r\n    const side: { [key: string]: React.ReactElement[] } = {\r\n        Companion: [],\r\n        Planeswalkers: [],\r\n        Creatures: [],\r\n        Instants: [],\r\n        Sorceries: [],\r\n        Artifacts: [],\r\n        Enchantments: [],\r\n        Lands: [],\r\n        Unknown: []\r\n    };\r\n\r\n    result.deck.sideboard.forEach((card) => {\r\n        if (!card.info) {\r\n            side.Unknown.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Creature\")) {\r\n            if (card.info.text && card.info.text.includes(\"Companion —\")) {\r\n                side.Companion.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n            } else {\r\n                side.Creatures.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n            }\r\n        } else if (card.info.types.includes(\"Land\")) {\r\n            side.Lands.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Instant\")) {\r\n            side.Instants.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Sorcery\")) {\r\n            side.Sorceries.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Artifact\") && !card.info.types.includes(\"Creature\")) {\r\n            side.Artifacts.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Enchantment\") && !card.info.types.includes(\"Creature\")) {\r\n            side.Enchantments.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        } else if (card.info.types.includes(\"Planeswalker\")) {\r\n            side.Planeswalkers.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n    });\r\n\r\n    const handleSetArchetype = (e: ChangeEvent, data: any) => {\r\n        const { value } = data;\r\n        setDisplayedDeck({ ...result, archetype: value });\r\n    };\r\n\r\n    const handleKeyPress = (e: any) => {\r\n        if (e.key === \"Enter\") {\r\n            goToNextDeck();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Grid width={16}>\r\n            <Grid.Row className=\"decklist-header\">\r\n                <Grid.Column width={4}>\r\n                    <h3 style={{ marginBottom: \"0.25em\" }}>{result.pilot}</h3>\r\n                    <span>\r\n                        Deck {result.index + 1} of {resultCount}\r\n                    </span>\r\n                </Grid.Column>\r\n                <Grid.Column width={8}>\r\n                    <Input\r\n                        label=\"Archetype\"\r\n                        value={result.archetype}\r\n                        onChange={handleSetArchetype}\r\n                        onKeyPress={handleKeyPress}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <Button onClick={goToPreviousDeck} content=\"Previous\" />\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <Button onClick={goToNextDeck} content=\"Next\" />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n\r\n            <Grid.Row>\r\n                <Grid.Column width={5}>\r\n                    <Header content=\"Maindeck\" style={{ marginBottom: 0 }} />\r\n                    <List style={{ marginTop: 0 }}>\r\n                        <List.Item>\r\n                            {Object.keys(main).map((key) => {\r\n                                if (!main[key].length) {\r\n                                    return <></>;\r\n                                }\r\n                                return (\r\n                                    <List.List key={key}>\r\n                                        <List.Header content={key} />\r\n                                        {main[key]}\r\n                                    </List.List>\r\n                                );\r\n                            })}\r\n                        </List.Item>\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={5}>\r\n                    <Header content=\"Sideboard\" style={{ marginBottom: 0 }} />\r\n                    <List style={{ marginTop: 0 }}>\r\n                        <List.Item>\r\n                            {Object.keys(side).map((key) => {\r\n                                if (!side[key].length) {\r\n                                    return <></>;\r\n                                }\r\n                                return (\r\n                                    <List.List key={key}>\r\n                                        <List.Header>\r\n                                            {key === \"Companion\" && <Icon name=\"paw\" />}\r\n                                            {key}\r\n                                            {key === \"Companion\" && <Icon name=\"paw\" />}\r\n                                        </List.Header>\r\n                                        {side[key]}\r\n                                    </List.List>\r\n                                );\r\n                            })}\r\n                        </List.Item>\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={6}>\r\n                    <Container style={{ marginBottom: \"10px\" }}>\r\n                        <Doughnut\r\n                            data={{\r\n                                labels: colorLabels,\r\n                                datasets: [\r\n                                    {\r\n                                        backgroundColor: colorColors,\r\n                                        data: colorCount\r\n                                    }\r\n                                ]\r\n                            }}\r\n                            options={{\r\n                                title: {\r\n                                    display: true,\r\n                                    text: \"Color Distribution\"\r\n                                },\r\n                                legend: { display: false }\r\n                            }}\r\n                        />\r\n                    </Container>\r\n                    <Container>\r\n                        <Doughnut\r\n                            data={{\r\n                                labels: typeLabels,\r\n                                datasets: [\r\n                                    {\r\n                                        backgroundColor: typeColors,\r\n                                        data: typeCount,\r\n                                        label: \"1\"\r\n                                    },\r\n                                    {\r\n                                        backgroundColor: typeColors.slice(0, 2),\r\n                                        data: typeCount.slice(0, 2),\r\n                                        label: \"2\"\r\n                                    }\r\n                                ]\r\n                            }}\r\n                            options={{\r\n                                title: {\r\n                                    display: true,\r\n                                    text: \"Type Distribution\"\r\n                                },\r\n                                legend: { display: true, position: \"bottom\" },\r\n                                cutoutPercentage: 30\r\n                            }}\r\n                        />\r\n                    </Container>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default DeckList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Header, Container, Grid, Input, Button, Form, Modal, Message, Tab, List, ListItem } from \"semantic-ui-react\";\r\nimport \"./App.css\";\r\nimport { getDecksFromUrl } from \"./scraper\";\r\nimport { Result, Card } from \"./types\";\r\nimport DeckList from \"./DeckList\";\r\n\r\nconst thx = `Direct links courtesy of /u/FereMiyJeenyus and their [MTGO Results Scraper](https://feremiyjeenyus.github.io/mtgo-results-scraper/)`;\r\n\r\nconst App: React.FC = () => {\r\n    const [hasScraped, setHasScraped] = useState<boolean>(false);\r\n    const [wotcUrl, setWotcUrl] = useState<string>(\"\");\r\n    const [results, setResults] = useState<Result[]>([]);\r\n    const [resultsMarkup, setResultsMarkup] = useState<string[]>([]);\r\n    const [cardCounts, setCardCounts] = useState<string[]>([]);\r\n    const [displayedDeck, setDisplayedDeck] = useState<Result>();\r\n    const [displayedDeckIndex, setDisplayedDeckIndex] = useState<number>();\r\n    const [deckModalOpen, setDeckModalOpen] = useState<boolean>(false);\r\n    const [tutorialModalOpen, setTutorialModalOpen] = useState<boolean>(false);\r\n    const [scrapeError, setScrapeError] = useState<boolean>(false);\r\n    const [isNumberedResults, setIsNumberedResults] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if (results && !hasScraped) {\r\n            setDisplayedDeck(results[0]);\r\n            setDisplayedDeckIndex(0);\r\n        }\r\n    }, [results, hasScraped]);\r\n\r\n    useEffect(() => {\r\n        if (wotcUrl && (wotcUrl.includes(\"champ\") || wotcUrl.includes(\"challenge\"))) {\r\n            setIsNumberedResults(true);\r\n        }\r\n    }, [wotcUrl]);\r\n\r\n    const generateMarkupLine = (result: Result): string => {\r\n        const { deck, archetype, pilot, duplicatePilot, url } = result;\r\n\r\n        const muUrl = `[${archetype || \"archetype\"}](${url})`;\r\n        const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${\r\n            duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"\r\n        }**`;\r\n\r\n        const highlights = [\r\n            ...deck.maindeck.filter((c) => c.highlighted),\r\n            ...deck.sideboard.filter((c) => c.highlighted)\r\n        ].map((c) => c.name);\r\n        const muHighlights = `(${Array.from(new Set(highlights.map((c) => `[[${c}]]`))).join(\", \")})`;\r\n        return `${isNumberedResults ? \"1.\" : \"*\"} ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`;\r\n    };\r\n\r\n    const generateMarkup = (results: Result[]) => {\r\n        const mu: string[] = [];\r\n        for (const result of results) {\r\n            const muString = generateMarkupLine(result);\r\n            mu.push(muString);\r\n        }\r\n        setResultsMarkup(mu);\r\n    };\r\n\r\n    const generateCardCounts = (results: Result[]) => {\r\n        const counts: { card: Card; deckCount: number }[] = [];\r\n        results.forEach((r) => {\r\n            r.deck.maindeck.forEach((card) => {\r\n                const countRow = counts.find((c) => c.card.name === card.name);\r\n                if (!countRow) {\r\n                    counts.push({\r\n                        card: {\r\n                            name: card.name,\r\n                            count: card.count,\r\n                            highlighted: false\r\n                        },\r\n                        deckCount: 1\r\n                    });\r\n                } else {\r\n                    countRow.card.count += card.count;\r\n                    countRow.deckCount++;\r\n                }\r\n            });\r\n\r\n            r.deck.sideboard.forEach((card) => {\r\n                const countRow = counts.find((c) => c.card.name === card.name);\r\n                if (!countRow) {\r\n                    counts.push({\r\n                        card: {\r\n                            name: card.name,\r\n                            count: card.count,\r\n                            highlighted: false\r\n                        },\r\n                        deckCount: 1\r\n                    });\r\n                } else {\r\n                    countRow.card.count += card.count;\r\n                    if (!r.deck.maindeck.find((c) => c.name === card.name)) {\r\n                        countRow.deckCount++;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        counts.sort((a, b) => b.card.count - a.card.count);\r\n        setCardCounts(\r\n            counts.map(\r\n                (c) =>\r\n                    `${c.card.count} cop${c.card.count > 1 ? \"ies\" : \"y\"} of ${c.card.name} in ${c.deckCount} deck${\r\n                        c.deckCount > 1 ? \"s\" : \"\"\r\n                    }`\r\n            )\r\n        );\r\n    };\r\n\r\n    const scrape = async () => {\r\n        try {\r\n            if (!wotcUrl) return;\r\n            const scrapedResults = await getDecksFromUrl(wotcUrl);\r\n            generateMarkup(scrapedResults);\r\n            generateCardCounts(scrapedResults);\r\n            setResults(scrapedResults);\r\n            setHasScraped(true);\r\n            setDeckModalOpen(true);\r\n        } catch (error) {\r\n            setScrapeError(true);\r\n        }\r\n    };\r\n\r\n    const goToNextDeck = () => {\r\n        if (!displayedDeck) {\r\n            return;\r\n        }\r\n        const index = displayedDeckIndex || 0;\r\n\r\n        const res = [...results];\r\n        res[index] = displayedDeck;\r\n        setResults(res);\r\n\r\n        const mu = resultsMarkup;\r\n        mu[index] = generateMarkupLine(displayedDeck);\r\n        setResultsMarkup(mu);\r\n        if (index + 1 < results.length) {\r\n            setDisplayedDeck(results[index + 1]);\r\n            setDisplayedDeckIndex(index + 1);\r\n        } else {\r\n            setDeckModalOpen(false);\r\n        }\r\n    };\r\n\r\n    const goToPreviousDeck = () => {\r\n        if (!displayedDeck) {\r\n            return;\r\n        }\r\n        const index = displayedDeckIndex || 0;\r\n\r\n        const res = [...results];\r\n        res[index] = displayedDeck;\r\n        setResults(res);\r\n\r\n        const mu = [...resultsMarkup];\r\n        mu[index] = generateMarkupLine(displayedDeck);\r\n        setResultsMarkup(mu);\r\n\r\n        if (index !== 0) {\r\n            setDisplayedDeck(results[index - 1]);\r\n            setDisplayedDeckIndex(index - 1);\r\n        } else {\r\n            setDeckModalOpen(false);\r\n        }\r\n    };\r\n\r\n    const panes = [\r\n        {\r\n            menuItem: \"Markdown\",\r\n            pane: (\r\n                <Tab.Pane key=\"Markdown\">\r\n                    <Form>\r\n                        <Form.TextArea\r\n                            value={[`Full Results: ${wotcUrl || \"\"}`, \"\", ...resultsMarkup, \"\", thx].join(\"\\r\\n\")}\r\n                            style={{ height: 500 }}\r\n                        />\r\n                    </Form>\r\n                </Tab.Pane>\r\n            )\r\n        },\r\n        {\r\n            menuItem: \"Card Counts\",\r\n            pane: (\r\n                <Tab.Pane key=\"Counts\">\r\n                    <Form>\r\n                        <Form.TextArea value={cardCounts?.join(\"\\r\\n\")} style={{ height: 500 }} />\r\n                    </Form>\r\n                </Tab.Pane>\r\n            )\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <Container className=\"App\">\r\n            <Header>MTGO Results Scraper</Header>\r\n            <Grid columns={16}>\r\n                <Grid.Row>\r\n                    <Grid.Column width={3} textAlign=\"left\">\r\n                        <Input\r\n                            value={wotcUrl}\r\n                            onChange={(e) => setWotcUrl(e.target.value)}\r\n                            placeholder=\"Deck Dump URL\"\r\n                        />\r\n                        <a\r\n                            href=\"https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info\"\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                            style={{ marginLeft: \"1em\" }}>\r\n                            MTGO Results\r\n                        </a>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={13} textAlign=\"left\">\r\n                        <List horizontal>\r\n                            <List.Item>\r\n                                <Button onClick={scrape} content=\"Scrape\" />\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <Button onClick={() => setDeckModalOpen(true)} content=\"Decks\" disabled={!hasScraped} />\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <Button onClick={() => setTutorialModalOpen(true)} content=\"What's this?\" />\r\n                            </List.Item>\r\n                        </List>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        {scrapeError && (\r\n                            <Message negative>\r\n                                <p>There was an error while attempting to scrape results. Please try again later</p>\r\n                            </Message>\r\n                        )}\r\n                        <Tab panes={panes} renderActiveOnly={false} />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n            <Modal\r\n                open={deckModalOpen && !!displayedDeck}\r\n                centered={false}\r\n                onClose={() => setDeckModalOpen(false)}\r\n                closeOnDimmerClick={false}\r\n                closeIcon>\r\n                <Modal.Content>\r\n                    {displayedDeck && (\r\n                        <DeckList\r\n                            result={displayedDeck}\r\n                            goToNextDeck={goToNextDeck}\r\n                            goToPreviousDeck={goToPreviousDeck}\r\n                            setDisplayedDeck={setDisplayedDeck}\r\n                            resultCount={results.length || 0}\r\n                        />\r\n                    )}\r\n                </Modal.Content>\r\n            </Modal>\r\n            <Modal\r\n                open={tutorialModalOpen}\r\n                centered={false}\r\n                onClose={() => setTutorialModalOpen(false)}\r\n                closeOnDimmerClick={true}\r\n                closeIcon>\r\n                <Modal.Content>\r\n                    <List>\r\n                        <List.Item>\r\n                            <List.Header>What am I looking at?</List.Header>\r\n                            <Container style={{ padding: \"0.5em 1.25em 0.25em\" }}>\r\n                                This is a web tool for scraping Wizards of the Coast's MTGO results posts and formatting\r\n                                the contents for a Reddit post (or anywhere else that supports Markdown)\r\n                            </Container>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Header>How do I use it?</List.Header>\r\n                            <Container style={{ paddingLeft: \"1em\" }}>\r\n                                <List ordered>\r\n                                    <ListItem>\r\n                                        Paste the url for a WotC deck dump in the little box and click 'Scrape.'\r\n                                    </ListItem>\r\n                                    <ListItem>\r\n                                        Click 'Decks' to view the decklists. From there, you can enter the archetype\r\n                                        names and click cards to highlight them.\r\n                                    </ListItem>\r\n                                    <ListItem>\r\n                                        Copy the resulting text into your Reddit post. Be sure you're in 'Markdown Mode'\r\n                                        or your links will get ugly.\r\n                                    </ListItem>\r\n                                </List>\r\n                            </Container>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Header>How can I report a bug or suggest a feature?</List.Header>\r\n                            <Container style={{ padding: \"0.5em 1.25em \" }}>\r\n                                Message me on Reddit:{\" \"}\r\n                                <a href=\"https://reddit.com/message/compose/?to=FereMiyJeenyus\">/u/FereMiyJeenyus</a>\r\n                            </Container>\r\n                        </List.Item>\r\n                    </List>\r\n                </Modal.Content>\r\n            </Modal>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}