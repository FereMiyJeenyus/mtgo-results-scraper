{"version":3,"sources":["scraper.ts","CardItem.tsx","DeckList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["regex","spaces","getDecksFromUrl","wotcUrl","a","results","startsWith","fetch","response","text","body","$","cheerio","usernames","each","index","dg","headerContent","find","username","split","duplicatePilot","includes","push","parts","name","chaff","replace","toLowerCase","url","deck","maindeck","sideboard","row","trim","info","cardInfo","count","parseInt","highlighted","pilot","archetype","console","log","colorMap","W","undefined","U","B","R","G","M","C","CardItem","props","cardColor","card","toggleCardHighlight","costIcons","colors","manaCost","length","slice","forEach","pip","List","Item","style","marginLeft","paddingTop","content","symbol","shadow","onClick","className","Popup","trigger","Content","header","Header","horizontal","items","float","meta","type","description","color","otherHalf","faceName","colorLabels","typeLabels","colorColors","typeColors","DeckList","result","goToNextDeck","goToPreviousDeck","setDisplayedDeck","useState","colorCount","setColorCount","typeCount","setTypeCount","c","useEffect","wCount","uCount","bCount","rCount","gCount","cCount","creatures","noncreatures","lands","types","main","Creatures","Lands","Instants","Sorceries","Artifacts","Enchantments","Planeswalkers","Unknown","side","Companion","Grid","width","Row","Column","Input","label","value","onChange","e","data","onKeyPress","key","Button","marginBottom","marginTop","Object","keys","map","Icon","Container","labels","datasets","backgroundColor","options","title","display","legend","position","cutoutPercentage","App","hasScraped","setHasScraped","setWotcUrl","setResults","resultsMarkup","setResultsMarkup","cardCounts","setCardCounts","displayedDeck","displayedDeckIndex","setDisplayedDeckIndex","deckModalOpen","setDeckModalOpen","tutorialModalOpen","setTutorialModalOpen","scrapeError","setScrapeError","isNumberedResults","setIsNumberedResults","generateMarkupLine","muUrl","muPilot","highlights","filter","muHighlights","Array","from","Set","join","generateMarkup","mu","muString","generateCardCounts","counts","r","countRow","deckCount","sort","b","scrape","scrapedResults","panes","menuItem","pane","Tab","Pane","Form","TextArea","height","columns","textAlign","target","placeholder","href","rel","disabled","Message","negative","renderActiveOnly","Modal","open","centered","onClose","closeOnDimmerClick","closeIcon","res","Progress","total","progress","padding","paddingLeft","ordered","ListItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd227b64.chunk.js","sourcesContent":["import fetch from \"node-fetch\";\r\nimport * as cheerio from \"cheerio\";\r\nimport { Deck, Result } from './types';\r\nimport cardInfo from './resources/cardInfo.json';\r\n\r\nconst regex = /[^A-Za-z _-]/g;\r\nconst spaces = / /g;\r\n\r\nexport const getDecksFromUrl = async (wotcUrl: string): Promise<Result[]> => {\r\n    const results: Result[] = [];\r\n    if (wotcUrl.startsWith(\"https://magic.wizards.com\")) {\r\n        try {\r\n            const response = await fetch(`https://scraper-cors.herokuapp.com/${wotcUrl}`)\r\n            const body = await response.text()\r\n            const $ = cheerio.load(body)\r\n            const usernames: string[] = [];\r\n            $(\".deck-group\").each((index: number, dg: cheerio.Element) => {\r\n                const headerContent = $(dg)\r\n                    .find(\"h4\")\r\n                    .text();\r\n                const username = headerContent.split(\" (\")[0];\r\n                const duplicatePilot = usernames.includes(username)\r\n                usernames.push(username);\r\n                const parts = headerContent.split(\" (\");\r\n                const name = parts[0];\r\n                let chaff = \"\";\r\n                if (parts[1]) {\r\n                    chaff = parts[1]\r\n                        .replace(regex, \"\")\r\n                        .replace(spaces, \"_\")\r\n                        .toLowerCase();\r\n                }\r\n                const url = `${wotcUrl}#${name\r\n                    .replace(regex, \"\")\r\n                    .replace(spaces, \"_\")\r\n                    .toLowerCase()}${chaff ? \"_\" + chaff : \"\"}`;\r\n\r\n                const deck: Deck = {\r\n                    maindeck: [],\r\n                    sideboard: []\r\n                };\r\n                $(dg).find(\".sorted-by-overview-container\").find(\".row\").each((index: number, row: cheerio.Element) => {\r\n                    const name: string = $(row).find(\".card-name\").text().trim()\r\n                    const info = cardInfo[name] || cardInfo[name.split(\"//\")[0].trim()]\r\n                    deck.maindeck.push(\r\n                        {\r\n                            name,\r\n                            count: parseInt($(row).find(\".card-count\").text(), 10),\r\n                            highlighted: false,\r\n                            info\r\n                        }\r\n                    )\r\n                })\r\n\r\n                $(dg).find(\".sorted-by-sideboard-container\").find(\".row\").each((index: number, row: cheerio.Element) => {\r\n                    const name = $(row).find(\".card-name\").text().trim()\r\n                    const info = cardInfo[name] || cardInfo[name.split(\"//\")[0].trim()]\r\n                    deck.sideboard.push(\r\n                        {\r\n                            name,\r\n                            count: parseInt($(row).find(\".card-count\").text(), 10),\r\n                            highlighted: false,\r\n                            info\r\n                        }\r\n                    )\r\n                })\r\n\r\n                results.push({\r\n                    pilot: username,\r\n                    url: url,\r\n                    deck: deck,\r\n                    duplicatePilot,\r\n                    archetype: \"\"\r\n                });\r\n            });\r\n        } catch (err) {\r\n            console.log(err);\r\n            throw (err)\r\n        }\r\n\r\n    }\r\n    return results\r\n};\r\n","import React from 'react';\r\nimport { Card } from './types'\r\nimport { Card as SemanticCard, List, Popup, Header } from 'semantic-ui-react';\r\nimport { Mana } from \"@saeris/react-mana\"\r\n\r\n\r\ninterface CardItemProps {\r\n    card: Card;\r\n    toggleCardHighlight(Card: Card): void;\r\n}\r\n\r\nconst colorMap: { [key: string]: \"blue\" | \"black\" | \"red\" | \"green\" | \"yellow\" | \"brown\" | undefined } = {\r\n    W: undefined,\r\n    U: \"blue\",\r\n    B: \"black\",\r\n    R: \"red\",\r\n    G: \"green\",\r\n    M: \"yellow\",\r\n    C: \"brown\"\r\n}\r\n\r\nconst CardItem: React.FC<CardItemProps> = (props: CardItemProps) => {\r\n    const { card, toggleCardHighlight } = props\r\n    let cardColor: \"blue\" | \"black\" | \"red\" | \"green\" | \"yellow\" | \"brown\" | undefined;\r\n    const costIcons: React.ReactElement[] = []\r\n    if (card.info) {\r\n        const { colors, manaCost } = card.info\r\n        switch (colors.length) {\r\n            case 0:\r\n                cardColor = colorMap[\"C\"]\r\n                break;\r\n            case 1:\r\n                cardColor = colorMap[colors[0]];\r\n                break;\r\n            default:\r\n                cardColor = colorMap[\"M\"]\r\n                break;\r\n        }\r\n        if (manaCost) {\r\n            const manaCostArray = manaCost.slice(1, manaCost.length - 1).split(\"}{\");\r\n            manaCostArray.forEach((pip, index) => {\r\n                costIcons.push(<List.Item key={index} style={{ marginLeft: 2, paddingTop: 0 }} content={<Mana symbol={pip.replace('/', '').toLowerCase()} shadow />} />)\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\r\n            <Popup trigger={<p>{card.count} {card.name}</p>}>\r\n                <Popup.Content>\r\n                    {card.info &&\r\n                        <>\r\n                            <SemanticCard\r\n                                header={<Header>{card.name}<List horizontal items={costIcons} style={{ float: 'right' }} /></Header>}\r\n                                meta={card.info.type}\r\n                                description={card.info.text}\r\n                                color={cardColor}\r\n                            />\r\n                            {card.info.otherHalf &&\r\n                                <SemanticCard\r\n                                    header={<Header>{card.info.otherHalf.faceName}</Header>}\r\n                                    meta={card.info.otherHalf.type}\r\n                                    description={card.info.otherHalf.text}\r\n                                    color={cardColor}\r\n                                />}\r\n                        </>\r\n                    }\r\n                </Popup.Content>\r\n            </Popup>\r\n        </List.Item>\r\n    );\r\n}\r\n\r\nexport default CardItem;","import React, { ChangeEvent, useState, useEffect } from 'react';\r\nimport \"semantic-ui-css/semantic.min.css\"\r\nimport { Header, Grid, Input, Button, List, Container, Icon } from 'semantic-ui-react'\r\nimport './App.css';\r\nimport { Result, Card } from './types'\r\nimport { Doughnut } from 'react-chartjs-2'\r\nimport CardItem from './CardItem'\r\n\r\ninterface DeckListProps {\r\n    result: Result;\r\n    goToNextDeck(): void;\r\n    goToPreviousDeck(): void;\r\n    setDisplayedDeck(Result: Result): void;\r\n}\r\n\r\nconst colorLabels = [\r\n    'White',\r\n    'Blue',\r\n    'Black',\r\n    'Red',\r\n    'Green',\r\n    'Colorless'\r\n]\r\n\r\nconst typeLabels = [\r\n    'Creature',\r\n    'Noncreature',\r\n    'Land'\r\n]\r\n\r\nconst colorColors = [\r\n    '#fff8d6',\r\n    '#367ae0',\r\n    '#404040',\r\n    '#db2e2e',\r\n    '#187d2a',\r\n    '#cfcfcf'\r\n]\r\n\r\nconst typeColors = [\r\n    '#8ba349',\r\n    '#c48dc2',\r\n    '#ffb114'\r\n]\r\n\r\n\r\nconst DeckList: React.FC<DeckListProps> = (props: DeckListProps) => {\r\n    const { result, goToNextDeck, goToPreviousDeck, setDisplayedDeck } = props;\r\n    const [colorCount, setColorCount] = useState<number[]>([]);\r\n    const [typeCount, setTypeCount] = useState<number[]>([]);\r\n\r\n    const toggleCardHighlight = (card: Card) => {\r\n        const { deck } = result\r\n        for (const c of deck.maindeck) {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted;\r\n            }\r\n        }\r\n        for (const c of deck.sideboard) {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted;\r\n            }\r\n        }\r\n        setDisplayedDeck({ ...result, deck })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!result) return;\r\n        let [wCount, uCount, bCount, rCount, gCount, cCount] = [0, 0, 0, 0, 0, 0];\r\n        let [creatures, noncreatures, lands] = [0, 0, 0];\r\n\r\n        for (const card of result.deck.maindeck) {\r\n            if (card.info) {\r\n                const { colors, types } = card.info;\r\n                if (colors.includes(\"W\")) wCount += card.count;\r\n                if (colors.includes(\"U\")) uCount += card.count;\r\n                if (colors.includes(\"B\")) bCount += card.count;\r\n                if (colors.includes(\"R\")) rCount += card.count;\r\n                if (colors.includes(\"G\")) gCount += card.count;\r\n                if (!colors.length && !card.info.types.includes(\"Land\")) cCount += card.count;\r\n\r\n                if (types.includes(\"Creature\")) creatures += card.count;\r\n                else if (types.includes(\"Land\")) lands += card.count;\r\n                else noncreatures += card.count;\r\n            }\r\n        }\r\n        setColorCount([wCount, uCount, bCount, rCount, gCount, cCount])\r\n        setTypeCount([creatures, noncreatures, lands])\r\n    }, [result]);\r\n\r\n    const main: { [key: string]: React.ReactElement[] } = {\r\n        \"Planeswalkers\": [],\r\n        \"Creatures\": [],\r\n        \"Instants\": [],\r\n        \"Sorceries\": [],\r\n        \"Artifacts\": [],\r\n        \"Enchantments\": [],\r\n        \"Lands\": [],\r\n        \"Unknown\": []\r\n    }\r\n\r\n    for (const card of result.deck.maindeck) {\r\n        if (!card.info) {\r\n            main.Unknown.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Creature\")) {\r\n            main.Creatures.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Land\")) {\r\n            main.Lands.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Instant\")) {\r\n            main.Instants.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Sorcery\")) {\r\n            main.Sorceries.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Artifact\") && !card.info.types.includes(\"Creature\")) {\r\n            main.Artifacts.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Enchantment\") && !card.info.types.includes(\"Creature\")) {\r\n            main.Enchantments.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Planeswalker\")) {\r\n            main.Planeswalkers.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n    }\r\n\r\n    const side: { [key: string]: React.ReactElement[] } = {\r\n        \"Companion\": [],\r\n        \"Planeswalkers\": [],\r\n        \"Creatures\": [],\r\n        \"Instants\": [],\r\n        \"Sorceries\": [],\r\n        \"Artifacts\": [],\r\n        \"Enchantments\": [],\r\n        \"Lands\": [],\r\n        \"Unknown\": []\r\n    }\r\n\r\n\r\n    for (const card of result.deck.sideboard) {\r\n        if (card.info && (!card.info.types || !card.info.text)) {\r\n            console.log(card);\r\n        }\r\n        if (!card.info) {\r\n            side.Unknown.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Creature\")) {\r\n            if (card.info.text && card.info.text.includes(\"Companion —\")) {\r\n                side.Companion.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />)\r\n            }\r\n            else {\r\n                side.Creatures.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n            }\r\n        }\r\n        else if (card.info.types.includes(\"Land\")) {\r\n            side.Lands.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Instant\")) {\r\n            side.Instants.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Sorcery\")) {\r\n            side.Sorceries.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Artifact\") && !card.info.types.includes(\"Creature\")) {\r\n            side.Artifacts.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Enchantment\") && !card.info.types.includes(\"Creature\")) {\r\n            side.Enchantments.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n        else if (card.info.types.includes(\"Planeswalker\")) {\r\n            side.Planeswalkers.push(<CardItem card={card} toggleCardHighlight={toggleCardHighlight} />);\r\n        }\r\n    }\r\n\r\n    const handleSetArchetype = (e: ChangeEvent, data: any) => {\r\n        const { value } = data\r\n        setDisplayedDeck({ ...result, archetype: value })\r\n    }\r\n\r\n    const handleKeyPress = (e: any) => {\r\n        if (e.key === 'Enter') {\r\n            goToNextDeck();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid width={16} >\r\n            <Grid.Row>\r\n                <Grid.Column width={12}>\r\n                    <Input label=\"Archetype\" value={result.archetype} onChange={handleSetArchetype} onKeyPress={handleKeyPress} />\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <Button onClick={goToPreviousDeck} content=\"Previous\" />\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <Button onClick={goToNextDeck} content=\"Next\" />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n\r\n            <Grid.Row>\r\n                <Grid.Column width={5}>\r\n                    <Header content=\"Maindeck\" style={{ marginBottom: 0 }} />\r\n                    <List style={{ marginTop: 0 }}>\r\n                        <List.Item>\r\n                            {Object.keys(main).map(\r\n                                (key) => {\r\n                                    if (!main[key].length) {\r\n                                        return <></>;\r\n                                    }\r\n                                    return (\r\n                                        <List.List key={key}>\r\n                                            <List.Header content={key} />\r\n                                            {main[key]}\r\n                                        </List.List>)\r\n                                }\r\n                            )}\r\n                        </List.Item>\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={5}>\r\n                    <Header content=\"Sideboard\" style={{ marginBottom: 0 }} />\r\n                    <List style={{ marginTop: 0 }}>\r\n                        <List.Item>\r\n                            {Object.keys(side).map(\r\n                                (key) => {\r\n                                    if (!side[key].length) {\r\n                                        return <></>;\r\n                                    }\r\n                                    return (\r\n                                        <List.List key={key}>\r\n                                            <List.Header>\r\n                                                {key === \"Companion\" && <Icon name=\"paw\" />}\r\n                                                {key}\r\n                                                {key === \"Companion\" && <Icon name=\"paw\" />}\r\n                                            </List.Header>\r\n                                            {side[key]}\r\n                                        </List.List>)\r\n                                }\r\n                            )}\r\n                        </List.Item>\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={6}>\r\n                    <Container style={{ marginBottom: \"10px\" }}>\r\n                        <Doughnut\r\n                            data={{ labels: colorLabels, datasets: [{ backgroundColor: colorColors, data: colorCount }] }}\r\n                            options={{ title: { display: true, text: \"Color Distribution\" }, legend: { display: false } }}\r\n                        />\r\n                    </Container>\r\n                    <Container>\r\n                        <Doughnut\r\n                            data={{\r\n                                labels: typeLabels,\r\n                                datasets: [\r\n                                    { backgroundColor: typeColors, data: typeCount, label: \"1\" },\r\n                                    { backgroundColor: typeColors.slice(0, 2), data: typeCount.slice(0, 2), label: \"2\" }\r\n                                ]\r\n                            }}\r\n                            options={{ title: { display: true, text: \"Type Distribution\" }, legend: { display: true, position: \"bottom\" }, cutoutPercentage: 30 }}\r\n                        />\r\n                    </Container>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid >\r\n    );\r\n}\r\n\r\nexport default DeckList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport \"semantic-ui-css/semantic.min.css\"\r\nimport { Header, Container, Grid, Input, Button, Form, Modal, Message, Progress, Tab, List, ListItem } from 'semantic-ui-react'\r\nimport './App.css';\r\nimport { getDecksFromUrl } from './scraper'\r\nimport { Result, Card } from './types'\r\nimport DeckList from './DeckList'\r\n\r\nconst thx = `Direct links courtesy of /u/FereMiyJeenyus and their [MTGO Results Scraper](https://feremiyjeenyus.github.io/mtgo-results-scraper/)`;\r\n\r\nconst App: React.FC = () => {\r\n  const [hasScraped, setHasScraped] = useState<boolean>(false)\r\n  const [wotcUrl, setWotcUrl] = useState<string>(\"\");\r\n  const [results, setResults] = useState<Result[]>([]);\r\n  const [resultsMarkup, setResultsMarkup] = useState<string[]>([]);\r\n  const [cardCounts, setCardCounts] = useState<string[]>([]);\r\n  const [displayedDeck, setDisplayedDeck] = useState<Result>();\r\n  const [displayedDeckIndex, setDisplayedDeckIndex] = useState<number>();\r\n  const [deckModalOpen, setDeckModalOpen] = useState<boolean>(false);\r\n  const [tutorialModalOpen, setTutorialModalOpen] = useState<boolean>(false);\r\n  const [scrapeError, setScrapeError] = useState<boolean>(false);\r\n  const [isNumberedResults, setIsNumberedResults] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (results && !hasScraped) {\r\n      setDisplayedDeck(results[0])\r\n      setDisplayedDeckIndex(0)\r\n    }\r\n  }, [results, hasScraped]);\r\n\r\n  useEffect(() => {\r\n    if (wotcUrl && (wotcUrl.includes(\"champ\") || wotcUrl.includes(\"challenge\"))) {\r\n      setIsNumberedResults(true)\r\n    }\r\n  }, [wotcUrl]);\r\n\r\n\r\n\r\n  const generateMarkupLine = (result: Result): string => {\r\n    const { deck, archetype, pilot, duplicatePilot, url } = result\r\n\r\n    const muUrl = `[${archetype || 'archetype'}](${url})`\r\n    const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`\r\n\r\n    const highlights = [...deck.maindeck.filter(c => c.highlighted), ...deck.sideboard.filter(c => c.highlighted)].map(c => c.name)\r\n    const muHighlights = `(${Array.from(new Set(highlights.map(c => `[[${c}]]`))).join(\", \")})`\r\n    return `${isNumberedResults ? '1.' : '*'} ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`\r\n  }\r\n\r\n  const generateMarkup = (results: Result[]) => {\r\n    const mu: string[] = [];\r\n    for (const result of results) {\r\n      const muString = generateMarkupLine(result)\r\n      mu.push(muString)\r\n    }\r\n    setResultsMarkup(mu);\r\n  }\r\n\r\n  const generateCardCounts = (results: Result[]) => {\r\n    const counts: { card: Card, deckCount: number }[] = []\r\n    results.forEach(r => {\r\n      r.deck.maindeck.forEach(card => {\r\n        const countRow = counts.find(c => c.card.name === card.name);\r\n        if (!countRow) {\r\n          counts.push({\r\n            card: { name: card.name, count: card.count, highlighted: false },\r\n            deckCount: 1\r\n          })\r\n        }\r\n        else {\r\n          countRow.card.count += card.count;\r\n          countRow.deckCount++;\r\n        }\r\n      })\r\n\r\n      r.deck.sideboard.forEach(card => {\r\n        const countRow = counts.find(c => c.card.name === card.name);\r\n        if (!countRow) {\r\n          counts.push({\r\n            card: { name: card.name, count: card.count, highlighted: false },\r\n            deckCount: 1\r\n          })\r\n        }\r\n        else {\r\n          countRow.card.count += card.count;\r\n          if (!r.deck.maindeck.find(c => c.name === card.name)) {\r\n            countRow.deckCount++;\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    counts.sort((a, b) => b.card.count - a.card.count)\r\n    setCardCounts(counts.map(c => `${c.card.count} cop${c.card.count > 1 ? 'ies' : 'y'} of ${c.card.name} in ${c.deckCount} deck${c.deckCount > 1 ? 's' : ''}`))\r\n  }\r\n\r\n\r\n  const scrape = async () => {\r\n    try {\r\n      if (!wotcUrl) return;\r\n      const scrapedResults = await getDecksFromUrl(wotcUrl);\r\n      generateMarkup(scrapedResults);\r\n      generateCardCounts(scrapedResults);\r\n      setResults(scrapedResults);\r\n      setHasScraped(true);\r\n    } catch (error) {\r\n      setScrapeError(true)\r\n    }\r\n  }\r\n\r\n  const goToNextDeck = () => {\r\n    if (!displayedDeck) {\r\n      return\r\n    }\r\n    const index = displayedDeckIndex || 0;\r\n\r\n    const res = [...results]\r\n    res[index] = displayedDeck;\r\n    setResults(res);\r\n\r\n    const mu = resultsMarkup\r\n    mu[index] = generateMarkupLine(displayedDeck)\r\n    setResultsMarkup(mu)\r\n    if (index + 1 < results.length) {\r\n      setDisplayedDeck(results[index + 1])\r\n      setDisplayedDeckIndex(index + 1);\r\n    }\r\n    else {\r\n      setDeckModalOpen(false);\r\n    }\r\n  }\r\n\r\n  const goToPreviousDeck = () => {\r\n    if (!displayedDeck) {\r\n      return\r\n    }\r\n    const index = displayedDeckIndex || 0;\r\n\r\n    const res = [...results]\r\n    res[index] = displayedDeck;\r\n    setResults(res);\r\n\r\n    const mu = [...resultsMarkup]\r\n    mu[index] = generateMarkupLine(displayedDeck)\r\n    setResultsMarkup(mu)\r\n\r\n    if (index !== 0) {\r\n      setDisplayedDeck(results[index - 1])\r\n      setDisplayedDeckIndex(index - 1);\r\n    }\r\n    else {\r\n      setDeckModalOpen(false);\r\n    }\r\n  }\r\n\r\n  const panes = [\r\n    {\r\n      menuItem: 'Markdown', pane:\r\n        <Tab.Pane key='Markdown'>\r\n          <Form>\r\n            <Form.TextArea value={\r\n              [\r\n                `Full Results: ${wotcUrl || \"\"}`,\r\n                \"\",\r\n                ...resultsMarkup,\r\n                \"\",\r\n                thx\r\n              ].join(\"\\r\\n\")\r\n            } style={{ height: 500 }} />\r\n          </Form>\r\n        </Tab.Pane>\r\n    },\r\n    {\r\n      menuItem: 'Card Counts', pane:\r\n        <Tab.Pane key='Counts'>\r\n          <Form>\r\n            <Form.TextArea value={cardCounts?.join(\"\\r\\n\")} style={{ height: 500 }} />\r\n          </Form>\r\n        </Tab.Pane>\r\n    }\r\n  ]\r\n\r\n  return (\r\n    <Container className=\"App\">\r\n      <Header>MTGO Results Scraper</Header>\r\n      <Grid columns={16}>\r\n        <Grid.Row>\r\n          <Grid.Column width={3} textAlign=\"left\">\r\n            <Input value={wotcUrl} onChange={(e) => setWotcUrl(e.target.value)} placeholder=\"Deck Dump URL\" />\r\n            <a\r\n              href='https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info'\r\n              target='_blank'\r\n              rel=\"noopener noreferrer\"\r\n              style={{ marginLeft: '1em' }}>\r\n              MTGO Results\r\n            </a>\r\n          </Grid.Column>\r\n          <Grid.Column width={13} textAlign=\"left\">\r\n            <List horizontal>\r\n              <List.Item><Button onClick={scrape} content=\"Scrape\" /></List.Item>\r\n              <List.Item><Button onClick={() => (setDeckModalOpen(true))} content=\"Decks\" disabled={!hasScraped} /></List.Item>\r\n              <List.Item><Button onClick={() => (setTutorialModalOpen(true))} content=\"What's this?\" /></List.Item>\r\n            </List>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n\r\n        <Grid.Row>\r\n          <Grid.Column width={16}>\r\n            {scrapeError &&\r\n              <Message negative>\r\n                <p>There was an error while attempting to scrape results. Please try again later</p>\r\n              </Message>\r\n            }\r\n            <Tab panes={panes} renderActiveOnly={false} />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <Modal\r\n        open={deckModalOpen && !!displayedDeck}\r\n        centered={false}\r\n        onClose={() => setDeckModalOpen(false)}\r\n        closeOnDimmerClick={false}\r\n        closeIcon>\r\n        <Modal.Content>\r\n          {displayedDeck &&\r\n            <DeckList result={displayedDeck} goToNextDeck={goToNextDeck} goToPreviousDeck={goToPreviousDeck} setDisplayedDeck={setDisplayedDeck} />\r\n          }\r\n          <Progress\r\n            value={displayedDeckIndex ? displayedDeckIndex + 1 : \"\"}\r\n            total={results ? results.length : 0}\r\n            progress='ratio'\r\n            style={{ marginTop: '1em', marginBottom: 0 }}\r\n          />\r\n        </Modal.Content>\r\n      </Modal>\r\n      <Modal\r\n        open={tutorialModalOpen}\r\n        centered={false}\r\n        onClose={() => setTutorialModalOpen(false)}\r\n        closeOnDimmerClick={true}\r\n        closeIcon>\r\n        <Modal.Content>\r\n          <List>\r\n            <List.Item>\r\n              <List.Header>What am I looking at?</List.Header>\r\n              <Container style={{ padding: \"0.5em 1.25em 0.25em\" }}>This is a web tool for scraping Wizards of the Coast's MTGO results posts and formatting the contents for a Reddit post (or  else that supports Markdown)</Container>\r\n            </List.Item>\r\n            <List.Item>\r\n              <List.Header>How do I use it?</List.Header>\r\n              <Container style={{ paddingLeft: \"1em\" }}>\r\n                <List ordered>\r\n                  <ListItem>Paste the url for a WotC deck dump in the little box and click 'Scrape.'</ListItem>\r\n                  <ListItem>Click 'Decks' to view the decklists. From there, you can name them and click cards to highlight them.</ListItem>\r\n                  <ListItem>Copy the resulting text into your Reddit post. Be sure you're in 'Markdown Mode' or your links will get ugly.</ListItem>\r\n                </List>\r\n              </Container>\r\n            </List.Item>\r\n            <List.Item>\r\n              <List.Header>How can I report a bug or suggest a feature?</List.Header>\r\n              <Container style={{ padding: \"0.5em 1.25em \" }}>Message me on Reddit: <a href=\"https://reddit.com/message/compose/?to=FereMiyJeenyus\">/u/FereMiyJeenyus</a></Container>\r\n            </List.Item>\r\n          </List>\r\n        </Modal.Content>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}